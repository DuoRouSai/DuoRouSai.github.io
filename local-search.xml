<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>快速入门 rollup.js</title>
    <link href="/2022/06/14/%E6%B5%85%E5%85%A5%E9%97%A8%20rollup.js/"/>
    <url>/2022/06/14/%E6%B5%85%E5%85%A5%E9%97%A8%20rollup.js/</url>
    
    <content type="html"><![CDATA[<h2 id="快速入门-rollup-js"><a href="#快速入门-rollup-js" class="headerlink" title="快速入门 rollup.js"></a>快速入门 rollup.js</h2><blockquote><p>Q：为啥要学习 rollup.js</p><p>A：因为大家都在卷（rollup）</p></blockquote><p>开个玩笑，今天学习的是 JavaScript 模块打包器 – <strong>rollup.js</strong>，这个时候有人会问，为啥不用 webpack 打包呢？它俩有啥不一样的呢？</p><p>打包界流传一句话， Use webpack for apps, and Rollup for libraries</p><p>像打包成 sdk 或 liarary, rollup 会比 webpack 更小更快，具体原因，可以参考这个文章<a href="https://juejin.cn/post/6859539849972711437">JS SDK 构建实现 Webpack VS Rollup - 掘金 (juejin.cn)</a></p><h3 id="使用-rollup-js-创建第一个-bundle"><a href="#使用-rollup-js-创建第一个-bundle" class="headerlink" title="使用 rollup.js 创建第一个 bundle"></a>使用 rollup.js 创建第一个 bundle</h3><h4 id="命令行形式"><a href="#命令行形式" class="headerlink" title="命令行形式"></a>命令行形式</h4><p>使用 rollup 最简单的方式，全局安装</p><figure class="highlight coffeescript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs coffeescript"><span class="hljs-built_in">npm</span> i rollup -g<br></code></pre></div></td></tr></table></figure><p>安装完毕，就阔以使用 rollup 命令</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js">rollup <span class="hljs-comment">//和 rollup -h 或 rollup --help 是一样</span><br></code></pre></div></td></tr></table></figure><p>我们浅写一个模块应用</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-comment">// src/index.js</span><br><span class="hljs-keyword">import</span> module_a <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./module_a&#x27;</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">clog</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(module_a)<br>&#125;<br><span class="hljs-comment">// src/module_a.js</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> module_a = <span class="hljs-string">&#x27;俺是模块A&#x27;</span><br></code></pre></div></td></tr></table></figure><p>使用 rollup 命令打包</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">rollup src/index.js -f cjs<br></code></pre></div></td></tr></table></figure><p>其中 <code>-f</code> 选项（<code>--output.format</code> 的缩写），所导出的 commojs 类型。还可以指定 esm、umd、iife 等</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-comment">// 打包之后的 bundle.js 文件</span><br><span class="hljs-meta">&#x27;use strict&#x27;</span><br><br><span class="hljs-title class_">Object</span>.<span class="hljs-title function_">defineProperty</span>(<span class="hljs-built_in">exports</span>, <span class="hljs-string">&#x27;__esModule&#x27;</span>, &#123; <span class="hljs-attr">value</span>: <span class="hljs-literal">true</span> &#125;)<br><br><span class="hljs-keyword">var</span> module_a$<span class="hljs-number">1</span> = (module_a = <span class="hljs-string">&#x27;俺是模块A&#x27;</span>)<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">clog</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(module_a$<span class="hljs-number">1</span>)<br>&#125;<br><br><span class="hljs-built_in">exports</span>.<span class="hljs-property">clog</span> = clog<br></code></pre></div></td></tr></table></figure><p>恭喜你通关命令打包 bundle 的关卡 😀</p><h4 id="使用配置文件"><a href="#使用配置文件" class="headerlink" title="使用配置文件"></a>使用配置文件</h4><p>上面那种方式，放在项目中，打包会略显的繁琐，所以我们可以通过创建 rollup.config.js 文件写入打包相关配置</p><p>我们编写一个简易的 rollup.config.js</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-comment">// rollup.config.js</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br>  <span class="hljs-comment">// 入口</span><br>  <span class="hljs-attr">input</span>: <span class="hljs-string">&#x27;src/index.js&#x27;</span>,<br>  <span class="hljs-comment">// 出口</span><br>  <span class="hljs-attr">output</span>: &#123;<br>    <span class="hljs-comment">// 写入的文件路径</span><br>    <span class="hljs-attr">file</span>: <span class="hljs-string">&#x27;dist/bundle.js&#x27;</span>,<br>    <span class="hljs-comment">// 导出的格式，cjs / esm / umd</span><br>    <span class="hljs-attr">format</span>: <span class="hljs-string">&#x27;cjs&#x27;</span>,<br>  &#125;,<br>&#125;<br></code></pre></div></td></tr></table></figure><p>运行 rollup 命令，其中 <code>-c</code> 表明使用配置文件</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-comment"># 默认指向 rollup.config.js</span><br>rollup -c<br><span class="hljs-comment"># 编写不同环境下，配置文件,替换默认</span><br>rollup -c rollup.config.dev.js<br></code></pre></div></td></tr></table></figure><h3 id="使用插件"><a href="#使用插件" class="headerlink" title="使用插件"></a>使用插件</h3><p>可以使用各种各样的插件，来个性化打包你的 JavaScript 程序</p><p>比如，我们使用压缩插件，来将代码都压缩成一行</p><p>安装 <code>rollup-plugin-terser</code> 依赖</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">npm install -D rollup-plugin-terser<br></code></pre></div></td></tr></table></figure><p>修改 rollup.config.js 文件</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-comment">// rollup.config.js</span><br><span class="hljs-comment">// rollup-plugin-terser --- plugin</span><br><span class="hljs-keyword">import</span> &#123; terser &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;rollup-plugin-terser&quot;</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br>   ...<br>    <span class="hljs-attr">plugins</span>: [<br>      <span class="hljs-title function_">terser</span>()<br>    ]<br>  &#125;;<br></code></pre></div></td></tr></table></figure><p>运行 <code>rollup -c</code> 打包，打包出的 bundle.js 就会压缩到一行，压缩了文件的体积</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-meta">&#x27;use strict&#x27;</span><br><span class="hljs-title class_">Object</span>.<span class="hljs-title function_">defineProperty</span>(<span class="hljs-built_in">exports</span>, <span class="hljs-string">&#x27;__esModule&#x27;</span>, &#123; <span class="hljs-attr">value</span>: !<span class="hljs-number">0</span> &#125;)<br><span class="hljs-keyword">var</span> e = (module_a = <span class="hljs-string">&#x27;俺是模块A&#x27;</span>)<br><span class="hljs-built_in">exports</span>.<span class="hljs-property">clog</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(e)<br>&#125;<br></code></pre></div></td></tr></table></figure><p>ok，你已经完成 rollup 入门教学 ⭐</p><p>还有许多各种 <code>plugin</code> 玩法，可以参考以下文章</p><p><a href="https://github.com/rollup/awesome">rollup/awesome: ⚡️ Delightful Rollup Plugins, Packages, and Resources (github.com)</a></p><p><a href="https://juejin.cn/post/6844904062312251406">【水文】学习 Rollup.js 打包之插件详解 - 掘金 (juejin.cn)</a></p>]]></content>
    
    
    <categories>
      
      <category>打包工具</category>
      
    </categories>
    
    
    <tags>
      
      <tag>rollup.js</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>前端环境变量管理 .env 那些事儿</title>
    <link href="/2022/06/08/%E5%89%8D%E7%AB%AF%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%E7%AE%A1%E7%90%86%20.env%20%E9%82%A3%E4%BA%9B%E4%BA%8B%E5%84%BF/"/>
    <url>/2022/06/08/%E5%89%8D%E7%AB%AF%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%E7%AE%A1%E7%90%86%20.env%20%E9%82%A3%E4%BA%9B%E4%BA%8B%E5%84%BF/</url>
    
    <content type="html"><![CDATA[<h2 id="前端环境变量管理-env-那些事儿"><a href="#前端环境变量管理-env-那些事儿" class="headerlink" title="前端环境变量管理 .env 那些事儿"></a>前端环境变量管理 .env 那些事儿</h2><blockquote><p>🍬 前言：开发中，经常会碰到 .env 文件，常用保存一些敏感的配置信息，如数据库连接账号密码，第三方插件的 token 等，可能我们理所当然认为这是一个管理存储环境变量的地方，并没有深究它内部是如何工作的，通过深入浅出的方式重新了解环境变量以及常见几种开发环境</p></blockquote><h3 id="01-process-env💻"><a href="#01-process-env💻" class="headerlink" title="01 process.env💻"></a>01 process.env💻</h3><p>认识.env 文件前，首先认识下 process 是 Node 的一个全局变量，process.env 保存是当前的运行的环境变量。</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-comment">// index.js</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(process.<span class="hljs-property">env</span>)<br><br><span class="hljs-comment">// 通过终端我们打印出 process.env</span><br>node index.<span class="hljs-property">js</span><br><br><span class="hljs-comment">// 打印信息：（显而易见，打印出当前运行环境相关信息）</span><br>&#123;<br>  <span class="hljs-attr">ALLUSERSPROFILE</span>: <span class="hljs-string">&#x27;C:\\ProgramData&#x27;</span>,<br>  <span class="hljs-title class_">Android</span>: <span class="hljs-string">&#x27;D:\\CodeStudy\\AndroidProj\\Sdk\\platform-tools&#x27;</span>,<br>  <span class="hljs-attr">ANDROID_SDK_HOME</span>: <span class="hljs-string">&#x27;D:\\CodeStudy\\Android Studio\\avd&#x27;</span>,<br>  <span class="hljs-attr">APPDATA</span>: <span class="hljs-string">&#x27;C:\\Users\\DuoRouSai\\AppData\\Roaming&#x27;</span>,<br>  <span class="hljs-string">&#x27;asl.log&#x27;</span>: <span class="hljs-string">&#x27;Destination=file&#x27;</span>,<br>  <span class="hljs-title class_">CommonProgramFiles</span>: <span class="hljs-string">&#x27;C:\\Program Files\\Common Files&#x27;</span>,<br>  <span class="hljs-string">&#x27;CommonProgramFiles(x86)&#x27;</span>: <span class="hljs-string">&#x27;C:\\Program Files (x86)\\Common Files&#x27;</span>,<br>  <span class="hljs-title class_">CommonProgramW6432</span>: <span class="hljs-string">&#x27;C:\\Program Files\\Common Files&#x27;</span>,<br>  <span class="hljs-attr">COMPUTERNAME</span>: <span class="hljs-string">&#x27;DUOROUSAI&#x27;</span>,<br>  ...<br>&#125;<br></code></pre></div></td></tr></table></figure><p><strong>该如何注入自定义变量？</strong></p><p>单单只能查看 process.env 原有的配置信息，当然不能满足我们日常的开发，比如我们想注入一些自定义的变量，<code>AUTHOR=Duor</code></p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-comment"># 采用键值对的形式加入</span><br>AUTHOR=Duor node index.js<br><span class="hljs-comment"># 多个变量</span><br>AUTHOR=Duor MESSAGE=Hello_KK! node index.js<br></code></pre></div></td></tr></table></figure><p>打印结果：</p><p><img src="https://s2.loli.net/2022/06/08/Oj87VcdNEJpCsoM.png" alt="image-20220608150552762"></p><p>这样做，带来一个后果：</p><ul><li>不便管理：当变量多时，每次启动都需要添加，变得非常的繁琐。</li><li>可读性差：相信你不喜欢在长长的字符串寻找那个你想要的 KEY</li></ul><h3 id="02-env-文件-🗂️"><a href="#02-env-文件-🗂️" class="headerlink" title="02 .env 文件 🗂️"></a>02 .env 文件 🗂️</h3><p>接下来，就到了 <code>.env</code> 文件出场了，你可以写配置表一样，将一些重要的环境变量通过键值对形式保存在 <code>.env </code> 文件，例如像下面这样配置</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-comment"># .env</span><br><span class="hljs-comment"># APP 当前模式</span><br>APP_MODE: development<br><br><span class="hljs-comment"># 第三方插件密钥</span><br>OTHER_APP_TOKEN: 123456<br></code></pre></div></td></tr></table></figure><p><strong>那么问题来了</strong>，我们该如何读取 <code>.env</code> 文件里面的内容呢，紧接着 dotenv 出场了</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-comment"># 安装 dotenv 依赖</span><br>npm install -save dotenv<br></code></pre></div></td></tr></table></figure><p>它相当于一个解析模块一样，可以将.env 文件里面的配置解析出来，并帮我们注入到 process.env 里面去</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-keyword">const</span> dotenv = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;dotenv&#x27;</span>)<br><br><span class="hljs-comment">// 1.不传 path 参数，会默认需要当前路径下的 .env 文件</span><br>dotenv.<span class="hljs-title function_">config</span>()<br><br><span class="hljs-comment">// 2.当.env 文件不在同级文件夹，可以通过 path 传入.env 文件的路径</span><br>dotenv.<span class="hljs-title function_">config</span>(&#123; <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;./.env&#x27;</span> &#125;)<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;APP_MODE:&#x27;</span>, process.<span class="hljs-property">env</span>.<span class="hljs-property">APP_MODE</span>)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;OTHER_APP_TOKEN:&#x27;</span>, process.<span class="hljs-property">env</span>.<span class="hljs-property">OTHER_APP_TOKEN</span>)<br></code></pre></div></td></tr></table></figure><p>打印结果：</p><p><img src="https://s2.loli.net/2022/06/08/lx4TcrQjOBzWCqP.png" alt="image-20220608153428585"></p><h3 id="03-聊聊开发中常见的几种环境-🌲"><a href="#03-聊聊开发中常见的几种环境-🌲" class="headerlink" title="03 聊聊开发中常见的几种环境 🌲"></a>03 聊聊开发中常见的几种环境 🌲</h3><p>一个项目的生命周期大概分为开发、测试、预发布和正式环境，由于它们之间环境变量也不同，这也导致我们一个项目开发之初需要配置不同环境下的 .env 文件</p><blockquote><p>🧑‍💻 开发环境：一般用于程序同学开发过程中自测使用，当代码本地测试无误后，就可以部署测试环境</p><p>⚙️ 测试环境：当开发提测后，由测试同学进行一系列的功能，自动化，接口测试等</p><p>⌨️ 预发布环境：它是一个独立的测试环境，是过渡到正式环境之前的最后一步验证，一般使用的是正式环境的环境变量</p><p>✔️ 正式环境：也叫生产环境，是直接面向用户所使用的，使用的是正式环境的环境变量。</p></blockquote><p>话说到这，有些小伙伴可能疑问，那么多环境变量，难道我们一个个手动配置么？作为程序猿（懒 🦥），能自动化，就绝不手动。</p><p>下面例子，通过运行不同的命令行，从而注入不同的环境变量</p><p><strong>安装依赖：</strong></p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-comment"># 安装 dotenv 依赖</span><br>npm install -save dotenv<br><br><span class="hljs-comment"># 安装 cross-env，用于解决windows用户设置环境变量痛点</span><br>npm install --save-dev cross-env<br></code></pre></div></td></tr></table></figure><p><strong>分别创建两个不同环境变量的文件，<code>.env.production</code> 和 <code>.env.development</code></strong></p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-comment"># .env.development</span><br><span class="hljs-comment"># APP 当前模式:开发环境</span><br>APP_MODE: development<br><br><span class="hljs-comment"># 第三方插件密钥</span><br>OTHER_APP_TOKEN: 123456<br><br><span class="hljs-comment">#---------------------------------------------------</span><br><br><span class="hljs-comment"># .env.production</span><br><span class="hljs-comment"># APP 当前模式:生产环境</span><br>APP_MODE: production<br><br><span class="hljs-comment"># 第三方插件密钥</span><br>OTHER_APP_TOKEN: 789<br></code></pre></div></td></tr></table></figure><p><strong>配置 package.json 的 scripts</strong></p><figure class="highlight json"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs json"><span class="hljs-attr">&quot;scripts&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;start:dev&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;cross-env mode=development node index.js&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;start:prod&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;cross-env mode=production node index.js&quot;</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br></code></pre></div></td></tr></table></figure><p><strong>创建 config.js 文件</strong></p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-comment">// config.js</span><br><span class="hljs-comment">// 引入 dotenv 依赖</span><br><span class="hljs-keyword">const</span> dotenv = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;dotenv&#x27;</span>)<br><br><span class="hljs-comment">// 判断当前环境： 生成环境 / 开发环境</span><br><span class="hljs-keyword">let</span> envFile =<br>  process.<span class="hljs-property">env</span>.<span class="hljs-property">mode</span> === <span class="hljs-string">&#x27;development&#x27;</span> ? <span class="hljs-string">&#x27;.env.development&#x27;</span> : <span class="hljs-string">&#x27;.env.production&#x27;</span><br><br><span class="hljs-comment">// 注入环境变量</span><br>dotenv.<span class="hljs-title function_">config</span>(&#123; <span class="hljs-attr">path</span>: envFile &#125;)<br><br><span class="hljs-comment">// 导出环境变量</span><br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = &#123;<br>  <span class="hljs-attr">APP_MODE</span>: process.<span class="hljs-property">env</span>.<span class="hljs-property">APP_MODE</span>,<br>  <span class="hljs-attr">OTHER_APP_TOKEN</span>: process.<span class="hljs-property">env</span>.<span class="hljs-property">OTHER_APP_TOKEN</span>,<br>&#125;<br></code></pre></div></td></tr></table></figure><p><strong>index.js</strong></p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-comment">// 导入 config.js 模块</span><br><span class="hljs-keyword">const</span> &#123; <span class="hljs-variable constant_">APP_MODE</span>, <span class="hljs-variable constant_">OTHER_APP_TOKEN</span> &#125; = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;./config&#x27;</span>)<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;APP_MODE:&#x27;</span>, <span class="hljs-variable constant_">APP_MODE</span>)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;OTHER_APP_TOKEN:&#x27;</span>, <span class="hljs-variable constant_">OTHER_APP_TOKEN</span>)<br></code></pre></div></td></tr></table></figure><p><strong>分别运行<code>npm run start:dev</code> 和 <code>npm run start:prod</code></strong></p><p><img src="../AppData/Roaming/Typora/typora-user-images/image-20220608174033367.png" alt="image-20220608174033367"></p><p>通过终端打印的信息可以看到，我们已经实现了，通过 npm 命令，轻松实现自动注入不同的环境变量</p>]]></content>
    
    
    <categories>
      
      <category>前端工程化</category>
      
    </categories>
    
    
    <tags>
      
      <tag>前端工程化</tag>
      
      <tag>环境变量</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>React ‘s Context 用法</title>
    <link href="/2022/06/07/React%20%E2%80%98s%20Context%20%E7%94%A8%E6%B3%95/"/>
    <url>/2022/06/07/React%20%E2%80%98s%20Context%20%E7%94%A8%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<h2 id="React-‘s-Context-用法"><a href="#React-‘s-Context-用法" class="headerlink" title="React ‘s Context 用法"></a>React ‘s Context 用法</h2><blockquote><p>此文章所提及 context 指的是新版 Context API（React 16.3 引入），在这个版本以下的 context 指的是旧时 Context API</p></blockquote><h3 id="01-What-is-Context-API"><a href="#01-What-is-Context-API" class="headerlink" title="01 What is Context API ?"></a>01 What is Context API ?</h3><p>一般 React 开发应用， 数据一般都是通过 props 自上而下传递。但是对于一些类似用户偏好、主题 themes 采用这种方式层层传递，随着层数的增多，会显得及其繁琐。所以 React 官方就提出了 <code>Context API</code> 方案，它原理是在上层容器中，暴露出上下文 context ,子组件通过 <code>context.Consumer</code> 、<code>Class.contextType</code> 或 <code>useContext</code> 方式</p><p>接收参数。起到 <code>传递</code> 和 <code>共享</code> 的作用</p><h3 id="02-案例场景"><a href="#02-案例场景" class="headerlink" title="02 案例场景"></a>02 案例场景</h3><blockquote><p>不要一股脑热去使用 context ，它的使用同时也会带来一个副作用，这样会使得组件的复用性变差。</p></blockquote><ul><li>themes、用户偏好等，需要全局共享的数据</li><li>react-redux, 它其实就是使用 context 去实现 React 和 Redux 建立连接</li></ul><h3 id="03-Context-API-用法"><a href="#03-Context-API-用法" class="headerlink" title="03 Context API 用法"></a>03 Context API 用法</h3><h4 id="创建-context"><a href="#创建-context" class="headerlink" title="创建 context"></a>创建 context</h4><h5 id="context-createContext"><a href="#context-createContext" class="headerlink" title="context.createContext"></a>context.createContext</h5><figure class="highlight jsx"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs jsx"><span class="hljs-comment">//创建一个 Context 对象</span><br><span class="hljs-keyword">const</span> <span class="hljs-title class_">MyContext</span> = <span class="hljs-title class_">React</span>.<span class="hljs-title function_">createContext</span>(defaultValue)<br></code></pre></div></td></tr></table></figure><h4 id="传递-context"><a href="#传递-context" class="headerlink" title="传递 context"></a>传递 context</h4><h5 id="context-Provider"><a href="#context-Provider" class="headerlink" title="context.Provider"></a>context.Provider</h5><figure class="highlight jsx"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs jsx"><span class="hljs-comment">// 传递 context</span><br>&lt;<span class="hljs-title class_">MyContext</span>.<span class="hljs-property">Provider</span> value=&#123;<span class="hljs-comment">/* 某个值 */</span>&#125;&gt;<br></code></pre></div></td></tr></table></figure><h4 id="接收-context"><a href="#接收-context" class="headerlink" title="接收 context"></a>接收 context</h4><p>方式：</p><ul><li>useContext（函数组件）</li><li>Context.Consumer（通用）</li><li>Context.contextType（类名组件）</li></ul><figure class="highlight jsx"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs jsx"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span>, &#123; useContext, <span class="hljs-title class_">Component</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span><br><br><span class="hljs-keyword">const</span> themes = &#123;<br>  <span class="hljs-attr">light</span>: &#123;<br>    <span class="hljs-attr">foreground</span>: <span class="hljs-string">&#x27;#000000&#x27;</span>,<br>    <span class="hljs-attr">background</span>: <span class="hljs-string">&#x27;#eeeeee&#x27;</span>,<br>  &#125;,<br>  <span class="hljs-attr">dark</span>: &#123;<br>    <span class="hljs-attr">foreground</span>: <span class="hljs-string">&#x27;#ffffff&#x27;</span>,<br>    <span class="hljs-attr">background</span>: <span class="hljs-string">&#x27;#222222&#x27;</span>,<br>  &#125;,<br>&#125;<br><br><span class="hljs-keyword">const</span> <span class="hljs-title class_">ThemeContext</span> = <span class="hljs-title class_">React</span>.<span class="hljs-title function_">createContext</span>(&#123;<br>  <span class="hljs-attr">theme</span>: themes.<span class="hljs-property">light</span>,<br>  <span class="hljs-attr">toggleTheme</span>: <span class="hljs-function">() =&gt;</span> &#123;&#125;,<br>&#125;)<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">App</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> [theme, setTheme] = <span class="hljs-title class_">React</span>.<span class="hljs-title function_">useState</span>(themes.<span class="hljs-property">light</span>)<br><br>  <span class="hljs-keyword">const</span> <span class="hljs-title function_">toggleTheme</span> = (<span class="hljs-params"></span>) =&gt; &#123;<br>    <span class="hljs-title function_">setTheme</span>(theme === themes.<span class="hljs-property">dark</span> ? themes.<span class="hljs-property">light</span> : themes.<span class="hljs-property">dark</span>)<br>  &#125;<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">ThemeContext.Provider</span></span></span><br><span class="hljs-tag"><span class="language-xml">      <span class="hljs-attr">value</span>=<span class="hljs-string">&#123;&#123;</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">theme</span>,</span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">toggleTheme</span>,</span></span><br><span class="hljs-tag"><span class="language-xml">      &#125;&#125;</span></span><br><span class="hljs-tag"><span class="language-xml">    &gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">Toolbar</span> /&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">ThemeContext.Provider</span>&gt;</span></span><br>  )<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">Toolbar</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">ThemedButton</span> /&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>  )<br>&#125;<br><br><span class="hljs-comment">// 1. useContext 接收 context 中的值（函数组件）</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">ThemedButton</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> &#123; theme, toggleTheme &#125; = <span class="hljs-title function_">useContext</span>(<span class="hljs-title class_">ThemeContext</span>)<br><br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">button</span></span></span><br><span class="hljs-tag"><span class="language-xml">      <span class="hljs-attr">style</span>=<span class="hljs-string">&#123;&#123;</span> <span class="hljs-attr">background:</span> <span class="hljs-attr">theme.background</span>, <span class="hljs-attr">color:</span> <span class="hljs-attr">theme.foreground</span> &#125;&#125;</span></span><br><span class="hljs-tag"><span class="language-xml">      <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;toggleTheme&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">    &gt;</span></span><br><span class="language-xml">      toggleTheme</span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br>  )<br>&#125;<br><br><span class="hljs-comment">// 2. Context.Consumer 接收 context 中的值（通用）</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">ThemedButton</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">ThemeContext.Consumer</span>&gt;</span></span><br><span class="language-xml">      &#123;(&#123; theme, toggleTheme &#125;) =&gt; (</span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">button</span></span></span><br><span class="hljs-tag"><span class="language-xml">          <span class="hljs-attr">style</span>=<span class="hljs-string">&#123;&#123;</span> <span class="hljs-attr">background:</span> <span class="hljs-attr">theme.background</span>, <span class="hljs-attr">color:</span> <span class="hljs-attr">theme.foreground</span> &#125;&#125;</span></span><br><span class="hljs-tag"><span class="language-xml">          <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;toggleTheme&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">        &gt;</span></span><br><span class="language-xml">          toggleTheme</span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">      )&#125;</span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">ThemeContext.Consumer</span>&gt;</span></span><br>  )<br>&#125;<br><br><span class="hljs-comment">// 3. Context.contextType 接收 context 中的值（类名组件）</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">ThemedButton</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">Component</span> &#123;<br>  <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">let</span> &#123; theme, toggleTheme &#125; = <span class="hljs-variable language_">this</span>.<span class="hljs-property">context</span><br>    <span class="hljs-keyword">return</span> (<br>      <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">button</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">style</span>=<span class="hljs-string">&#123;&#123;</span> <span class="hljs-attr">background:</span> <span class="hljs-attr">theme.background</span>, <span class="hljs-attr">color:</span> <span class="hljs-attr">theme.foreground</span> &#125;&#125;</span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;toggleTheme&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">      &gt;</span></span><br><span class="language-xml">        toggleTheme</span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br>    )<br>  &#125;<br>&#125;<br><span class="hljs-title class_">ThemedButton</span>.<span class="hljs-property">contextType</span> = <span class="hljs-title class_">ThemeContext</span><br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>React</category>
      
    </categories>
    
    
    <tags>
      
      <tag>React</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MySQL 作业</title>
    <link href="/2022/06/07/MySQL%20%E4%BD%9C%E4%B8%9A/"/>
    <url>/2022/06/07/MySQL%20%E4%BD%9C%E4%B8%9A/</url>
    
    <content type="html"><![CDATA[<h2 id="MySQL-作业"><a href="#MySQL-作业" class="headerlink" title="MySQL 作业"></a>MySQL 作业</h2><h3 id="题目-1"><a href="#题目-1" class="headerlink" title="题目 1"></a>题目 1</h3><p>1.满足 WHERE 条件的数据有 10W 行，请问这个时候使用 LIMIT 1 来进行查询时，需要扫描多少行数据？为什么？</p><blockquote><p>通过打印执行计划发现，使用 LIMIT 1 进行扫描行数是 100207</p></blockquote><p><strong>SQL 语句执行顺序:</strong></p><blockquote><p>FROM =&gt; ON =&gt; JOIN =&gt; WHERE =&gt; … =&gt; LIMIT</p></blockquote><p><strong>原理：</strong>在实际 SQL 语句执行过程中，是由 <code>FROM</code> 开始， 每个步骤都会为下一步骤生成一个虚拟表，再执行 <code>LIMIT</code> 之前先执行 <code>WHERE</code>，通过执行计划 <code>using where</code>发现， limit 1 查询时并没有找到可用的索引，从而只能通过 WHERE 条件过滤获取结果。</p><p><img src="https://s2.loli.net/2022/05/23/uT1DlApUJKHtiM4.png" alt="image-20220523150148384"></p><h3 id="题目-2"><a href="#题目-2" class="headerlink" title="题目 2"></a>题目 2</h3><p>2.判断在不同的 SQL 语句中使用 AS 别名是否正确？为什么？</p><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> order_number <span class="hljs-keyword">AS</span> order_no,<br>       <span class="hljs-built_in">SUM</span>(price <span class="hljs-operator">*</span> quantity) <span class="hljs-keyword">AS</span> amount<br><span class="hljs-keyword">FROM</span> orderdetails<br><span class="hljs-keyword">WHERE</span> order_no <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;001&#x27;</span>(错误❌)<br><span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> order_no（正确✔）<br><span class="hljs-keyword">HAVING</span> total <span class="hljs-operator">&gt;</span> <span class="hljs-number">60000</span>;<br></code></pre></div></td></tr></table></figure><blockquote><p>在 MySQL 中，<code>WHERE</code> 错误 ；<code>GROUP BY</code> 正确</p></blockquote><p><strong>原理：</strong></p><p>在标准 SQL 语句执行顺序下， <code>WHERE</code> 和 <code>GROUP BY</code> 都是不可以使用别名的</p><blockquote><p>FROM =&gt; ON =&gt; JOIN =&gt; WHERE =&gt; GROUP BY =&gt; … =&gt; SELECT =&gt; …</p></blockquote><p>但是，<a href="https://dev.mysql.com/doc/refman/5.7/en/problems-with-alias.html">MySQL 下 <code>GROUP BY</code> 是可以的</a>， 原因是 MySQL 对查询进行加强</p><p><img src="https://s2.loli.net/2022/05/23/s3qBE6jLJxN4tCA.png" alt="image-20220523171715797"></p><h3 id="题目-3"><a href="#题目-3" class="headerlink" title="题目 3"></a>题目 3</h3><p>3.如果表 T 中没有字段 k，而你执行了这个语句 <code>select * from T where k=1</code>，那肯定是会报“不存在这个列”的错误：“<code>Unknown column &#39;a&#39; in &#39;where clause&#39;</code>”。那么这个错误是在我们上面提到的哪个阶段报出来的呢？</p><blockquote><p><code>分析器阶段</code>报错</p></blockquote><p><img src="https://s2.loli.net/2022/05/23/D3Q7b8wMShfFONc.png"></p><p><strong>原理：</strong>在 MySQL 的 server 层中， 分析器会对 SQL 语句进行<strong>词法分析，语法分析，语义分析</strong>，其中：</p><blockquote><p>词法分析：分析 SQL 语句中的字符串代表什么，生成解析树。如将字符串转换为表、列等…</p><p>语法分析：根据词法分析的结果，语法分析器会根据语法规则，判断你输入的这个 SQL 语句是否满足 MySQL 语法。 如通过关键字 select 得知是一条查询语句</p><p>预处理器：对 SQL 中的表，字段等内容检查是否存在，如 xx 表是否存在，xx 表 xx 列是否存在</p></blockquote><p>由此可见，当表 T 中没有字段 k 不存在时，在分析器阶段的预处理器阶段就会报错</p><h3 id="题目-4"><a href="#题目-4" class="headerlink" title="题目 4"></a>题目 4</h3><p>4.以下 SQL 是否会异常？如果异常，那么正确的应该怎么写？</p><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> order_number <span class="hljs-keyword">AS</span> order_no,<br>       <span class="hljs-built_in">SUM</span>(price <span class="hljs-operator">*</span> quantity) <span class="hljs-keyword">AS</span> amount<br><span class="hljs-keyword">FROM</span> orderdetails<br><span class="hljs-keyword">WHERE</span> <span class="hljs-built_in">SUM</span>(price <span class="hljs-operator">*</span> quantity) <span class="hljs-operator">&gt;</span> <span class="hljs-number">100</span><br><span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> order_no;<br></code></pre></div></td></tr></table></figure><blockquote><p>上述 SQL 是<strong>错误</strong>的</p></blockquote><p><strong>建表语句：</strong></p><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sql"><span class="hljs-comment">-- 创建表orderdetails</span><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> `orderdetails` (<br>  `order_number` <span class="hljs-type">int</span>(<span class="hljs-number">11</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> AUTO_INCREMENT,<br>  `price` <span class="hljs-type">float</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br>  `quantity` <span class="hljs-type">int</span>(<span class="hljs-number">11</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br>  <span class="hljs-keyword">PRIMARY</span> KEY (`order_number`)<br>) ENGINE<span class="hljs-operator">=</span>InnoDB AUTO_INCREMENT<span class="hljs-operator">=</span><span class="hljs-number">3</span> <span class="hljs-keyword">DEFAULT</span> CHARSET<span class="hljs-operator">=</span>utf8mb4 <span class="hljs-keyword">COLLATE</span><span class="hljs-operator">=</span>utf8mb4_bin;<br><br><span class="hljs-comment">-- 插入两条数据</span><br><span class="hljs-comment">-- 1。</span><br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> testsql.orderdetails<br>(price, quantity)<br><span class="hljs-keyword">VALUES</span>(<span class="hljs-number">1</span>, <span class="hljs-number">10</span>);<br><span class="hljs-comment">-- 2.</span><br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> testsql.orderdetails<br>(price, quantity)<br><span class="hljs-keyword">VALUES</span>(<span class="hljs-number">10</span>, <span class="hljs-number">20</span>);<br></code></pre></div></td></tr></table></figure><p><strong>验证过程：</strong></p><p>不难发现，因为在 <code>WHERE</code> 子句中使用了 group function 导致报错，因为在 SQL 语句执行过程中，<code>WHERE</code> 执行是要比 <code>AGG_FUNC</code> 要早，导致在执行 <code>WHERE</code> 无法识别聚合函数导致报错。</p><p><img src="https://s2.loli.net/2022/05/23/vN6UyMfnCoV8wud.png" alt="image-20220523181020640"></p><p><strong>正确写法：</strong></p><p><code>HAVING</code> 子句是在 <code>AGG_FUNC</code> 步骤之后， 所以使用其代替 <code>WHERE</code> 进行判断</p><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> order_number <span class="hljs-keyword">AS</span> order_no,<br>       <span class="hljs-built_in">SUM</span>(price <span class="hljs-operator">*</span> quantity) <span class="hljs-keyword">AS</span> amount<br><span class="hljs-keyword">FROM</span> orderdetails<br><span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> order_no;<br><span class="hljs-keyword">HAVING</span> amount <span class="hljs-operator">&gt;</span><span class="hljs-number">100</span><br></code></pre></div></td></tr></table></figure><p><img src="https://s2.loli.net/2022/05/23/TUODY6zXhwqP3uG.png" alt="image-20220523181700483"></p><h3 id="题目-5"><a href="#题目-5" class="headerlink" title="题目 5"></a>题目 5</h3><p>5.为什么要使用数据库连接池？连接池如何保活？</p><blockquote><p>数据连接池主要作用让数据库连接得到复用，避免了频繁建立，释放连接而产生大量性能和时间消耗，提升数据库性能和缩短响应时间。另一方面还可以统一管理连接，防止数据库连接泄漏导致的安全的隐患。</p><p>连接池保活机制，业务代码在低峰时会降低 get()动作，所以连接池中的连接在长时间不用时会导致失效，此时保活线程在监测到 get()的使用频率较低时，会模拟业务程序调用 get()获取连接后发送心跳包，然后再通过 free()将被保活的连接放回队列中，达到连接池中所有连接保活的目的。</p></blockquote><h3 id="题目-6"><a href="#题目-6" class="headerlink" title="题目 6"></a>题目 6</h3><p>6.以下两条 SQL，假设字段都不存在索引的前提下：</p><ol><li>哪个性能更好？为什么？</li><li>这两条语句的执行过程。</li></ol><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> a <span class="hljs-keyword">from</span> t <span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> a <span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> <span class="hljs-keyword">null</span>;<br><span class="hljs-keyword">select</span> <span class="hljs-keyword">distinct</span> a <span class="hljs-keyword">from</span> t;<br></code></pre></div></td></tr></table></figure><ul><li><strong>打印执行计划发现：</strong></li></ul><p>第一条 SQL 语句</p><p><img src="https://s2.loli.net/2022/05/24/eKfER8n5ztNPGJv.png" alt="image-20220524142321457"></p><p>第二条 SQL 语句</p><p><img src="https://s2.loli.net/2022/05/24/BG8MgEi5xcIjVT6.png" alt="image-20220524142655749"></p><blockquote><p>第二条 SQL 性能会更好，前者总共执行 4 个步骤，而后者总共执行 3 个步骤</p></blockquote><ul><li><p>两条语句的执行过程</p><ul><li><p>第一条 SQL 语句</p><blockquote><p>a.执行 FROM 获取数据表，生成虚拟表 vt1</p><p>b.执行 GROUP BY 操作，按照列名 a 进行分组 =&gt; vt2</p><p>c.执行 SLELECT 操作，按照列名 a 进行选取操作 =&gt; vt3</p><p>d.执行 ORDER BY 操作，生成游标 vc4</p></blockquote></li><li><p>第二条 SQL 语句</p><blockquote><p>a.执行 FROM 获取数据表，生成虚拟表 vt1</p><p>b.执行 SLELECT 操作，按照列名 a 进行选取操作 =&gt; vt2</p><p>c.执行 DISTINCT 操作，根据列名 a，去重 =&gt; vt3</p></blockquote></li></ul></li></ul><h3 id="题目-7"><a href="#题目-7" class="headerlink" title="题目 7"></a>题目 7</h3><p>7.什么样的表，适合使用查询缓存？为什么？</p><blockquote><p>一般来说，数据相对稳定、不常更新的表适合使用查询缓存。 因为这类数据表不需要常常的更新，更多起到一个查询的作用。若遇到频繁的请求时，通过查询缓存，命中则直接返回结果集，从而减少 SQL 执行次数，优化 SQL 的性能。</p><p>具体举例，比如地理区域数据表，区域代号这类数据表等等</p><p>比如在某电商平台，有个地址管理，用户可以通过选择省市区存储自己的地址，而 省市区这些地址，往往是不需要频繁更新的，起到往往是标识和选择的作用，所以用户在选择省市区联动时，会频繁查询省市区数据表，经过查询缓存步骤时，到查询引用表，通过一个哈希值（查询的数据库，客户端协议，查询本身等），判断是否命中（对比原始 SQL 语句，所以任何字符上的不同，例如空格，注释等都会导致缓存不会命中），假若命中，则直接返回缓存中的结果，否则正常走执行 SQL 语句。</p></blockquote><h3 id="题目-8"><a href="#题目-8" class="headerlink" title="题目 8"></a>题目 8</h3><p>8.以下 SQL 会报什么错？是在分析器哪个步骤抛出的错误？</p><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sql">elect id, name <span class="hljs-keyword">from</span> `<span class="hljs-keyword">user</span>` <span class="hljs-keyword">where</span> `id` <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<br></code></pre></div></td></tr></table></figure><blockquote><p>词法分析阶段报错</p></blockquote><p><strong>分析器执行过程：</strong></p><blockquote><p>词法分析：分析 SQL 语句中的字符串代表什么，生成解析树。如将字符串转换为表、列等…</p><p>语法分析：根据词法分析的结果，语法分析器会根据语法规则，判断你输入的这个 SQL 语句是否满足 MySQL 语法。 如通过关键字 select 得知是一条查询语句</p><p>预处理器：对 SQL 中的表，字段等内容检查是否存在，如 xx 表是否存在，xx 表 xx 列是否存在</p></blockquote><p>由此可见，当 SQL 语句，执行到<code>词法分析</code>时，发现无法解析 <code>elect</code> 这个字符串，而从无法生成解析树</p><h3 id="题目-9"><a href="#题目-9" class="headerlink" title="题目 9"></a>题目 9</h3><p>9.对以下 SQL 进行优化器分析，会出现哪些情况？</p><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> t1 <span class="hljs-keyword">join</span> t2 <span class="hljs-keyword">on</span> t1.c <span class="hljs-operator">=</span> <span class="hljs-number">10</span> <span class="hljs-keyword">and</span> t2.d <span class="hljs-operator">=</span> <span class="hljs-number">20</span>;<br></code></pre></div></td></tr></table></figure><p><strong>a.t1 和 t2 都无索引时，各 100 条数据</strong></p><p><img src="https://s2.loli.net/2022/05/25/jKaRmZnMIbF48Hf.png" alt="image-20220524220236404"></p><p><strong>b.t1 和 t2 都无索引时，各 10w 条数据</strong></p><p><img src="https://s2.loli.net/2022/05/25/W7UiTMCPGusLjb6.png" alt="image-20220524221455728"></p><p><strong>c.t1（添加），t2 其中一个有索引，各 100 条数据</strong></p><p><img src="https://s2.loli.net/2022/05/25/SPpNxA25i6Lab7O.png" alt="image-20220524223037569"></p><p><strong>d.t1（添加），t2 其中一个有索引，各 10w 数据</strong></p><p><img src="https://s2.loli.net/2022/05/25/R38ISgNVYEbBxzr.png" alt="image-20220524222136239"></p><p><strong>e.t1，t2 都有索引，各 100 条数据</strong></p><p><img src="https://s2.loli.net/2022/05/25/BkEzZHVY14ySUwA.png" alt="image-20220524223128738"></p><p><strong>f.t1，t2 都有索引，各 10w 条数据</strong></p><p><img src="https://s2.loli.net/2022/05/25/PUh9QfydI5rsTGB.png" alt="image-20220524222256582"></p><p><strong>g.当 t1 数据量大于 t2 数据量</strong></p><p><img src="https://s2.loli.net/2022/05/25/7DNFmMjHJTLCycz.png" alt="image-20220524223816271"></p><p><strong>h.当 t2 数据量大于 t1 数据量</strong></p><p><img src="https://s2.loli.net/2022/05/25/7N91neHYTVC3Bq5.png" alt="image-20220524223956446"></p><p><strong>分析可得：</strong></p><blockquote><p>默认情况：（数据量一致，无索引）</p><p>1.选择 join 关键字前面的表作为驱动表</p><p>当 t1, t2 其中一个拥有索引</p><p>1.数据量少，优化器选择其中有索引一方（数据表），作为驱动表</p><p>2.数据量大，优化器选择其中有索引一方（数据表），作为驱动表，随着数据量增大，扫描 rows 越少</p><p>当 t1, t2 都拥有索引</p><p>1.选中数据量少的一方（数据表），作为驱动表</p><p>2.数据量一致，选择默认 join 关键字前面的表作为驱动表</p></blockquote><p><strong>总结：</strong></p><ul><li><p>MySQL 优化器是基于成本来选择最优执行方案的，哪个成本(rows)最少选哪个</p></li><li><p>数据量大的时候，适当使用索引可以，减少扫描成本</p></li></ul><h3 id="题目-10"><a href="#题目-10" class="headerlink" title="题目 10"></a>题目 10</h3><p>10.如下表，请编写 SQL，完成以下题目：</p><p><strong>score 表数据如下：</strong></p><p><img src="https://s2.loli.net/2022/05/24/9QTehy8jWmzxIZw.png" alt="image-20220524182200241"></p><p>1.从每个分组中找到分数排名第一的用户；</p><p><img src="https://s2.loli.net/2022/05/24/Xfk3cy6ZvxQ2ENF.png" alt="image-20220524181758561"></p><p>​ 2.从每个分组中找到分数排名前二的用户；</p><p><img src="https://s2.loli.net/2022/05/24/osYugqISCLZFGed.png" alt="image-20220524181813817"></p><p>​ 3.获取每个每组下最后两名分数的平均值；</p><p><img src="https://s2.loli.net/2022/05/24/9AENMnSgUTRY6BQ.png" alt="image-20220524182118477"></p><h3 id="题目-11"><a href="#题目-11" class="headerlink" title="题目 11"></a>题目 11</h3><p>11.如果用 left join 的话，左边的表一定是驱动表吗？请举例说明。</p><blockquote><p>不一定，下方举个栗子</p></blockquote><p>创建两个结构相同的表 t1 和 t2 ，其中表 t1 的 c 字段有索引，而表 t2 没有</p><p><strong>分别执行两个不同 SQL 语句</strong></p><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sql"><span class="hljs-comment">-- 第一条SQL</span><br>explain <span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> t1 <span class="hljs-keyword">left</span> <span class="hljs-keyword">join</span> t2 <span class="hljs-keyword">on</span> t1.c <span class="hljs-operator">=</span> t2.c <span class="hljs-keyword">and</span>  t2.d <span class="hljs-operator">=</span> t1.d ;<br><span class="hljs-comment">-- 第二条 SQL</span><br>explain <span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> t1 <span class="hljs-keyword">left</span> <span class="hljs-keyword">join</span> t2 <span class="hljs-keyword">on</span> t1.c <span class="hljs-operator">=</span> t2.c <span class="hljs-keyword">where</span>  t2.d <span class="hljs-operator">=</span> t1.d ;<br></code></pre></div></td></tr></table></figure><p><strong>打印 explain：</strong></p><p><img src="https://s2.loli.net/2022/05/25/uD3lmx8IkP6YdCH.png" alt="image-20220524233059949"></p><p><img src="https://s2.loli.net/2022/05/24/v9LW7eSrfQFdUu3.png" alt="image-20220524234121992"></p><blockquote><p>可以发现，当把被驱动表的字段放在 where 条件里面做等值判断或不等值判断，会使得 left join 关键字右边 t2 作为驱动表。</p><p>通过 show warnings, 可以看到，MySQL 优化器把这条语句的 left join 改写成了 join，然后因为表 t1 的 c 上有索引，就把表 t2 作为驱动表，这样就可以用上表 t1 的 c 索引。</p></blockquote><h1 id="课外题"><a href="#课外题" class="headerlink" title="课外题"></a>课外题</h1><ol><li><p>课程中，详细讲述了一条查询 SQL 是如何执行的，那么，一条更新 SQL 又是如何执行呢？</p><p><img src="https://upload-images.jianshu.io/upload_images/5229824-491ffbb8cbe104d6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/658/format/webp" alt="img"></p></li><li><p>MySQL 通过哪个参数可以设置不使用查询缓存？</p><p>查询时增加一个 SQL_NO_CACHE 指令</p><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> SQL_NO_CACHE field_1, field_2, ... <span class="hljs-keyword">from</span> table_1;<br></code></pre></div></td></tr></table></figure></li></ol>]]></content>
    
    
    <categories>
      
      <category>MySQL</category>
      
    </categories>
    
    
    <tags>
      
      <tag>MySQL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>深入理解:简单实现 redux 和 react-redux</title>
    <link href="/2022/06/07/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%20%E7%AE%80%E5%8D%95%E5%AE%9E%E7%8E%B0%20redux%20%E5%92%8C%20react-redux/"/>
    <url>/2022/06/07/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%20%E7%AE%80%E5%8D%95%E5%AE%9E%E7%8E%B0%20redux%20%E5%92%8C%20react-redux/</url>
    
    <content type="html"><![CDATA[<h2 id="深入理解-简单实现-redux-和-react-redux"><a href="#深入理解-简单实现-redux-和-react-redux" class="headerlink" title="深入理解: 简单实现 redux 和 react-redux"></a>深入理解: 简单实现 redux 和 react-redux</h2><p>CodeSandbox：<a href="https://codesandbox.io/s/easy-redux-app-f20fgl">easy-redux-app - CodeSandbox</a></p><blockquote><p>Redux 是一个基于单方向数据流的状态管理， react-redux 的作用帮助 Redux 和 React 建立链接</p></blockquote><h3 id="01-redux"><a href="#01-redux" class="headerlink" title="01 redux"></a>01 redux</h3><img src="https://s2.loli.net/2022/05/20/x3feWN8UFSBnsED.gif" alt="GIF 2022-5-20 11-16-44" style="zoom:33%;" /><h4 id="核心原理"><a href="#核心原理" class="headerlink" title="核心原理"></a>核心原理</h4><h5 id="createStore"><a href="#createStore" class="headerlink" title="createStore"></a>createStore</h5><p>createStore 是整个 redux 的核心原理，其主要的功能就是创建 store , 并暴露<code>getState</code>,<code>dispatch</code>,<code>subscribe</code> 方法</p><figure class="highlight jsx"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs jsx"><span class="hljs-keyword">export</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">createStore</span>(<span class="hljs-params">reducer</span>) &#123;<br>  <span class="hljs-comment">// 保存全局状态</span><br>  <span class="hljs-keyword">let</span> state = <span class="hljs-literal">undefined</span><br>  <span class="hljs-comment">// 订阅列表</span><br>  <span class="hljs-keyword">let</span> listeners = []<br><br>  <span class="hljs-comment">// 初始化state</span><br>  <span class="hljs-title function_">dispatch</span>(&#123; <span class="hljs-attr">type</span>: <span class="hljs-title class_">ActionTypes</span>.<span class="hljs-property">INIT</span> &#125;)<br><br>  <span class="hljs-comment">// 获取全局状态</span><br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">getState</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> state<br>  &#125;<br><br>  <span class="hljs-comment">// dispatch 用于传递 action 触发 reducer</span><br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">dispatch</span>(<span class="hljs-params">action</span>) &#123;<br>    state = <span class="hljs-title function_">reducer</span>(state, action)<br>    <span class="hljs-comment">// state 发生改变，发布（处理订阅，更新组件）</span><br>    listeners.<span class="hljs-title function_">forEach</span>(<span class="hljs-function">(<span class="hljs-params">listener</span>) =&gt;</span> <span class="hljs-title function_">listener</span>())<br>  &#125;<br><br>  <span class="hljs-comment">// 发布订阅：传入一个函数，这个函数会在每次 state 更新的时候被调用</span><br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">subscribe</span>(<span class="hljs-params">listener</span>) &#123;<br>    <span class="hljs-comment">// 加入更新列表</span><br>    listeners.<span class="hljs-title function_">push</span>(listener)<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">unsubscribe</span>(<span class="hljs-params"></span>) &#123;<br>      <span class="hljs-comment">// 用于卸载组件时，取消订阅</span><br>      listeners = listeners.<span class="hljs-title function_">filter</span>(<span class="hljs-function">(<span class="hljs-params">func</span>) =&gt;</span> func !== listener)<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-keyword">return</span> &#123;<br>    getState,<br>    dispatch,<br>    subscribe,<br>  &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="中间件"><a href="#中间件" class="headerlink" title="中间件"></a>中间件</h4><h5 id="applyMiddleware"><a href="#applyMiddleware" class="headerlink" title="applyMiddleware"></a>applyMiddleware</h5><p>applyMiddleware 用于扩展 Redux 添加中间件，Middleware 可以让你包装 <code>store</code> 的 <code>dispatch</code> 方法来达到你想要的目的，其中 <code>compose</code> 方法，可以让多个 middleware 可以被组合到一起使用，形成 middleware 链。常见 middleware 比如说 日志收集器， 崩溃日志收集器等</p><figure class="highlight jsx"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs jsx"><span class="hljs-comment">// applyMiddleware 扩展 Redux</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">applyMiddleware</span>(<span class="hljs-params">...middleWares</span>) &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-function">(<span class="hljs-params">createStore</span>) =&gt;</span> <span class="hljs-function">(<span class="hljs-params">reducer</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">const</span> store = <span class="hljs-title function_">createStore</span>(reducer)<br>    <span class="hljs-keyword">let</span> dispatch = store.<span class="hljs-property">dispatch</span><br>    <span class="hljs-keyword">const</span> middlewareAPI = &#123;<br>      <span class="hljs-attr">getState</span>: store.<span class="hljs-property">getState</span>,<br>      dispatch,<br>    &#125;<br>    <span class="hljs-keyword">const</span> chain = middleWares.<span class="hljs-title function_">map</span>(<span class="hljs-function">(<span class="hljs-params">middleware</span>) =&gt;</span> <span class="hljs-title function_">middleware</span>(middlewareAPI))<br>    dispatch = <span class="hljs-title function_">compose</span>(...chain)(dispatch)<br>    <span class="hljs-keyword">return</span> &#123;<br>      ...store,<br>      dispatch,<br>    &#125;<br>  &#125;<br>&#125;<br><br><span class="hljs-comment">// compose 聚合函数</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">compose</span>(<span class="hljs-params">...funcs</span>) &#123;<br>  <span class="hljs-keyword">if</span> (funcs.<span class="hljs-property">length</span> === <span class="hljs-number">0</span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-function">(<span class="hljs-params">args</span>) =&gt;</span> args<br>  &#125;<br><br>  <span class="hljs-keyword">if</span> (funcs.<span class="hljs-property">length</span> === <span class="hljs-number">1</span>) &#123;<br>    <span class="hljs-keyword">return</span> funcs[<span class="hljs-number">0</span>]<br>  &#125;<br>  <span class="hljs-keyword">return</span> funcs.<span class="hljs-title function_">reduce</span>(<br>    <span class="hljs-function">(<span class="hljs-params">a, b</span>) =&gt;</span><br>      <span class="hljs-function">(<span class="hljs-params">...args</span>) =&gt;</span><br>        <span class="hljs-title function_">a</span>(<span class="hljs-title function_">b</span>(...args))<br>  )<br>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="合并-reducer-辅助函数"><a href="#合并-reducer-辅助函数" class="headerlink" title="合并 reducer 辅助函数"></a>合并 reducer 辅助函数</h4><h5 id="combineReducers"><a href="#combineReducers" class="headerlink" title="combineReducers"></a>combineReducers</h5><p>combineReducers 用于合并多个 reducer , 遇到复杂的应用我们需要拆分不同的 reducer ，拆分后的每个函数负责独立管理 state 的一部分。</p><figure class="highlight jsx"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs jsx"><span class="hljs-keyword">export</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">combineReducers</span>(<span class="hljs-params">reducers</span>) &#123;<br>  <span class="hljs-keyword">let</span> nextState = &#123;&#125;<br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">combination</span>(<span class="hljs-params">state, action</span>) &#123;<br>    <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">entries</span>(reducers).<span class="hljs-title function_">forEach</span>(<span class="hljs-function">(<span class="hljs-params">[key, reducers]</span>) =&gt;</span> &#123;<br>      nextState[key] = <span class="hljs-title function_">reducers</span>(nextState[key], action)<br>    &#125;)<br>    <span class="hljs-keyword">return</span> nextState<br>  &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="02-react-redux"><a href="#02-react-redux" class="headerlink" title="02 react-redux"></a>02 react-redux</h3><p><img src="https://s2.loli.net/2022/05/20/AJ8K1VD4HGRpa3Q.png" alt="image-20220520114557068"></p><h4 id="核心原理-1"><a href="#核心原理-1" class="headerlink" title="核心原理"></a>核心原理</h4><h5 id="Provider"><a href="#Provider" class="headerlink" title="Provider"></a>Provider</h5><p>Provider 用于上层组件注入 store ，其原理，就是通过 react <code>createContext</code> 方法，将 store 暴露到上下文 , 以便容器组件可以接收 store</p><figure class="highlight jsx"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs jsx"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span>, &#123; createContext &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span><br><br><span class="hljs-comment">// 创建一个 context</span><br><span class="hljs-keyword">const</span> <span class="hljs-title class_">ReactReduxContext</span> = <span class="hljs-title function_">createContext</span>()<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">Provider</span>(<span class="hljs-params">&#123; store, children &#125;</span>) &#123;<br>  <span class="hljs-keyword">return</span> (<br>    <span class="hljs-comment">// 注入 store</span><br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">ReactReduxContext.Provider</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&#123;store&#125;</span>&gt;</span></span><br><span class="language-xml">      &#123;children&#125;</span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">ReactReduxContext.Provider</span>&gt;</span></span><br>  )<br>&#125;<br></code></pre></div></td></tr></table></figure><h5 id="connect"><a href="#connect" class="headerlink" title="connect"></a>connect</h5><p>connect 创建容器组件，将接收到 store 通过 props 注入到 <code>Component</code> 组件中，其中 <code>mapStateToProps</code>， <code>mapDispatchToProps</code> 分别用于映射 state 和 dispatch 对应 action</p><figure class="highlight jsx"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs jsx"><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> <span class="hljs-title function_">connect</span> = (<span class="hljs-params">mapStateToProps, mapDispatchToProps</span>) =&gt; <span class="hljs-function">(<span class="hljs-params">Component</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">extends</span> <span class="hljs-title class_">React</span>.<span class="hljs-property">Component</span> &#123;<br>        <span class="hljs-comment">// 接收 context 上下文</span><br>        <span class="hljs-keyword">static</span> contextType = <span class="hljs-title class_">ReactReduxContext</span>;<br>        <span class="hljs-title function_">constructor</span>(<span class="hljs-params">props</span>) &#123;<br>            <span class="hljs-variable language_">super</span>(props);<br>            <span class="hljs-variable language_">this</span>.<span class="hljs-property">state</span> = &#123;&#125;<br>        &#125;<br>        <span class="hljs-title function_">componentDidMount</span>(<span class="hljs-params"></span>) &#123;<br>            <span class="hljs-keyword">const</span> &#123; subscribe, getState,dispatch &#125; = <span class="hljs-variable language_">this</span>.<span class="hljs-property">context</span>;<br>            <span class="hljs-comment">// 挂载完毕后，初次渲染</span><br>            <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">setState</span>(&#123;<br>                <span class="hljs-comment">// 返回一个纯对象，这个对象会与组件的 props 合并</span><br>                ...<span class="hljs-title function_">mapStateToProps</span>(<span class="hljs-title function_">getState</span>()),<br>                <span class="hljs-comment">// 函数中dispatch方法会将action creator的返回值作为参数执行。这些属性会被合并到组件的 props 中</span><br>                ...<span class="hljs-title function_">mapDispatchToProps</span>(dispatch)<br>            &#125;)<br>            <span class="hljs-comment">// 订阅更新</span><br>            <span class="hljs-variable language_">this</span>.<span class="hljs-property">unsubscribe</span> = <span class="hljs-title function_">subscribe</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>                <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">setState</span>(&#123;<br>                    ...<span class="hljs-title function_">mapStateToProps</span>(<span class="hljs-title function_">getState</span>()),<br>                    ...<span class="hljs-title function_">mapDispatchToProps</span>(dispatch)<br>                &#125;)<br>            &#125;)<br>        &#125;<br>        <span class="hljs-title function_">componentWillUnmount</span>(<span class="hljs-params"></span>) &#123;<br>            <span class="hljs-comment">// 取消更新</span><br>            <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">unsubscribe</span>();<br>        &#125;<br>        <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;<br>            <span class="hljs-keyword">return</span> (<br>                &#123;<span class="hljs-comment">// 通过 props 将 state 和 action 注入到 Component 组件中&#125;</span><br>                <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Component</span></span></span><br><span class="hljs-tag"><span class="language-xml">                    &#123;<span class="hljs-attr">...this.props</span>&#125;</span></span><br><span class="hljs-tag"><span class="language-xml">                    &#123;<span class="hljs-attr">...this.state</span>&#125;</span></span><br><span class="hljs-tag"><span class="language-xml">                /&gt;</span></span><br>            )<br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></div></td></tr></table></figure><h5 id=""><a href="#" class="headerlink" title=""></a></h5>]]></content>
    
    
    <categories>
      
      <category>Redux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Redux 源码</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Redux 官方实现撤销重做 -- 解析</title>
    <link href="/2022/06/07/Redux%20%E5%AE%98%E6%96%B9%E5%AE%9E%E7%8E%B0%E6%92%A4%E9%94%80%E9%87%8D%E5%81%9A%20--%20%E8%A7%A3%E6%9E%90/"/>
    <url>/2022/06/07/Redux%20%E5%AE%98%E6%96%B9%E5%AE%9E%E7%8E%B0%E6%92%A4%E9%94%80%E9%87%8D%E5%81%9A%20--%20%E8%A7%A3%E6%9E%90/</url>
    
    <content type="html"><![CDATA[<h2 id="Redux-官方实现撤销重做-–-解析"><a href="#Redux-官方实现撤销重做-–-解析" class="headerlink" title="Redux 官方实现撤销重做 – 解析"></a>Redux 官方实现撤销重做 – 解析</h2><blockquote><p>官方的地址：<a href="https://www.redux.org.cn/docs/recipes/ImplementingUndoHistory.html">https://www.redux.org.cn/docs/recipes/ImplementingUndoHistory.html</a></p></blockquote><p>官方提供了一个提供<code>可撤销</code>功能的 reducer enhancer 的库，官方也有提简易实现的教程。以下是我个人总结，即便大家读了之后，对实现可撤销重做原理有初步的理解，启发下思维。</p><h3 id="01-数据结构设计"><a href="#01-数据结构设计" class="headerlink" title="01 数据结构设计"></a>01 数据结构设计</h3><p>State 是单一数据源，是 redux 管理数据地方，数据结构设计如下：</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js">&#123;<br>  <span class="hljs-attr">past</span>: <span class="hljs-title class_">Array</span>&lt;T&gt;,<br>  <span class="hljs-attr">present</span>: T,<br>  <span class="hljs-attr">future</span>: <span class="hljs-title class_">Array</span>&lt;T&gt;<br>&#125;<br></code></pre></div></td></tr></table></figure><ul><li><code>past</code> 用于存放“过去”历史记录数组</li><li><code>present</code> 用于存放当前数据</li><li><code>future</code> 用于存放发生撤退时，“未来”历史记录的数组</li></ul><p>太干，可能听着一头雾水，例如，这边以一个计数器为例（初始为 0，点击一次++1）</p><p><strong>1.点击一次</strong></p><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css">// 将 &#123;count:<span class="hljs-number">0</span> &#125; 作为历史记录推入 past 中，将最新的值 &#123;count:<span class="hljs-number">1</span>&#125; 放到 present<br>&#123;<br>  past: [&#123;count:<span class="hljs-number">0</span>&#125;],<br>  present: &#123;count:<span class="hljs-number">1</span>&#125;,<br>  future: []<br>&#125;<br></code></pre></div></td></tr></table></figure><p><strong>2.再点击一次</strong></p><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css">// 将 &#123;count:<span class="hljs-number">1</span> &#125; 作为历史记录推入 past 中，将最新的值 &#123;count:<span class="hljs-number">2</span>&#125; 放到 present<br>&#123;<br>  past: [&#123;count:<span class="hljs-number">0</span>&#125;，&#123;count:<span class="hljs-number">1</span>&#125;],<br>  present: &#123;count:<span class="hljs-number">2</span>&#125;,<br>  future: []<br>&#125;<br></code></pre></div></td></tr></table></figure><p><strong>3.发生一次撤退</strong></p><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css">// 发生一次撤退，将 &#123;count:<span class="hljs-number">1</span> &#125; 作为历史记录推出 past,放入 present，并将原来 present &#123;count:<span class="hljs-number">2</span>&#125; 推入 future 中<br>&#123;<br>  past: [&#123;count:<span class="hljs-number">0</span>&#125;],<br>  present: &#123;count:<span class="hljs-number">1</span>&#125;,<br>  future: [&#123;count:<span class="hljs-number">2</span>&#125;]<br>&#125;<br></code></pre></div></td></tr></table></figure><p><strong>4.发生一次重做</strong></p><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css">// 发生一次重做，将 &#123;count:<span class="hljs-number">2</span>&#125; 推出 future，放入最新值 present 上，并将原来 present &#123;count:<span class="hljs-number">1</span>&#125; 推回 past 中<br>&#123;<br>  past: [&#123;count:<span class="hljs-number">0</span>&#125;，&#123;count:<span class="hljs-number">1</span>&#125;],<br>  present: &#123;count:<span class="hljs-number">2</span>&#125;,<br>  future: []<br>&#125;<br></code></pre></div></td></tr></table></figure><p>相信大家看到这里，已经有所了解，设计这个数据结构的初衷了。是以一种<strong>快照式</strong>记录所有历史数据，就像是给你每次操作的所有数据拍个照，记录成历史记录存放到数组中</p><h3 id="02-撤退重做算法"><a href="#02-撤退重做算法" class="headerlink" title="02 撤退重做算法"></a>02 撤退重做算法</h3><h4 id="处理-Undo"><a href="#处理-Undo" class="headerlink" title="处理 Undo"></a>处理 Undo</h4><ul><li>移除 <code>past</code> 中的<strong>最后一个</strong>元素。</li><li>将上一步移除的元素赋予 <code>present</code>。</li><li>将原来的 <code>present</code> 插入到 <code>future</code> 的<strong>最前面</strong>。</li></ul><h4 id="处理-Redo"><a href="#处理-Redo" class="headerlink" title="处理 Redo"></a>处理 Redo</h4><ul><li>移除 <code>future</code> 中的<strong>第一个</strong>元素。</li><li>将上一步移除的元素赋予 <code>present</code>。</li><li>将原来的 <code>present</code> 追加到 <code>past</code> 的<strong>最后面</strong>。</li></ul><h4 id="处理其他-Action"><a href="#处理其他-Action" class="headerlink" title="处理其他 Action"></a>处理其他 Action</h4><ul><li>将当前的 <code>present</code> 追加到 <code>past</code> 的<strong>最后面</strong>。</li><li>将处理完 action 所产生的新的 state 赋予 <code>present</code>。</li><li>清空 <code>future</code>。</li></ul><h3 id="03-高阶-reducer-Reducer-Enhancers"><a href="#03-高阶-reducer-Reducer-Enhancers" class="headerlink" title="03 高阶 reducer (Reducer Enhancers)"></a>03 高阶 reducer (Reducer Enhancers)</h3><p><strong>reducer enhancer</strong>（或者 <strong>higher order reducer</strong>）,高阶 reducer 和 react 的高阶组件非常类似，它是通过接收一个 reducer 并生成返回一个新的 reducer ,使得新的 reducer 拥有新的特性。举一个例子</p><p>很想是我们 IDE 插件，IDE 可以编写代码，装了代码提示插件之后，有了更好代码书写体验，但是当插件卸载了也并不影响原来写代码的功能。下图就是使用高阶 reducer 前后区别图。</p><p><img src="https://s2.loli.net/2022/05/13/WqUoOS3dPGF6VgB.png" alt="image-20220513180319247"></p><h3 id="04-编写-Reducer-Enhancer"><a href="#04-编写-Reducer-Enhancer" class="headerlink" title="04 编写 Reducer Enhancer"></a>04 编写 Reducer Enhancer</h3><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">undoable</span>(<span class="hljs-params">reducer</span>) &#123;<br>  <span class="hljs-comment">// 以一个空的 action 调用 reducer 来产生初始的 state</span><br>  <span class="hljs-keyword">const</span> initialState = &#123;<br>    <span class="hljs-attr">past</span>: [],<br>    <span class="hljs-attr">present</span>: <span class="hljs-title function_">reducer</span>(<span class="hljs-literal">undefined</span>, &#123;&#125;),<br>    <span class="hljs-attr">future</span>: [],<br>  &#125;<br><br>  <span class="hljs-comment">// 返回一个可以执行撤销和重做的新的reducer</span><br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">function</span> (<span class="hljs-params">state = initialState, action</span>) &#123;<br>    <span class="hljs-keyword">const</span> &#123; past, present, future &#125; = state<br><br>    <span class="hljs-keyword">switch</span> (action.<span class="hljs-property">type</span>) &#123;<br>      <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;UNDO&#x27;</span>:<br>        <span class="hljs-keyword">const</span> previous = past[past.<span class="hljs-property">length</span> - <span class="hljs-number">1</span>]<br>        <span class="hljs-keyword">const</span> newPast = past.<span class="hljs-title function_">slice</span>(<span class="hljs-number">0</span>, past.<span class="hljs-property">length</span> - <span class="hljs-number">1</span>)<br>        <span class="hljs-keyword">return</span> &#123;<br>          <span class="hljs-attr">past</span>: newPast,<br>          <span class="hljs-attr">present</span>: previous,<br>          <span class="hljs-attr">future</span>: [present, ...future],<br>        &#125;<br>      <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;REDO&#x27;</span>:<br>        <span class="hljs-keyword">const</span> next = future[<span class="hljs-number">0</span>]<br>        <span class="hljs-keyword">const</span> newFuture = future.<span class="hljs-title function_">slice</span>(<span class="hljs-number">1</span>)<br>        <span class="hljs-keyword">return</span> &#123;<br>          <span class="hljs-attr">past</span>: [...past, present],<br>          <span class="hljs-attr">present</span>: next,<br>          <span class="hljs-attr">future</span>: newFuture,<br>        &#125;<br>      <span class="hljs-attr">default</span>:<br>        <span class="hljs-comment">// 将其他 action 委托给原始的 reducer 处理</span><br>        <span class="hljs-keyword">const</span> newPresent = <span class="hljs-title function_">reducer</span>(present, action)<br>        <span class="hljs-keyword">if</span> (present === newPresent) &#123;<br>          <span class="hljs-keyword">return</span> state<br>        &#125;<br>        <span class="hljs-keyword">return</span> &#123;<br>          <span class="hljs-attr">past</span>: [...past, present],<br>          <span class="hljs-attr">present</span>: newPresent,<br>          <span class="hljs-attr">future</span>: [],<br>        &#125;<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="05-官方插件"><a href="#05-官方插件" class="headerlink" title="05 官方插件"></a>05 官方插件</h3><p>Redux Undo 是一个库能帮助我们实现<code>可撤销</code>功能。</p><figure class="highlight ada"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs ada">npm install <span class="hljs-comment">--save redux-undo</span><br></code></pre></div></td></tr></table></figure><p>详细请见，<a href="https://github.com/omnidan/redux-undo">官方 github</a></p>]]></content>
    
    
    <categories>
      
      <category>Redux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Redux</tag>
      
      <tag>实现日志流水</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>浅用高阶Redux原理实现日志流水--实现篇</title>
    <link href="/2022/06/07/%E6%B5%85%E7%94%A8%E9%AB%98%E9%98%B6Redux%E5%8E%9F%E7%90%86%E5%AE%9E%E7%8E%B0%E6%8F%92%E4%BB%B6%E5%BC%8F%E6%97%A5%E5%BF%97%E6%B5%81%E6%B0%B4--%E5%AE%9E%E7%8E%B0%E7%AF%87/"/>
    <url>/2022/06/07/%E6%B5%85%E7%94%A8%E9%AB%98%E9%98%B6Redux%E5%8E%9F%E7%90%86%E5%AE%9E%E7%8E%B0%E6%8F%92%E4%BB%B6%E5%BC%8F%E6%97%A5%E5%BF%97%E6%B5%81%E6%B0%B4--%E5%AE%9E%E7%8E%B0%E7%AF%87/</url>
    
    <content type="html"><![CDATA[<h2 id="浅用高阶-Redux-原理实现日志流水–实现篇"><a href="#浅用高阶-Redux-原理实现日志流水–实现篇" class="headerlink" title="浅用高阶 Redux 原理实现日志流水–实现篇"></a>浅用高阶 Redux 原理实现日志流水–实现篇</h2><blockquote><p>Demo B 要实现低代码操作流水记录，实现撤回重做的功能，一开始的想法比较简单，直接在 action 中完善撤回重做功能，但是后面参考官方的 redux ，其实有个高级的写法，也就是高阶 Redux，可以实现可插件式的可撤退重做日志。具体高阶 Redux 介绍，可以移步到，文章：Redux 官方实现撤销重做 – 解析</p><p>参考：<a href="https://juejin.cn/post/6844903921878564872#heading-8">Web 应用的撤销重做实现 - 掘金 (juejin.cn)</a></p><p>​ <a href="https://www.redux.org.cn/docs/recipes/ImplementingUndoHistory.html">实现撤销重做 · Redux</a></p></blockquote><h3 id="01-实现撤回重做的方案"><a href="#01-实现撤回重做的方案" class="headerlink" title="01 实现撤回重做的方案"></a>01 实现撤回重做的方案</h3><ul><li><strong>数据快照式</strong>，也就是将每次操作完之后，数据状态进行保存，从而形成历史记录<ul><li>优点：通用性广，实现容易，可封装成组件成可插拔插件</li><li>缺点：假若数据结构复杂庞大，随着操作历史记录变多，导致数据量冗余，不太好管理</li></ul></li><li><strong>路径新旧值式</strong>，单一数据源，对每次操作后，将操作数据的路径、新值和旧值作为记录进行保存<ul><li>优点：只需记录操作路径和新旧值，减少大量的内存消耗，方便管理数据</li><li>缺点：实现比较难， 需要对 action 的传入数据的结构有所要求（路径、新旧值）</li></ul></li></ul><p>下文将采用的是路劲新旧值式的方案</p><h3 id="02-数据结构的设计"><a href="#02-数据结构的设计" class="headerlink" title="02 数据结构的设计"></a>02 数据结构的设计</h3><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js">&#123;<br>  <span class="hljs-attr">histories</span>: [],<br>  <span class="hljs-attr">historyIndex</span>: -<span class="hljs-number">1</span>,<br>  <span class="hljs-attr">current</span>:&#123;&#125;<br>&#125;<br><br><span class="hljs-comment">// 例：histories存放一个更新操作</span><br>histories = [<br>    &#123;<br>        <span class="hljs-attr">path</span>:[<span class="hljs-string">&quot;state&quot;</span>,<span class="hljs-string">&quot;Data&quot;</span>,<span class="hljs-number">0</span>,<span class="hljs-string">&quot;name&quot;</span>],<br>        <span class="hljs-attr">newValue</span>: <span class="hljs-string">&quot;xiaoming&quot;</span>,<br>        <span class="hljs-attr">oldValue</span>: <span class="hljs-string">&quot;KK&quot;</span><br>    &#125;<br>]<br></code></pre></div></td></tr></table></figure><p>其中，</p><ul><li><strong>histories:</strong> 用于存放记录数组</li><li><strong>historyIndex：</strong> 游标，用于标识当前历史记录的指针</li><li><strong>current：</strong>存放业务 reducer 返回最新的业务 state</li></ul><h3 id="03-撤销重做算法"><a href="#03-撤销重做算法" class="headerlink" title="03 撤销重做算法"></a>03 撤销重做算法</h3><h4 id="撤销-undo"><a href="#撤销-undo" class="headerlink" title="撤销 undo"></a>撤销 undo</h4><ul><li>判断 <code>historyIndex</code> 的值，从而判断撤退进行到什么状态。<ul><li>0 ，说明已经执行到栈底了</li><li>-1，未发生撤退操作</li><li><code>!= -1 &amp;&amp; != 0</code>，正在进行撤退操作</li></ul></li></ul><p><img src="https://s2.loli.net/2022/05/14/9VacFp7rWzBhwgt.png" alt="image-20220514111615614"></p><ul><li>执行撤回操作<ul><li>若 <code>newValue === null</code>， 为删除操作，对应撤回操作 =&gt; 新增操作</li><li>若 <code>oldValue === null</code>， 为新增操作，对应撤回操作 =&gt; 删除操作</li><li>若 <code>newValue !== null &amp;&amp; oldValue !== null</code> ,为更新操作，对应撤回操作 =&gt; 更新操作</li></ul></li></ul><h4 id="重做-redo"><a href="#重做-redo" class="headerlink" title="重做 redo"></a>重做 redo</h4><ul><li><p>判断 <code>historyIndex</code> 的值，是否已经发生撤回操作</p><p><img src="https://s2.loli.net/2022/05/14/HQsproaURAPNFOt.png" alt="image-20220514113531299"></p></li><li><p>执行重做操作</p><ul><li>若 <code>newValue === null</code>， 为删除操作，对应重做操作 =&gt; 删除操作</li><li>若 <code>oldValue === null</code>， 为新增操作，对应撤重回操作 =&gt;新增操作</li><li>若 <code>newValue !== null &amp;&amp; oldValue !== null</code> ,为更新操作，对应重做操作 =&gt; 更新操作</li></ul></li><li><p>最后，判断 <code>historyIndex</code> 是否到达栈顶</p><ul><li>到达栈顶，重置游标<code>historyIndex = -1</code></li><li>未到达栈顶，<code>historyIndex ++1</code></li></ul></li></ul><h4 id="其他业务-Action"><a href="#其他业务-Action" class="headerlink" title="其他业务 Action"></a>其他业务 Action</h4><ul><li><p>特殊情况：当在发生撤退重做时，若发生其他业务 Action 操作，应该把当前游标后面的记录清空，并推入新的业务 Action 操作</p></li><li><p>执行其他业务的 Action，委托给业务的 reducer 进行处理，并将业务 reducer 返回新的 业务 state 存储到 current</p></li><li><p>高阶 reducer 接收 <code>include</code> 数组参数，用于判断是否将这个操作加入撤退重做记录中</p><ul><li>属于，将其封装成记录，并推入 <code>histories</code></li><li>不属于，无处理</li></ul></li><li><p>额外操作：当高阶 reducer 接收 <code>limit</code> 参数，用于限制记录的最大长度</p><ul><li>默认, <code>limit = false</code>，不进行记录长度的限制</li><li>limit 为数字，且大于 0。对记录进行限制</li></ul></li></ul><h3 id="03-实现源码"><a href="#03-实现源码" class="headerlink" title="03 实现源码"></a>03 实现源码</h3><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-keyword">import</span> _ <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;lodash&#x27;</span><br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">undoReducerEnhancer</span>(<span class="hljs-params"></span><br><span class="hljs-params">  reducer,</span><br><span class="hljs-params">  &#123;</span><br><span class="hljs-params">    limit = <span class="hljs-literal">false</span>, // 日志流水最大长度</span><br><span class="hljs-params">    undoType = <span class="hljs-string">&#x27;UNDO&#x27;</span>, // 撤销操作类型</span><br><span class="hljs-params">    redoType = <span class="hljs-string">&#x27;REDO&#x27;</span>, // 重做操作类型</span><br><span class="hljs-params">    include = [], // 需要加入日志流水的操作类型</span><br><span class="hljs-params">  &#125;</span><br><span class="hljs-params"></span>) &#123;<br>  <span class="hljs-comment">//  以一个空的 action 调用 reducer，来初始化 state</span><br>  <span class="hljs-keyword">const</span> initialState = &#123;<br>    <span class="hljs-attr">histories</span>: [], <span class="hljs-comment">//日志流水数组</span><br>    <span class="hljs-attr">historyIndex</span>: -<span class="hljs-number">1</span>, <span class="hljs-comment">// 游标, -1: 说明是第一次撤销</span><br>    <span class="hljs-comment">// eslint-disable-next-line no-undefined</span><br>    <span class="hljs-attr">current</span>: <span class="hljs-title function_">reducer</span>(<span class="hljs-literal">undefined</span>, &#123;&#125;), <span class="hljs-comment">// 当前状态</span><br>  &#125;<br><br>  <span class="hljs-keyword">const</span> <span class="hljs-title function_">Add</span> = (<span class="hljs-params">list = [], &#123; path, newValue &#125;</span>) =&gt; &#123;<br>    <span class="hljs-keyword">let</span> newList = _.<span class="hljs-title function_">cloneDeep</span>(list)<br><br>    <span class="hljs-comment">// 需要存放的目标数组</span><br>    <span class="hljs-keyword">const</span> target = path.<span class="hljs-title function_">slice</span>(<span class="hljs-number">0</span>, path.<span class="hljs-property">length</span> - <span class="hljs-number">1</span>)<br><br>    <span class="hljs-comment">// 需要存放的目标数组的游标</span><br>    <span class="hljs-keyword">const</span> targetIndex = path[path.<span class="hljs-property">length</span> - <span class="hljs-number">1</span>]<br>    <span class="hljs-keyword">const</span> newTarget = _.<span class="hljs-title function_">get</span>(newList, target)<br>    newTarget.<span class="hljs-title function_">splice</span>(targetIndex, <span class="hljs-number">0</span>, newValue)<br>    newList = _.<span class="hljs-title function_">set</span>(newList, target, newTarget)<br>    <span class="hljs-keyword">return</span> newList<br>  &#125;<br><br>  <span class="hljs-keyword">const</span> <span class="hljs-title function_">Update</span> = (<span class="hljs-params">list = [], &#123; path = [], newValue &#125;</span>) =&gt; &#123;<br>    <span class="hljs-comment">// 需要存放的目标数组</span><br>    <span class="hljs-keyword">let</span> newList = _.<span class="hljs-title function_">cloneDeep</span>(list)<br><br>    <span class="hljs-comment">// path 路径为空， 修改就是当前对象</span><br>    <span class="hljs-keyword">if</span> (path.<span class="hljs-property">length</span> !== <span class="hljs-number">0</span>) &#123;<br>      newList = _.<span class="hljs-title function_">set</span>(newList, path, newValue)<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      newList = newValue<br>    &#125;<br>    <span class="hljs-keyword">return</span> newList<br>  &#125;<br><br>  <span class="hljs-keyword">const</span> <span class="hljs-title function_">Delete</span> = (<span class="hljs-params">list = [], &#123; path &#125;</span>) =&gt; &#123;<br>    <span class="hljs-keyword">let</span> newList = _.<span class="hljs-title function_">cloneDeep</span>(list)<br><br>    <span class="hljs-comment">// 需要存放的目标数组</span><br>    <span class="hljs-keyword">const</span> target = path.<span class="hljs-title function_">slice</span>(<span class="hljs-number">0</span>, path.<span class="hljs-property">length</span> - <span class="hljs-number">1</span>)<br><br>    <span class="hljs-comment">// 需要存放的目标数组的游标</span><br>    <span class="hljs-keyword">const</span> targetIndex = path[path.<span class="hljs-property">length</span> - <span class="hljs-number">1</span>]<br>    <span class="hljs-keyword">let</span> newTarget = _.<span class="hljs-title function_">get</span>(newList, target)<br>    newTarget.<span class="hljs-title function_">splice</span>(targetIndex, <span class="hljs-number">1</span>)<br>    newList = _.<span class="hljs-title function_">set</span>(newList, target, newTarget)<br>    <span class="hljs-keyword">return</span> newList<br>  &#125;<br><br>  <span class="hljs-comment">// 根据判断是否加入撤销重做流水操作</span><br>  <span class="hljs-keyword">const</span> <span class="hljs-title function_">isInclude</span> = (<span class="hljs-params">actionType</span>) =&gt;<br>    include.<span class="hljs-title function_">indexOf</span>(actionType) === -<span class="hljs-number">1</span> ? <span class="hljs-literal">false</span> : <span class="hljs-literal">true</span><br><br>  <span class="hljs-comment">// 返回一个可撤销和重做的新的 reducer</span><br>  <span class="hljs-keyword">return</span> <span class="hljs-function">(<span class="hljs-params">state = initialState, action</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">const</span> &#123; histories, historyIndex &#125; = state<br><br>    <span class="hljs-comment">// 撤销操作</span><br>    <span class="hljs-keyword">if</span> (action.<span class="hljs-property">type</span> === undoType) &#123;<br>      <span class="hljs-keyword">if</span> (historyIndex === -<span class="hljs-number">1</span>) &#123;<br>        <span class="hljs-comment">// 第一次撤退</span><br>        state.<span class="hljs-property">historyIndex</span> = histories.<span class="hljs-property">length</span> - <span class="hljs-number">1</span><br>      &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (historyIndex &gt; <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-comment">// 非第一次撤退</span><br>        state.<span class="hljs-property">historyIndex</span>--<br>      &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-comment">// 撤退end,返回</span><br>        <span class="hljs-keyword">return</span> state<br>      &#125;<br><br>      <span class="hljs-comment">// 执行撤退操作</span><br>      <span class="hljs-keyword">const</span> &#123; path, newValue, oldValue &#125; = histories[state.<span class="hljs-property">historyIndex</span>]<br>      <span class="hljs-keyword">if</span> (newValue === <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-comment">// 删除操作 =&gt; 新增操作</span><br>        state.<span class="hljs-property">current</span> = <span class="hljs-title class_">Add</span>(state.<span class="hljs-property">current</span>, &#123; path, <span class="hljs-attr">newValue</span>: oldValue &#125;)<br>      &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (oldValue === <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-comment">// 新增操作 =&gt; 删除操作</span><br>        state.<span class="hljs-property">current</span> = <span class="hljs-title class_">Delete</span>(state.<span class="hljs-property">current</span>, &#123; path &#125;)<br>      &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-comment">// 更新操作 =&gt; 更新操作</span><br>        state.<span class="hljs-property">current</span> = <span class="hljs-title class_">Update</span>(state.<span class="hljs-property">current</span>, &#123; path, <span class="hljs-attr">newValue</span>: oldValue &#125;)<br>      &#125;<br>      <span class="hljs-keyword">return</span> _.<span class="hljs-title function_">cloneDeep</span>(state)<br>    &#125;<br><br>    <span class="hljs-comment">// 重做操作</span><br>    <span class="hljs-keyword">if</span> (action.<span class="hljs-property">type</span> === redoType) &#123;<br>      <span class="hljs-keyword">if</span> (historyIndex === -<span class="hljs-number">1</span>) &#123;<br>        <span class="hljs-comment">// 未发生撤销</span><br>        <span class="hljs-keyword">return</span> state<br>      &#125;<br><br>      <span class="hljs-comment">// 执行重做操作</span><br>      <span class="hljs-keyword">const</span> &#123; path, newValue, oldValue &#125; = histories[state.<span class="hljs-property">historyIndex</span>]<br>      <span class="hljs-keyword">if</span> (newValue === <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-comment">// 删除操作 =&gt; 删除操作</span><br>        state.<span class="hljs-property">current</span> = <span class="hljs-title class_">Delete</span>(state.<span class="hljs-property">current</span>, &#123; path &#125;)<br>      &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (oldValue === <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-comment">// 新增操作 =&gt; 新增操作</span><br>        state.<span class="hljs-property">current</span> = <span class="hljs-title class_">Add</span>(state.<span class="hljs-property">current</span>, &#123; path, newValue &#125;)<br>      &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-comment">// 更新操作 =&gt; 更新操作</span><br>        state.<span class="hljs-property">current</span> = <span class="hljs-title class_">Update</span>(state.<span class="hljs-property">current</span>, &#123; path, newValue &#125;)<br>      &#125;<br><br>      <span class="hljs-keyword">if</span> (state.<span class="hljs-property">historyIndex</span> &lt; histories.<span class="hljs-property">length</span> - <span class="hljs-number">1</span>) &#123;<br>        <span class="hljs-comment">// 继续重做</span><br>        state.<span class="hljs-property">historyIndex</span>++<br>      &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-comment">// 重做end,返回</span><br>        state.<span class="hljs-property">historyIndex</span> = -<span class="hljs-number">1</span><br>      &#125;<br>      <span class="hljs-keyword">return</span> _.<span class="hljs-title function_">cloneDeep</span>(state)<br>    &#125;<br><br>    <span class="hljs-comment">// 其他业务操作, 委托给业务reducer处理</span><br>    <span class="hljs-comment">// 特殊情况：打断撤销重做操作，清空 historyIndex 后面所有操作流水,并置 historyIndex 为 -1</span><br>    <span class="hljs-keyword">if</span> (state.<span class="hljs-property">historyIndex</span> !== -<span class="hljs-number">1</span>) &#123;<br>      state.<span class="hljs-property">histories</span> = state.<span class="hljs-property">histories</span>.<span class="hljs-title function_">slice</span>(<span class="hljs-number">0</span>, state.<span class="hljs-property">historyIndex</span>)<br>      state.<span class="hljs-property">historyIndex</span> = -<span class="hljs-number">1</span><br>    &#125;<br>    <span class="hljs-keyword">const</span> newState = <span class="hljs-title function_">reducer</span>(state.<span class="hljs-property">current</span>, action)<br>    state.<span class="hljs-property">current</span> = newState<br><br>    <span class="hljs-comment">// 如果是 actonType 是属于 Include ，则加入撤销重做流水</span><br>    <span class="hljs-keyword">if</span> (<span class="hljs-title function_">isInclude</span>(action.<span class="hljs-property">type</span>)) &#123;<br>      state.<span class="hljs-property">histories</span>.<span class="hljs-title function_">push</span>(&#123;<br>        <span class="hljs-attr">type</span>: action.<span class="hljs-property">type</span>,<br>        ...action.<span class="hljs-property">payload</span>,<br>      &#125;)<br>    &#125;<br><br>    <span class="hljs-comment">// 当流水长度超过了 limit 长度时</span><br>    <span class="hljs-keyword">if</span> (limit &amp;&amp; limit &gt; <span class="hljs-number">0</span>) &#123;<br>      state.<span class="hljs-property">histories</span> = state.<span class="hljs-property">histories</span>.<span class="hljs-title function_">slice</span>(-limit)<br>    &#125;<br>    <span class="hljs-keyword">return</span> _.<span class="hljs-title function_">cloneDeep</span>(state)<br>  &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p><strong>使用方式：</strong></p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-keyword">import</span> undoReducerEnhancer <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./undoReducerEnhancer&#x27;</span><br><br><span class="hljs-comment">// 接受一个业务refucer,返回一个具有可撤退重做的新的reducer</span><br><span class="hljs-keyword">const</span> undoCustomComponent = <span class="hljs-title function_">undoReducerEnhancer</span>(customComponent, &#123;<br>  <span class="hljs-attr">limit</span>: <span class="hljs-number">10</span>, <span class="hljs-comment">// 限制记录长度</span><br>  <span class="hljs-attr">undoType</span>: <span class="hljs-title class_">Types</span>.<span class="hljs-property">UNDO_HISTORY</span>, <span class="hljs-comment">// 撤退操作别名</span><br>  <span class="hljs-attr">redoType</span>: <span class="hljs-title class_">Types</span>.<span class="hljs-property">REDO_HISTORY</span>, <span class="hljs-comment">// 重做操作别名</span><br>  <span class="hljs-attr">include</span>: [<br>    <span class="hljs-title class_">Types</span>.<span class="hljs-property">ADD_COMPONENT</span>,<br>    <span class="hljs-title class_">Types</span>.<span class="hljs-property">PASTE_COMPONENT</span>,<br>    <span class="hljs-title class_">Types</span>.<span class="hljs-property">UPDATE_COMPONENT_CONFIG</span>,<br>    <span class="hljs-title class_">Types</span>.<span class="hljs-property">UPDATE_FORM_CONFIG</span>,<br>    <span class="hljs-title class_">Types</span>.<span class="hljs-property">UPDATE_DATA_SORT</span>,<br>    <span class="hljs-title class_">Types</span>.<span class="hljs-property">DELETE_COMPONENT</span>,<br>    <span class="hljs-title class_">Types</span>.<span class="hljs-property">DELETE_ALL_COMPONENTS</span>,<br>  ],<br>  <span class="hljs-comment">// 加入需要记录流水的操作 action</span><br>&#125;)<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> undoCustomComponent<br></code></pre></div></td></tr></table></figure><h3 id="04-不足之处"><a href="#04-不足之处" class="headerlink" title="04 不足之处"></a>04 不足之处</h3><ul><li>还未解决，封装一个方法，可以使得业务 action 无需按照高阶 reducer 的需要的数据格式进行数据包装，做到真正地可插拔式</li><li>提供更多的参数，以便做到职责分明，减少耦合依赖</li></ul>]]></content>
    
    
    <categories>
      
      <category>Redux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Redux</tag>
      
      <tag>实现日志流水</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>函数组件 useRef -组件设计</title>
    <link href="/2022/06/07/%E5%87%BD%E6%95%B0%E7%BB%84%E4%BB%B6%20useRef%20%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/"/>
    <url>/2022/06/07/%E5%87%BD%E6%95%B0%E7%BB%84%E4%BB%B6%20useRef%20%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/</url>
    
    <content type="html"><![CDATA[<h2 id="函数组件-useRef-组件设计"><a href="#函数组件-useRef-组件设计" class="headerlink" title="函数组件 useRef -组件设计"></a>函数组件 useRef -组件设计</h2><blockquote><p>React 组件的 ref 可以帮助我们拿到组件的实例或者 DOM 对象，从而对组件内部进行修改。日常开发中，为了使得组件具有通用性，就需要减少组件之间的依赖关系。合理地使用 ref ,使得子组件只需暴露出 ref 实例方法 ,父组件无需关注子组件内部调用子组件的实例方法。</p></blockquote><p>涉及到 React 相关的 API</p><ol><li>[useRef](<a href="https://react.docschina.org/docs/hooks-reference.html#useref">Hook API 索引 – React (docschina.org)</a>)</li><li>[forwardRef](<a href="https://zh-hans.reactjs.org/docs/react-api.html#reactforwardref">React 顶层 API – React (reactjs.org)</a>)</li><li><a href="https://zh-hans.reactjs.org/docs/hooks-reference.html#useimperativehandle">useImperativeHandle</a></li><li><a href="https://react-redux.js.org/api/connect">connect</a></li></ol><p><strong>场景：</strong>一个页面有个按钮，希望点击后出现一个弹窗，所以这个页面和弹窗组成父子组件的关系。（弹窗内部数据是由 redux 管理）</p><p><strong>需求：</strong>弹窗组件 visible 属性交给自己管理，希望通过 useRef 暴露出一个 open() 方法，给父组件去使用，无需关注组件实现细节</p><p><strong>子组件：</strong>弹窗组件</p><figure class="highlight jsx"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs jsx"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@file</span> 弹窗组件</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span>, &#123; useState, forwardRef, useImperativeHandle &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span><br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">Form</span>, <span class="hljs-title class_">Modal</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;antd&#x27;</span><br><span class="hljs-keyword">import</span> &#123; connect &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react-redux&#x27;</span><br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">Child</span>(<span class="hljs-params">&#123; refInstance &#125;</span>) &#123;<br>  <span class="hljs-comment">// 组件内部的 visible 属性，交由组件自己管理</span><br>  <span class="hljs-keyword">const</span> [visible, setVisible] = <span class="hljs-title function_">useState</span>(<span class="hljs-literal">false</span>)<br><br>  <span class="hljs-comment">// 通过 useImperativeHandle 可以暴露出特定的实例方法</span><br>  <span class="hljs-title function_">useImperativeHandle</span>(<br>    refInstance,<br>    <span class="hljs-function">() =&gt;</span> (&#123;<br>      <span class="hljs-comment">// 暴露组件 open() 方法给父组件</span><br>      <span class="hljs-attr">open</span>: <span class="hljs-function">() =&gt;</span> &#123;<br>        <span class="hljs-title function_">setVisible</span>(<span class="hljs-literal">true</span>)<br>      &#125;,<br>    &#125;),<br>    []<br>  )<br><br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Modal</span></span></span><br><span class="hljs-tag"><span class="language-xml">      <span class="hljs-attr">title</span>=<span class="hljs-string">&quot;表单预览&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">      <span class="hljs-attr">visible</span>=<span class="hljs-string">&#123;visible&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">      <span class="hljs-attr">footer</span>=<span class="hljs-string">&#123;null&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">      <span class="hljs-attr">onCancel</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> setVisible(false)&#125;</span><br><span class="language-xml">    &gt;</span><br><span class="language-xml">      &#123;</span><br><span class="language-xml">        // 展示 redux 数据</span><br><span class="language-xml">        redux_data</span><br><span class="language-xml">      &#125;</span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">Modal</span>&gt;</span></span><br>  )<br>&#125;<br><br><span class="hljs-comment">// connect 用于接收 redux 数据</span><br><span class="hljs-keyword">const</span> <span class="hljs-title class_">ChildrRefWrap</span> = <span class="hljs-title function_">connect</span>(<span class="hljs-function">(<span class="hljs-params">state</span>) =&gt;</span> (&#123;<br>  <span class="hljs-attr">redux_data</span>: state.<span class="hljs-property">redux_data</span>,<br>&#125;))(<span class="hljs-title class_">Render</span>)<br><br><span class="hljs-comment">// forwardRef 嵌套到最外一层</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title function_">forwardRef</span>(<span class="hljs-function">(<span class="hljs-params">props, ref</span>) =&gt;</span> (<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">RenderRefWrap</span> &#123;<span class="hljs-attr">...props</span>&#125; <span class="hljs-attr">refInstance</span>=<span class="hljs-string">&#123;ref&#125;</span> /&gt;</span></span><br>))<br></code></pre></div></td></tr></table></figure><p><strong>父组件：</strong>Father</p><figure class="highlight jsx"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs jsx"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span>, &#123;useRef&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span><br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">Button</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;antd&quot;</span><br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">Father</span>(<span class="hljs-params"></span>) &#123;<br>    onst modalRef = <span class="hljs-title function_">useRef</span>(<span class="hljs-literal">null</span>)<br><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">onPreviewClick</span> = (<span class="hljs-params"></span>)=&gt; &#123;<br><span class="hljs-comment">// 通过 modalRef 实例暴露出 open() 方法，打开预览Modal</span><br>modalRef.<span class="hljs-property">current</span>.<span class="hljs-title function_">open</span>()<br>&#125;<br>  <span class="hljs-keyword">return</span> (<br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;primary&quot;</span> <span class="hljs-attr">size</span>=<span class="hljs-string">&quot;small&quot;</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;onPreviewClick&#125;</span>&gt;</span>预览效果<span class="hljs-tag">&lt;/<span class="hljs-name">Button</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>  )<br>&#125;<br><br></code></pre></div></td></tr></table></figure><p><strong>参考：</strong><a href="https://juejin.cn/post/6844904070843482119">React 函数式组件使用 Ref - 掘金 (juejin.cn)</a></p>]]></content>
    
    
    <categories>
      
      <category>React</category>
      
    </categories>
    
    
    <tags>
      
      <tag>React</tag>
      
      <tag>useRef</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Js 网络请求：Fetch</title>
    <link href="/2022/06/07/Js%20%E7%BD%91%E7%BB%9C%E8%AF%B7%E6%B1%82%EF%BC%9AFetch/"/>
    <url>/2022/06/07/Js%20%E7%BD%91%E7%BB%9C%E8%AF%B7%E6%B1%82%EF%BC%9AFetch/</url>
    
    <content type="html"><![CDATA[<h2 id="Js-网络请求：Fetch"><a href="#Js-网络请求：Fetch" class="headerlink" title="Js 网络请求：Fetch"></a>Js 网络请求：Fetch</h2><blockquote><p>​ 前言，为了减少 SDK 的体积，计划使用底层 API 进行开发，之前有听过 Fetch，特地过来调研记录下</p></blockquote><p>官方文档：</p><p>Fetch API:<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Fetch_API/Using_Fetch">使用 Fetch - Web API 接口参考 | MDN (mozilla.org)</a></p><p>XMLHttpRequest API: <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/XMLHttpRequest/Using_XMLHttpRequest">使用 XMLHttpRequest - Web API 接口参考 | MDN (mozilla.org)</a></p><h3 id="01-历史原因"><a href="#01-历史原因" class="headerlink" title="01 历史原因"></a>01 历史原因</h3><p>XMLHttpRequest ，又称 xhr。很早就问世了，所以在以往的应用中，常常使用 Promise 封装好的形式（axios）出现在我们视野中。但是它有些明显的缺点，配置繁杂，不支持 Promise 和接口单一，容易写出非常混乱的代码。</p><p>后来，Fetch 作为后浪出道了，江湖人称 xhr 的升级版，但！Fetch 并不属于 xhr ，他们俩同级，都属于 JS 的底层 API，最多管叫哥们。</p><blockquote><p>Fetch 优点：</p><ul><li>采用 Promise ，使得代码更简洁优雅</li><li>采用模块化设计，API 设计更加合理，接口分离到三个对象上，Response 对象，Request 对象，Header 对象</li><li>通过数据流处理数据，支持分块读取，对于请求大文件和网速慢有奇效</li></ul><p>缺点：</p><ul><li>兼容性没有 xhr 支持那么好</li><li>原生 Fetch 不支持监测进度，但 xhr 可以</li></ul></blockquote><h3 id="02-代码对比"><a href="#02-代码对比" class="headerlink" title="02 代码对比"></a>02 代码对比</h3><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-comment">// 传统的 xhr 请求</span><br><span class="hljs-keyword">var</span> xhr = <span class="hljs-keyword">new</span> <span class="hljs-title class_">XMLHttpRequest</span>();<br>xhr.<span class="hljs-title function_">open</span>(<span class="hljs-string">&#x27;GET&#x27;</span>, url);<br>xhr.<span class="hljs-property">responseType</span> = <span class="hljs-string">&#x27;json&#x27;</span>;<br><br>xhr.<span class="hljs-property">onload</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(xhr.<span class="hljs-property">response</span>);<br>&#125;;<br><br>xhr.<span class="hljs-property">onerror</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;Oops, error&quot;</span>);<br>&#125;;<br><br>xhr.<span class="hljs-title function_">send</span>();<br><br><span class="hljs-comment">// fetch 请求</span><br><span class="hljs-title function_">fetch</span>(<span class="hljs-string">&#x27;http://example.com/movies.json&#x27;</span>)<br>  .<span class="hljs-title function_">then</span>( <span class="hljs-function"><span class="hljs-params">response</span> =&gt;</span> response.<span class="hljs-title function_">json</span>() )<br>  .<span class="hljs-title function_">then</span>( <span class="hljs-function"><span class="hljs-params">data</span> =&gt;</span> <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(data) );<br>  .<span class="hljs-title function_">catch</span>( <span class="hljs-function"><span class="hljs-params">err</span> =&gt;</span> <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(err))<br></code></pre></div></td></tr></table></figure><p>相比下，Fetch API 更加简洁明了。</p><p><strong>但是，与传统 ajax 相比：</strong></p><ul><li>当接收到一个代表错误的 HTTP 状态码时，从 <code>fetch()</code> 返回的 Promise <strong>不会被标记为 reject</strong>，即使响应的 HTTP 状态码是 404 或 500。相反，它会将 Promise 状态标记为 resolve （如果响应的 HTTP 状态码不在 200 - 299 的范围内，则设置 resolve 返回值的 <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Response/ok"><code>ok</code></a> 属性为 false ），仅当网络故障时或请求被阻止时，才会标记为 reject。</li><li><code>fetch</code> <strong>不会发送跨域 cookies</strong>，需要配置 <code>credentials=&quot;include&quot;</code></li></ul><p><strong>我们可以改造上面的写法</strong>：</p><p>Promise 可以使用 await 语法改写，使得语义更清晰。</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-comment">// 下面示例中，await语句必须放在try...catch里面，这样才能捕捉异步操作中可能发生的错误。</span><br><span class="hljs-keyword">try</span> &#123;<br>  <span class="hljs-keyword">let</span> response = <span class="hljs-keyword">await</span> <span class="hljs-title function_">fetch</span>(url)<br>  <span class="hljs-keyword">let</span> data = <span class="hljs-keyword">await</span> response.<span class="hljs-title function_">json</span>()<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(data)<br>&#125; <span class="hljs-keyword">catch</span> (e) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;Oops, error&#x27;</span>, e)<br>&#125;<br></code></pre></div></td></tr></table></figure><p>03 封装 Fetch API</p>]]></content>
    
    
    <categories>
      
      <category>Fetch</category>
      
    </categories>
    
    
    <tags>
      
      <tag>异步请求</tag>
      
      <tag>Fetch</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>XHR  API -- withCredentials</title>
    <link href="/2022/06/07/XHR%20%20API%20--%20withCredentials/"/>
    <url>/2022/06/07/XHR%20%20API%20--%20withCredentials/</url>
    
    <content type="html"><![CDATA[<h2 id="XHR-API-–-withCredentials"><a href="#XHR-API-–-withCredentials" class="headerlink" title="XHR API – withCredentials"></a>XHR API – withCredentials</h2><blockquote><p>前言： 今天想讲讲这个 API，前几天封装的 XHR，在使用除了问题，发送 POST 请求无论如何都提示跨域了。（服务端响应头都设置好情况下）</p></blockquote><p>官方文档：<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/XMLHttpRequest/withCredentials">XMLHttpRequest.withCredentials - Web API 接口参考 | MDN (mozilla.org)</a></p><h3 id="01-还原现场"><a href="#01-还原现场" class="headerlink" title="01 还原现场"></a>01 还原现场</h3><p>下面代码是简单的 XHR 封装， 主要出问题的参数是 <code>withCredentials = true</code></p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">request</span> (&#123;<br>    <span class="hljs-attr">method</span>: string<br><span class="hljs-attr">url</span>: string<br>data?: string | object<br>success?: <span class="hljs-function">(<span class="hljs-params">res: <span class="hljs-built_in">Object</span></span>) =&gt;</span> <span class="hljs-keyword">void</span><br>fail?: <span class="hljs-function">(<span class="hljs-params">status: number</span>) =&gt;</span> <span class="hljs-keyword">void</span><br>&#125;) &#123;<br>    <span class="hljs-comment">// 创建一个请求</span><br>    <span class="hljs-keyword">const</span> request = <span class="hljs-keyword">new</span> <span class="hljs-title class_">XMLHttpRequest</span> ()<br><br>    <span class="hljs-comment">// 设置请求方法、请求地址、是否异步</span><br>    request.<span class="hljs-title function_">open</span>(method.<span class="hljs-title function_">toUpperCase</span>(), url, <span class="hljs-literal">true</span>)<br><br>    <span class="hljs-comment">// 设置请求头</span><br>    request.<span class="hljs-title function_">setRequestHeader</span>(<span class="hljs-string">&quot;Content-Type&quot;</span>, <span class="hljs-string">&quot;application/json&quot;</span>)<br><br>    <span class="hljs-comment">// &gt;--------问题出处--------&lt;</span><br>    request.<span class="hljs-property">withCredentials</span> = <span class="hljs-literal">true</span><br>    <span class="hljs-comment">// &gt;-----------------------&lt;</span><br><br>    <span class="hljs-comment">// 发送请求</span><br>    request.<span class="hljs-title function_">send</span>(<span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>(data))<br><br>    <span class="hljs-comment">// 接收响应</span><br>    request.<span class="hljs-property">onreadystatechange</span> = <span class="hljs-function">() =&gt;</span> &#123;<br>        <span class="hljs-keyword">if</span> (request.<span class="hljs-property">readyState</span> !== <span class="hljs-number">4</span>) &#123;<br>            <span class="hljs-keyword">return</span><br>        &#125;<br><br>        <span class="hljs-comment">// 判断响应状态</span><br>        <span class="hljs-keyword">if</span> (request.<span class="hljs-property">status</span> === <span class="hljs-number">200</span>) &#123;<br>            <span class="hljs-comment">// 请求成功</span><br>            <span class="hljs-keyword">const</span> res = <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">parse</span>(request.<span class="hljs-property">responseText</span>)<br>            success &amp;&amp; <span class="hljs-title function_">success</span>(res)<br>            <span class="hljs-title function_">resolve</span>(res)<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-comment">// 请求失败</span><br>            fail &amp;&amp; <span class="hljs-title function_">fail</span>(request.<span class="hljs-property">status</span>)<br>            <span class="hljs-title function_">reject</span>(<span class="hljs-string">&quot;请求失败,请检查网络!&quot;</span>)<br>        &#125;<br>    &#125;<br>&#125;<br><br><br><span class="hljs-comment">// &gt;---发送一个 POST 请求---&lt;</span><br><span class="hljs-title function_">request</span>(&#123;<br>    <span class="hljs-attr">method</span>:<span class="hljs-string">&quot;POST&quot;</span>,<br>    <span class="hljs-attr">URL</span>:<span class="hljs-string">&quot;XXXXX&quot;</span>,<br>    <span class="hljs-attr">data</span>:&#123;<br>        <span class="hljs-attr">name</span>:<span class="hljs-string">&quot;DuoR&quot;</span><br>    &#125;<br>&#125;).<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">res</span> =&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(res)<br>&#125;).<span class="hljs-title function_">catch</span>(<span class="hljs-function"><span class="hljs-params">err</span> =&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(err)<br>&#125;)<br></code></pre></div></td></tr></table></figure><p><strong>报错信息：</strong></p><p><img src="https://s2.loli.net/2022/06/06/pcogUiSCLjv3GWf.png" alt="image-20220606173840097"></p><h3 id="02-原因分析"><a href="#02-原因分析" class="headerlink" title="02 原因分析"></a>02 原因分析</h3><blockquote><p>withCredentials API 默认为 false 。简单来说，就是当发送跨域请求时，无论 Access-Control- Header 设置什么，都不无法为站点设置 Cookie 值，只有当设置为 true 才能设置。</p></blockquote><p>上面的报错解释，当 credentials mode 为 include 时，Access-Control-Allow-Origin 响应头不可以设置为 “*”，必须明确 url（可能是出于安全考虑）。 通过 XMLHttpRequest 的 withCredentials 可以设置。</p>]]></content>
    
    
    <categories>
      
      <category>XMLHttpRequest</category>
      
    </categories>
    
    
    <tags>
      
      <tag>XMLHttpRequest</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>XHR原型链改造思路</title>
    <link href="/2022/06/07/XHR%E5%8E%9F%E5%9E%8B%E9%93%BE%E6%94%B9%E9%80%A0%E6%80%9D%E8%B7%AF/"/>
    <url>/2022/06/07/XHR%E5%8E%9F%E5%9E%8B%E9%93%BE%E6%94%B9%E9%80%A0%E6%80%9D%E8%B7%AF/</url>
    
    <content type="html"><![CDATA[<h2 id="XHR-原型链改造思路"><a href="#XHR-原型链改造思路" class="headerlink" title="XHR 原型链改造思路"></a>XHR 原型链改造思路</h2><blockquote><p>通过下面的案例，为大家发散下思维，改造原型链上的方法，可以做得事情很多。比如我们通过改造 XMLHttpRequest 对象原型链上的 <code>open</code>、<code>send</code>方法，可以实现前端埋点，xhr, axios 请求拦截器等等</p></blockquote><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * xhr, axios请求拦截</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">interceptAjax</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> &#123; open, send &#125; = <span class="hljs-title class_">XMLHttpRequest</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span><br><br>  <span class="hljs-comment">// 劫持 open方法</span><br>  <span class="hljs-title class_">XMLHttpRequest</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">open</span> = <span class="hljs-keyword">function</span> <span class="hljs-title function_">openXHR</span>(<span class="hljs-params">...args</span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;%c - open -&#x27;</span>, <span class="hljs-string">&#x27;background: orange;color: white&#x27;</span>)<br>    <span class="hljs-keyword">return</span> open.<span class="hljs-title function_">apply</span>(<span class="hljs-variable language_">this</span>, args)<br>  &#125;<br><br>  <span class="hljs-comment">// 劫持 send方法</span><br>  <span class="hljs-title class_">XMLHttpRequest</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">send</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">body</span>) &#123;<br>    <span class="hljs-comment">// body 就是post方法携带的参数</span><br><br>    <span class="hljs-comment">// readyState发生改变时触发,也就是请求状态改变时</span><br>    <span class="hljs-comment">// readyState 会依次变为 2,3,4 也就是会触发三次这里</span><br>    <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;readystatechange&#x27;</span>, <span class="hljs-function">() =&gt;</span> &#123;<br>      <span class="hljs-keyword">const</span> &#123;<br>        readyState,<br>        status,<br>        responseURL = _config.<span class="hljs-property">src</span>,<br>        responseText,<br>      &#125; = <span class="hljs-variable language_">this</span><br>      <span class="hljs-keyword">if</span> (readyState === <span class="hljs-number">4</span>) &#123;<br>        <span class="hljs-comment">// 请求已完成,且响应已就绪</span><br>        <span class="hljs-keyword">if</span> (status === <span class="hljs-number">200</span> || status === <span class="hljs-number">304</span>) &#123;<br>          <span class="hljs-comment">// 请求成功</span><br>          <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<br>            <span class="hljs-string">&#x27;%c - response successful -&#x27;</span>,<br>            <span class="hljs-string">&#x27;background: green;color: white&#x27;</span><br>          )<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>          <span class="hljs-comment">// 请求失败，这里可以做前端埋点，比如说错误上报等</span><br>          <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;%c - response failed -&#x27;</span>, <span class="hljs-string">&#x27;background: red;color: white&#x27;</span>)<br>        &#125;<br>      &#125;<br>    &#125;)<br><br>    <span class="hljs-keyword">return</span> send.<span class="hljs-title function_">call</span>(<span class="hljs-variable language_">this</span>, body)<br>  &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p><strong>效果图：</strong></p><p><img src="https://s2.loli.net/2022/06/02/NrhCMi58ptqcI4w.gif" alt="GIF 2022-6-2 0-21-42"></p>]]></content>
    
    
    <categories>
      
      <category>JavaScript</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JavaScript</tag>
      
      <tag>XMLHttpRequest</tag>
      
      <tag>原型链改造</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>认识 HTMLElement.dataset</title>
    <link href="/2022/06/07/%E8%AE%A4%E8%AF%86%20HTMLElement.dataset/"/>
    <url>/2022/06/07/%E8%AE%A4%E8%AF%86%20HTMLElement.dataset/</url>
    
    <content type="html"><![CDATA[<h2 id="认识-HTMLElement-dataset"><a href="#认识-HTMLElement-dataset" class="headerlink" title="认识 HTMLElement.dataset"></a>认识 HTMLElement.dataset</h2><p>官方解释：<a href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dataset">HTMLElement.dataset - Web APIs | MDN (mozilla.org)</a></p><blockquote><p>做些低代码碰到一个标签传参的问题，通过标签 dataset 解决的</p></blockquote><h3 id="01-dataSet-是什么东西？"><a href="#01-dataSet-是什么东西？" class="headerlink" title="01 dataSet 是什么东西？"></a>01 dataSet 是什么东西？</h3><p>它是 H5 标准允许你在普通的元素标签里，嵌入类似 data-*的属性，来实现一些简单数据的存取。常见的使用场景，比如有些标签，你是想带入一些参数的，方便其他页面拿到标签，可以获取其中的参数，就可以使用 dataset 进行数据预设或存储。</p><h3 id="02-使用案例"><a href="#02-使用案例" class="headerlink" title="02 使用案例"></a>02 使用案例</h3><ul><li>利用 DOM 节点 getAttribute</li></ul><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;article&quot;</span> <span class="hljs-attr">data-id</span>=<span class="hljs-string">&quot;1&quot;</span> <span class="hljs-attr">data-author</span>=<span class="hljs-string">&quot;DuoR&quot;</span>&gt;</span>文章<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></div></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-comment">// 通过 getAttribute</span><br><span class="hljs-keyword">var</span> article = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;article&#x27;</span>)<br><span class="hljs-keyword">var</span> id = article.<span class="hljs-title function_">getAttribute</span>(<span class="hljs-string">&#x27;data-id&#x27;</span>)<br><span class="hljs-keyword">var</span> author = article.<span class="hljs-title function_">getAttribute</span>(<span class="hljs-string">&#x27;data-author&#x27;</span>)<br></code></pre></div></td></tr></table></figure><ul><li><p>利用 dataset API</p><p>通过 dataset API，我们可以更方便的获取元素的所有 data 字段，并以对象的方式，方便存取和遍历</p></li></ul><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-comment">// dataset API</span><br><span class="hljs-keyword">var</span> article = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;article&#x27;</span>)<br><span class="hljs-keyword">var</span> ds = article.<span class="hljs-property">dataset</span><br><span class="hljs-keyword">var</span> id = ds.<span class="hljs-property">id</span><br><span class="hljs-keyword">var</span> author = da.<span class="hljs-property">author</span><br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>HTML</category>
      
    </categories>
    
    
    <tags>
      
      <tag>HTML</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>前端优化：竞态条件</title>
    <link href="/2022/06/07/%E5%89%8D%E7%AB%AF%E4%BC%98%E5%8C%96%EF%BC%9A%E7%AB%9E%E6%80%81%E6%9D%A1%E4%BB%B6/"/>
    <url>/2022/06/07/%E5%89%8D%E7%AB%AF%E4%BC%98%E5%8C%96%EF%BC%9A%E7%AB%9E%E6%80%81%E6%9D%A1%E4%BB%B6/</url>
    
    <content type="html"><![CDATA[<h2 id="前端优化：竞态条件"><a href="#前端优化：竞态条件" class="headerlink" title="前端优化：竞态条件"></a>前端优化：竞态条件</h2><h3 id="01-什么是竞态条件？"><a href="#01-什么是竞态条件？" class="headerlink" title="01 什么是竞态条件？"></a>01 什么是竞态条件？</h3><blockquote><p>在日常 Web 开发中，渲染界面一般是经过请求 AJAX，经过复杂的网络环境，将得到数据渲染到页面上。由于要经过复杂网络环境，难免会遇到特殊情况，当我们先后请求两个数据，由于网络原因，可能第二条比第一条先响应，导致第二条数据会比第一条先渲染到页面上，接着当第一条数据响应后，会将第二条渲染的数据覆盖渲染到页面上。导致用户体验非常不好。</p></blockquote><p>来！上 GIF 图更加直观。</p><ol><li>首先，点击 Git 的那些事</li><li>之后，再点击 EventLoop 和浏览器渲染</li><li>发现，反而第一次点击数数据覆盖第二次点击的数据</li></ol><p><img src="https://s2.loli.net/2022/06/01/NSF7WZmBkrv5UEb.gif" alt="GIF 2022-6-1 0-01-46"></p><h3 id="02-解决方案"><a href="#02-解决方案" class="headerlink" title="02 解决方案"></a>02 解决方案</h3><p>我们可以通过中止上一个请求从而达到目的，方案如下：</p><blockquote><ol><li>axios 提供 CancelToken API</li><li>原生 XHR 提供 abort API</li></ol></blockquote><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-comment">// ---------伪代码---------</span><br><br><span class="hljs-keyword">const</span> cancelToken = axios.<span class="hljs-property">CancelToken</span><br><span class="hljs-keyword">let</span> request = <span class="hljs-literal">null</span> <span class="hljs-comment">// 记录上次请求</span><br><br><span class="hljs-comment">// 每当新的请求时，出发下面的函数</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">getArticleRequest</span> (articleId)&#123;<br>  <span class="hljs-keyword">if</span>(request)&#123;<br>    <span class="hljs-comment">// 中止上一个请求</span><br>   request.<span class="hljs-title function_">cancel</span>()<br>  &#125;<br>  <span class="hljs-comment">// CancelToken.source()工厂函数，记录上次请求</span><br>  source = cancelToken.<span class="hljs-title function_">source</span>()<br>  axios.<span class="hljs-title function_">get</span>(<span class="hljs-string">`/getarticle/<span class="hljs-subst">$&#123;articleId&#125;</span>`</span>， &#123;<br>  <span class="hljs-attr">cancelToken</span>: source.<span class="hljs-property">token</span> <span class="hljs-comment">// 取消请求token</span><br>  &#125;)<br>&#125;<br></code></pre></div></td></tr></table></figure><p><img src="https://s2.loli.net/2022/06/01/8HkW4F2OsGq7tQN.gif" alt="GIF 2022-6-1 10-17-49"></p>]]></content>
    
    
    <categories>
      
      <category>前端优化</category>
      
    </categories>
    
    
    <tags>
      
      <tag>前端优化</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>memo 和 useCallback 搭配使用</title>
    <link href="/2022/04/20/memo%20%E5%92%8C%20useCallback%20%E6%90%AD%E9%85%8D%E4%BD%BF%E7%94%A8/"/>
    <url>/2022/04/20/memo%20%E5%92%8C%20useCallback%20%E6%90%AD%E9%85%8D%E4%BD%BF%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<h2 id="memo-和-useCallback-搭配使用"><a href="#memo-和-useCallback-搭配使用" class="headerlink" title="memo 和 useCallback 搭配使用"></a>memo 和 useCallback 搭配使用</h2><blockquote><p>前言，开发时，当父组件重新渲染时，它的子组件也会跟着重新渲染。但是有一种情况，就是我子组件的数据是没有发生改变的，是不需要进行重新渲染。这个时候，就可以采用 memo 和 useCallback 搭配对组件进行一个优化。</p></blockquote><h3 id="01-需求"><a href="#01-需求" class="headerlink" title="01 需求"></a>01 需求</h3><blockquote><p>父组件 App 里面有了 A 组件、B 组件，父组件 App 管理 count 数据，A 组件负责展示 count 数据，B 组件展示按钮，负责 count 相关操作。</p></blockquote><p><img src="https://s2.loli.net/2022/04/06/LUJvOKhnIyk3PNp.png" alt="image-20220406153329424"></p><p>如图所示，但是，我只想说当 count 改变时，<strong>只更新 A 组件</strong>重新渲染。B 组件是没有必要重新渲染的，减少性能开销</p><h3 id="02-源码解析"><a href="#02-源码解析" class="headerlink" title="02 源码解析"></a>02 源码解析</h3><p><code>react</code> 的 <code>Hooks</code> 组件对 <code>props</code> 的浅比较是在 memo 里面比较的（类组件是在 <code>shouldComponentUpdate</code> 里面），如果没有 <code>memo</code>，那么你使用 <code>useCallback</code> 就没啥意义，反而浪费性能（因为 <code>useCallback </code>来包裹函数也是需要开销的）。因为子组件还是会重新渲染。</p><figure class="highlight jsx"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs jsx"><span class="hljs-comment">// App 父组件</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span>, &#123; useCallback, useState &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span><br><span class="hljs-keyword">import</span> A <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./components/A&#x27;</span><br><span class="hljs-keyword">import</span> B <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./components/B&#x27;</span><br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">App</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> [count, setCount] = <span class="hljs-title function_">useState</span>(<span class="hljs-number">0</span>)<br>  <span class="hljs-comment">// 返回是一个 memoized 回调函数， 搭配B组件的 memo 使用</span><br>  <span class="hljs-keyword">const</span> add = <span class="hljs-title function_">useCallback</span>(<span class="hljs-function">() =&gt;</span> <span class="hljs-title function_">setCount</span>(<span class="hljs-function">(<span class="hljs-params">c</span>) =&gt;</span> c + <span class="hljs-number">1</span>), [])<br><br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;App&quot;</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">A</span> <span class="hljs-attr">count</span>=<span class="hljs-string">&#123;count&#125;</span> /&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">B</span> <span class="hljs-attr">addCount</span>=<span class="hljs-string">&#123;add&#125;</span> /&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>  )<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title class_">App</span><br></code></pre></div></td></tr></table></figure><figure class="highlight jsx"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs jsx"><span class="hljs-comment">// A组件 子组件</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span><br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">A</span>(<span class="hljs-params">&#123; count = <span class="hljs-number">0</span> &#125;</span>) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;A组件&#x27;</span>)<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>A组件<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>当前计数为：&#123;count&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>  )<br>&#125;<br></code></pre></div></td></tr></table></figure><figure class="highlight jsx"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs jsx"><span class="hljs-comment">// B组件 子组件</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span><br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">B</span>(<span class="hljs-params">&#123;</span><br><span class="hljs-params">  addCount = () =&gt; &#123;&#125;, // 对 props 进行一次浅比较</span><br><span class="hljs-params">&#125;</span>) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;B组件&#x27;</span>)<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>B组件<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;addCount&#125;</span>&gt;</span>+ 1<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>  )<br>&#125;<br><span class="hljs-comment">// 注意这边，添加 memo 对B组件进行包裹</span><br><span class="hljs-comment">// 当传进的 addCount 没有发生改变时，B组件不会进行渲染</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title class_">React</span>.<span class="hljs-title function_">memo</span>(B)<br></code></pre></div></td></tr></table></figure><h3 id="03-效果"><a href="#03-效果" class="headerlink" title="03 效果"></a>03 效果</h3><p>没有进行优化，正常经常，A 和 B 组件都会重新渲染</p><p><img src="https://s2.loli.net/2022/04/06/qwm2HcsLFi81BP3.gif" alt="GIF 2022-4-6 15-47-28"></p><p>使用 <code>memo</code> 和 <code>useCallback</code> 优化过后</p><p><img src="https://s2.loli.net/2022/04/06/ErUZYi3hF28JbKP.gif" alt="GIF 2022-4-6 15-48-19"></p><h3 id="04-memo-扩展"><a href="#04-memo-扩展" class="headerlink" title="04 memo 扩展"></a>04 memo 扩展</h3><p>默认情况下其只会对复杂对象做<strong>浅层对比</strong>，如果你想要控制对比过程，那么请将自定义的比较函数通过第二个参数传入来实现。</p><figure class="highlight jsx"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs jsx"><br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>React</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Hook</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>React 下单测入门（2）</title>
    <link href="/2022/04/20/React%20%E4%B8%8B%E5%8D%95%E6%B5%8B%E5%85%A5%E9%97%A8%EF%BC%882%EF%BC%89/"/>
    <url>/2022/04/20/React%20%E4%B8%8B%E5%8D%95%E6%B5%8B%E5%85%A5%E9%97%A8%EF%BC%882%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h2 id="React-下单测入门（2）"><a href="#React-下单测入门（2）" class="headerlink" title="React 下单测入门（2）"></a>React 下单测入门（2）</h2><p><strong>引自文章</strong><a href="https://juejin.cn/post/7010326062554955790#heading-12">前端单测学习（2）—— react 组件单测初步 - 掘金 (juejin.cn)</a></p><h3 id="01-针对组件进行单测"><a href="#01-针对组件进行单测" class="headerlink" title="01 针对组件进行单测"></a>01 针对组件进行单测</h3><p>首先在 <strong>components 文件夹</strong> 创建一个组件，这边以 ToDoHeader 组件为例，同时在 <strong>components 文件夹</strong> 下创建**<em>test</em>** 文件下，用于测试 <strong>components</strong> 下组件</p><p><img src="https://s2.loli.net/2022/04/08/BnmOc5ZoFRGxrVJ.png" alt="image-20220408144511325"></p><p><strong>ToDo-header/index.jsx</strong></p><figure class="highlight jsx"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs jsx"><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;./index.css&#x27;</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span><br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">ToDoHeader</span>(<span class="hljs-params">&#123; title &#125;</span>) &#123;<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;report-header&quot;</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;title&quot;</span>&gt;</span>&#123;title&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>  )<br>&#125;<br></code></pre></div></td></tr></table></figure><p><strong>ToDo-header/index.css</strong></p><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css">todo-<span class="hljs-selector-tag">header</span> &#123;<br>  <span class="hljs-attribute">display</span>: flex;<br>&#125;<br><span class="hljs-selector-class">.title</span> &#123;<br>  <span class="hljs-attribute">font-style</span>: normal;<br>  <span class="hljs-attribute">font-weight</span>: <span class="hljs-number">500</span>;<br>  <span class="hljs-attribute">font-size</span>: <span class="hljs-number">16px</span>;<br>  <span class="hljs-attribute">line-height</span>: <span class="hljs-number">24px</span>;<br>  <span class="hljs-attribute">color</span>: <span class="hljs-number">#1664ff</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><p><strong>ToDo-header.test.js</strong></p><figure class="highlight jsx"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs jsx"><span class="hljs-keyword">import</span> &#123; render, screen &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@testing-library/react&#x27;</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">ToDoHeader</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;../ToDo-header&#x27;</span><br><br><span class="hljs-title function_">describe</span>(<span class="hljs-string">&#x27;测试ToDoHeader组件&#x27;</span>, <span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-title function_">it</span>(<span class="hljs-string">&#x27;测试ToDoHeader组件&#x27;</span>, <span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-keyword">const</span> title = <span class="hljs-string">&#x27;测试标题&#x27;</span><br>    <span class="hljs-title function_">render</span>(<span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">ToDoHeader</span> <span class="hljs-attr">title</span>=<span class="hljs-string">&#123;title&#125;</span> /&gt;</span></span>)<br>    <span class="hljs-keyword">const</span> linkElement = screen.<span class="hljs-title function_">getByText</span>(title)<br>    <span class="hljs-title function_">expect</span>(linkElement).<span class="hljs-title function_">toBeInTheDocument</span>()<br>  &#125;)<br>&#125;)<br></code></pre></div></td></tr></table></figure><p>运行 <code>npm test</code> ,进行单侧组件</p><p><strong>结果如下：</strong></p><p><img src="https://s2.loli.net/2022/04/08/VXgeqPcuhFYmObr.png" alt="image-20220408144950214"></p><h3 id="02-VSCode-插件"><a href="#02-VSCode-插件" class="headerlink" title="02 VSCode 插件"></a>02 VSCode 插件</h3><p><img src="https://s2.loli.net/2022/04/08/fghjdrA2CkFcWBm.png" alt="image-20220408145102092"></p><p>安装完，每次<code>CTRL + S</code> , 都会进行测试，效果如下</p><p><img src="https://s2.loli.net/2022/04/08/vahGoLP5y3A21ep.png" alt="image-20220408145250827"></p><h3 id="03-多个测试用例"><a href="#03-多个测试用例" class="headerlink" title="03 多个测试用例"></a>03 多个测试用例</h3><h4 id="通过-queryByText"><a href="#通过-queryByText" class="headerlink" title="通过 queryByText"></a>通过 queryByText</h4><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-title function_">it</span>(<span class="hljs-string">&#x27;正确渲染title组件通过queryByTest&#x27;</span>, <span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-keyword">const</span> title = <span class="hljs-string">&#x27;测试标题&#x27;</span><br>  <span class="hljs-keyword">const</span> &#123; queryByText &#125; = <span class="hljs-title function_">render</span>(<span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">ToDoHeader</span> <span class="hljs-attr">title</span>=<span class="hljs-string">&#123;title&#125;</span> /&gt;</span></span>)<br>  <span class="hljs-keyword">const</span> linkElement = <span class="hljs-title function_">queryByText</span>(title)<br>  <span class="hljs-title function_">expect</span>(linkElement).<span class="hljs-property">not</span>.<span class="hljs-title function_">toBeNull</span>()<br>  <span class="hljs-title function_">expect</span>(linkElement).<span class="hljs-title function_">toBeInTheDocument</span>()<br>&#125;)<br></code></pre></div></td></tr></table></figure><h4 id="通过-getByText"><a href="#通过-getByText" class="headerlink" title="通过 getByText"></a>通过 getByText</h4><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-title function_">it</span>(<span class="hljs-string">&#x27;正确渲染title组件通过getByText&#x27;</span>, <span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-keyword">const</span> title = <span class="hljs-string">&#x27;测试的标题&#x27;</span><br>  <span class="hljs-keyword">const</span> &#123; getByText &#125; = <span class="hljs-title function_">render</span>(<span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">TodoHeader</span> <span class="hljs-attr">title</span>=<span class="hljs-string">&#123;title&#125;</span> /&gt;</span></span>)<br>  <span class="hljs-keyword">const</span> titleElement = <span class="hljs-title function_">getByText</span>(title)<br>  <span class="hljs-title function_">expect</span>(titleElement).<span class="hljs-title function_">toBeInTheDocument</span>()<br>&#125;)<br></code></pre></div></td></tr></table></figure><h4 id="通过-container-的-query"><a href="#通过-container-的-query" class="headerlink" title="通过 container 的 query"></a>通过 container 的 query</h4><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-title function_">it</span>(<span class="hljs-string">&#x27;正确渲染title组件通过container的query&#x27;</span>, <span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-keyword">const</span> title = <span class="hljs-string">&#x27;测试标题&#x27;</span><br>  <span class="hljs-keyword">const</span> &#123; container &#125; = <span class="hljs-title function_">render</span>(<span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">ToDoHeader</span> <span class="hljs-attr">title</span>=<span class="hljs-string">&#123;title&#125;</span> /&gt;</span></span>)<br>  <span class="hljs-keyword">const</span> linkElement = container.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;span&#x27;</span>)<br>  <span class="hljs-title function_">expect</span>(linkElement).<span class="hljs-title function_">toHaveTextContent</span>(title)<br>&#125;)<br></code></pre></div></td></tr></table></figure><h4 id="通过-testid-查询"><a href="#通过-testid-查询" class="headerlink" title="通过 testid 查询"></a>通过 testid 查询</h4><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-title function_">it</span>(<span class="hljs-string">&#x27;正确渲染title组件通过getByTestId&#x27;</span>, <span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-keyword">const</span> title = <span class="hljs-string">&#x27;测试标题&#x27;</span><br>  <span class="hljs-keyword">const</span> &#123; getByTestId &#125; = <span class="hljs-title function_">render</span>(<span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">ToDoHeader</span> <span class="hljs-attr">title</span>=<span class="hljs-string">&#123;title&#125;</span> /&gt;</span></span>)<br>  <span class="hljs-comment">// &lt;span className=&quot;title&quot; data-testid=&quot;todo-header-title&quot;&gt;</span><br>  <span class="hljs-keyword">const</span> linkElement = <span class="hljs-title function_">getByTestId</span>(<span class="hljs-string">&#x27;todo-header-title&#x27;</span>)<br>  <span class="hljs-title function_">expect</span>(linkElement).<span class="hljs-title function_">toHaveTextContent</span>(title)<br>&#125;)<br></code></pre></div></td></tr></table></figure><h4 id="完整的测试用例"><a href="#完整的测试用例" class="headerlink" title="完整的测试用例"></a>完整的测试用例</h4><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-comment">// ToDo-header.test.js</span><br><span class="hljs-keyword">import</span> &#123; render, screen &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@testing-library/react&#x27;</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">ToDoHeader</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;../ToDo-header&#x27;</span><br><br><span class="hljs-title function_">describe</span>(<span class="hljs-string">&#x27;测试ToDoHeader组件&#x27;</span>, <span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-title function_">it</span>(<span class="hljs-string">&#x27;测试ToDoHeader组件&#x27;</span>, <span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-keyword">const</span> title = <span class="hljs-string">&#x27;测试标题&#x27;</span><br>    <span class="hljs-title function_">render</span>(<span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">ToDoHeader</span> <span class="hljs-attr">title</span>=<span class="hljs-string">&#123;title&#125;</span> /&gt;</span></span>)<br>    <span class="hljs-keyword">const</span> linkElement = screen.<span class="hljs-title function_">getByText</span>(title)<br>    <span class="hljs-title function_">expect</span>(linkElement).<span class="hljs-title function_">toBeInTheDocument</span>()<br>  &#125;)<br>  <span class="hljs-title function_">it</span>(<span class="hljs-string">&#x27;正确渲染title组件通过queryByTest&#x27;</span>, <span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-keyword">const</span> title = <span class="hljs-string">&#x27;测试标题&#x27;</span><br>    <span class="hljs-keyword">const</span> &#123; queryByText &#125; = <span class="hljs-title function_">render</span>(<span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">ToDoHeader</span> <span class="hljs-attr">title</span>=<span class="hljs-string">&#123;title&#125;</span> /&gt;</span></span>)<br>    <span class="hljs-keyword">const</span> linkElement = <span class="hljs-title function_">queryByText</span>(title)<br>    <span class="hljs-title function_">expect</span>(linkElement).<span class="hljs-property">not</span>.<span class="hljs-title function_">toBeNull</span>()<br>    <span class="hljs-title function_">expect</span>(linkElement).<span class="hljs-title function_">toBeInTheDocument</span>()<br>  &#125;)<br>  <span class="hljs-title function_">it</span>(<span class="hljs-string">&#x27;正确渲染title组件通过container的query&#x27;</span>, <span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-keyword">const</span> title = <span class="hljs-string">&#x27;测试标题&#x27;</span><br>    <span class="hljs-keyword">const</span> &#123; container &#125; = <span class="hljs-title function_">render</span>(<span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">ToDoHeader</span> <span class="hljs-attr">title</span>=<span class="hljs-string">&#123;title&#125;</span> /&gt;</span></span>)<br>    <span class="hljs-keyword">const</span> linkElement = container.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;span&#x27;</span>)<br>    <span class="hljs-title function_">expect</span>(linkElement).<span class="hljs-title function_">toHaveTextContent</span>(title)<br>  &#125;)<br>  <span class="hljs-title function_">it</span>(<span class="hljs-string">&#x27;正确渲染title组件通过getByTestId&#x27;</span>, <span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-keyword">const</span> title = <span class="hljs-string">&#x27;测试标题&#x27;</span><br>    <span class="hljs-keyword">const</span> &#123; getByTestId &#125; = <span class="hljs-title function_">render</span>(<span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">ToDoHeader</span> <span class="hljs-attr">title</span>=<span class="hljs-string">&#123;title&#125;</span> /&gt;</span></span>)<br>    <span class="hljs-comment">// &lt;span className=&quot;title&quot; data-testid=&quot;todo-header-title&quot;&gt;</span><br>    <span class="hljs-keyword">const</span> linkElement = <span class="hljs-title function_">getByTestId</span>(<span class="hljs-string">&#x27;todo-header-title&#x27;</span>)<br>    <span class="hljs-title function_">expect</span>(linkElement).<span class="hljs-title function_">toHaveTextContent</span>(title)<br>  &#125;)<br>&#125;)<br></code></pre></div></td></tr></table></figure><p><strong>测试结果：</strong></p><p><img src="https://s2.loli.net/2022/04/08/mV4wbfhtnsHOzSq.png" alt="image-20220408145745565"></p>]]></content>
    
    
    <categories>
      
      <category>Jest</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Jest react</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>React 下单测入门（1）</title>
    <link href="/2022/04/20/React%20%E4%B8%8B%E5%8D%95%E6%B5%8B%E5%85%A5%E9%97%A8%EF%BC%881%EF%BC%89/"/>
    <url>/2022/04/20/React%20%E4%B8%8B%E5%8D%95%E6%B5%8B%E5%85%A5%E9%97%A8%EF%BC%881%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h2 id="React-下单测入门（1）"><a href="#React-下单测入门（1）" class="headerlink" title="React 下单测入门（1）"></a>React 下单测入门（1）</h2><p><strong>引自文章</strong><a href="https://juejin.cn/post/6985840134046351367">前端单测学习（1）—— 单测入门之 react 单测项目初步 - 掘金 (juejin.cn)</a></p><p><img src="https://s2.loli.net/2022/04/08/R1BK2cANbZVmiQh.png" alt="image-20220408142134507"></p><h3 id="01-什么单测，为啥要用单测？"><a href="#01-什么单测，为啥要用单测？" class="headerlink" title="01 什么单测，为啥要用单测？"></a>01 什么单测，为啥要用单测？</h3><blockquote><p>单元测试时用来对一个模块、函数或者列进行正确性检验的测试工作，所谓的正确性，就是保证同一单元，在给定输入下，总能得到预期的输出</p></blockquote><p><strong>单测的好处：</strong></p><ul><li>保证代码正常：设计合适的测试用例来测试代码，可以保证代码的正确性，提高对代码的信心</li><li>提升代码质量：耦合度高、功能不清晰的代码在做单测的时候是比较困难的，而单测的存在可以推动对代码的合理重构，对提升代码质量有帮助</li><li>进行回归测试：当需要对系统进行重构的时候，单测可以为重构的过程保驾护航，验证重构后系统功能的正确性以及保证系统的稳定性</li><li>全面测试场景：可以通过构建数据来触发不同的测试场景，对于一些人工测试时不便触发的场景，单测可以构造参数进行触发，支持的场景更加全面</li><li>帮助理解需求、熟悉代码：写单测的过程中需要梳理需求，从而进一步理解需求，同时好的单测也是不错的代码文档，有助于团队新成员通过单测了解代码的功能</li></ul><h3 id="02-使用-CRA-创建项目"><a href="#02-使用-CRA-创建项目" class="headerlink" title="02 使用 CRA 创建项目"></a>02 使用 CRA 创建项目</h3><blockquote><p>CRA 创建项目后，是默认安装单测相关的依赖</p></blockquote><p><img src="https://s2.loli.net/2022/04/08/o2cXEQnjLvtCTmb.png" alt="image-20220408142653232"></p><p><strong>@testing-library/jest-dom</strong> 写单测的时候我们会有需要用到检查元素的属性、文本内容，样式类名等，这个库就是拓展了 jest 的能力，提供 jest machers 来增强能力，将使测试更具声明性、阅读和维护更清晰。</p><p><strong>@testing-library/react</strong> testing-libray 里面关于 react 的部分，因为我们是针对 react 来做单测，所以要用这个库</p><p><strong>@testing-library/user-event</strong> 提供一些模拟用户与浏览器交互的事件，方便我们断言测试操作后预期的一些效果</p><p><strong>@types/jest</strong> jest 的一些类型定义，因为这里用到了 ts，所以加上这个包增加代码提示</p><h3 id="03-简单一个单测"><a href="#03-简单一个单测" class="headerlink" title="03 简单一个单测"></a>03 简单一个单测</h3><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-comment">// App.test.js</span><br><span class="hljs-keyword">import</span> &#123; render, screen &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@testing-library/react&#x27;</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">App</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./App&#x27;</span><br><br><span class="hljs-title function_">test</span>(<span class="hljs-string">&#x27;renders learn react link&#x27;</span>, <span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-title function_">render</span>(<span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">App</span> /&gt;</span></span>)<br>  <span class="hljs-keyword">const</span> linkElement = screen.<span class="hljs-title function_">getByText</span>(<span class="hljs-regexp">/我是一个标题/i</span>)<br>  <span class="hljs-title function_">expect</span>(linkElement).<span class="hljs-title function_">toBeInTheDocument</span>()<br>&#125;)<br></code></pre></div></td></tr></table></figure><p>运行指令</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">npm <span class="hljs-built_in">test</span><br></code></pre></div></td></tr></table></figure><p><img src="https://s2.loli.net/2022/04/08/NRmHbP1QMxSr9XD.png" alt="image-20220408143445389"></p><p>测试结果如图所上，共一个测试用例，成功：0 | 失败：0</p>]]></content>
    
    
    <categories>
      
      <category>Jest</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Jest react</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Git rebase -i</title>
    <link href="/2022/04/20/Git%20rebase%20%20-i/"/>
    <url>/2022/04/20/Git%20rebase%20%20-i/</url>
    
    <content type="html"><![CDATA[<h2 id="Git-rebase-i"><a href="#Git-rebase-i" class="headerlink" title="Git rebase -i"></a>Git rebase -i</h2><p>rebase 的作用简要概括为：可以对某一段线性提交历史进行编辑、删除、复制、粘贴；因此，合理使用 rebase 命令可以使我们的提交历史干净、简洁！</p><h3 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h3><p>当你想把多个 <code>commit</code> 合并成一个 <code>commit</code> 时</p><p><img src="https://s2.loli.net/2022/04/07/crzKwbLTm3ECOk7.png" alt="image-20220407182433554"></p><p><strong>使用前：</strong></p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">commit 77e3eca369c30b78daae093b34fcfcd041811f45 (HEAD, master)<br>Author: DuoRouSai &lt;1158461087@qq.com&gt;<br>Date:   Thu Apr 7 15:57:02 2022 +0800<br><br>    第四次提交<br><br>commit 1d911bed06c6a1ef26c824375d0ce8c95ee98f00<br>Author: DuoRouSai &lt;1158461087@qq.com&gt;<br>Date:   Thu Apr 7 14:49:47 2022 +0800<br><br>    第三次提交<br><br>commit e7ace4479370720c7efeafa0a3d0dda55f61e1a5<br>Author: DuoRouSai &lt;1158461087@qq.com&gt;<br>Date:   Thu Apr 7 14:49:37 2022 +0800<br><br>    第二次提交<br><br>commit 6e8cc7a5d0f938e1bd8fcb284728f2902188e543<br>Author: DuoRouSai &lt;1158461087@qq.com&gt;<br>Date:   Thu Apr 7 14:48:46 2022 +0800<br><br>    第一次提交<br></code></pre></div></td></tr></table></figure><p><strong>使用后：</strong></p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">commit dcdf6abba41366a042acf2620ab010d947ac53cc (HEAD -&gt; master)<br>Author: DuoRouSai &lt;1158461087@qq.com&gt;<br>Date:   Thu Apr 7 14:49:37 2022 +0800<br><br>     第 2、3、4次提交<br><br>commit 6e8cc7a5d0f938e1bd8fcb284728f2902188e543<br>Author: DuoRouSai &lt;1158461087@qq.com&gt;<br>Date:   Thu Apr 7 14:48:46 2022 +0800<br><br>    第一次提交<br><br></code></pre></div></td></tr></table></figure><h3 id="01-git-rebase-i"><a href="#01-git-rebase-i" class="headerlink" title="01 git rebase -i"></a>01 git rebase -i</h3><blockquote><p>其中 -i =&gt; –interactive</p><p>(startpoint, endpoint] 前开后闭，可以省略 endpoint ，默认指向当前的 HEAD</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">git rebase -i  [startpoint]  [endpoint]<br></code></pre></div></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">git rebase -i commit_id<br>git rebase -i HEAD~3<br></code></pre></div></td></tr></table></figure><p>输入完命令后，会进入交互模式（下边编辑器）</p><h3 id="02-进入编辑器"><a href="#02-进入编辑器" class="headerlink" title="02 进入编辑器"></a>02 进入编辑器</h3><p><img src="https://s2.loli.net/2022/04/07/Mq7SCZ2GYHxzfpU.png" alt="image-20220407182959377"></p><p><strong>黄色区域</strong>，是我们本次需要 commit 的所有提交</p><blockquote><p>pick e7ace44 第二次提交<br>s 1d911be 第三次提交<br>s 77e3eca 第四次提交</p></blockquote><p><strong>蓝色区域</strong>，是每条 commit 前的命令的代码说明</p><blockquote><p>pick：保留该 commit（缩写:p）</p><p>reword：保留该 commit，但我需要修改该 commit 的注释（缩写:r）</p><p>edit：保留该 commit, 但我要停下来修改该提交(不仅仅修改注释)（缩写:e）</p><p>squash：将该 commit 和前一个 commit 合并（缩写:s）</p><p>fixup：将该 commit 和前一个 commit 合并，但我不要保留该提交的注释信息（缩写:f）</p><p>exec：执行 shell 命令（缩写:x）</p><p>drop：我要丢弃该 commit（缩写:d）</p></blockquote><p>按<code>:wq</code> 保存退出后，进入备注编辑</p><h3 id="03-备注编辑"><a href="#03-备注编辑" class="headerlink" title="03 备注编辑"></a>03 备注编辑</h3><p><img src="https://s2.loli.net/2022/04/07/QxqmyleCWUOSZ2D.png" alt="image-20220407183350736"></p><p><strong>修改备注</strong>，可以修改你想要备注后</p><p><img src="https://s2.loli.net/2022/04/07/DCtOoUlTjg98WRN.png" alt="image-20220407183533240"></p><p>按<code>:wq</code>提交</p><h3 id="04-Git-log"><a href="#04-Git-log" class="headerlink" title="04 Git log"></a>04 Git log</h3><p><img src="https://s2.loli.net/2022/04/07/NfyVOUXWs3dtL9m.png" alt="image-20220407183646592"></p><p><strong>可以很清晰看到，2、3、4 提交合并成一条提交了</strong></p><h3 id="05-扩展"><a href="#05-扩展" class="headerlink" title="05 扩展"></a>05 扩展</h3><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">git pull -rebase [repo]<br></code></pre></div></td></tr></table></figure><p>当你和 fork 过来的原仓库产生冲突时，可以使用这个命令，<code>pull</code> 拉取过来的时候，自动帮你 <code>rebase</code>,</p><p>如果没有冲突则合并成功，如果产生冲突后，则在<code>IDE</code>消除冲突。</p><p>另外， <code>rebase</code> 的底层，先 <code>git reset</code> 在进行 <code>git merge</code></p>]]></content>
    
    
    <categories>
      
      <category>Git</category>
      
    </categories>
    
    
    <tags>
      
      <tag>rebase</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>WebSocket 浅实现一个简易聊天室</title>
    <link href="/2022/04/20/WebSocket%20%20%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AA%E7%AE%80%E6%98%93%E8%81%8A%E5%A4%A9%E5%AE%A4/"/>
    <url>/2022/04/20/WebSocket%20%20%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AA%E7%AE%80%E6%98%93%E8%81%8A%E5%A4%A9%E5%AE%A4/</url>
    
    <content type="html"><![CDATA[<h2 id="WebSocket-浅实现一个简易聊天室"><a href="#WebSocket-浅实现一个简易聊天室" class="headerlink" title="WebSocket 浅实现一个简易聊天室"></a>WebSocket 浅实现一个简易聊天室</h2><h3 id="01-WebSocket-特点"><a href="#01-WebSocket-特点" class="headerlink" title="01 WebSocket 特点"></a>01 WebSocket 特点</h3><p><strong>WebSocket 协议</strong>，是全双工协议。它的特点：</p><ul><li><p>控制开销</p></li><li><p>实时通讯</p></li><li><p>ws(wss)://</p></li><li><p>支持文本，二进制传输</p></li><li><p>基于 TCP 之下，服务端实现比较简单</p></li></ul><h3 id="02-实现想法"><a href="#02-实现想法" class="headerlink" title="02 实现想法"></a>02 实现想法</h3><p><img src="https://s2.loli.net/2022/04/02/uaReB9NHbjXvQMU.png" alt="image-20220402175739368"></p><h3 id="03-客户端的关键实现细节"><a href="#03-客户端的关键实现细节" class="headerlink" title="03 客户端的关键实现细节"></a>03 客户端的关键实现细节</h3><blockquote><p>前端浏览器，本身自带有 <code>WebSocket</code> 对象 ，所以通过 <code>new</code> 的形式，就可以得到 <code>ws</code> 实例</p></blockquote><ul><li>比如，用户第一次进入聊天室</li></ul><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-variable language_">this</span>.<span class="hljs-property">ws</span>.<span class="hljs-property">onopen</span> = <span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;onopen&#x27;</span>, <span class="hljs-variable language_">this</span>.<span class="hljs-property">ws</span>.<span class="hljs-property">readyState</span>)<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">roomOpen</span> = <span class="hljs-literal">true</span><br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">ws</span>.<span class="hljs-title function_">send</span>(<span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>(&#123;<br>        <span class="hljs-attr">userId</span>: <span class="hljs-variable language_">this</span>.<span class="hljs-property">userName</span>,<br>        <span class="hljs-attr">userName</span>: <span class="hljs-variable language_">this</span>.<span class="hljs-property">nickname</span>,<br>        <span class="hljs-attr">roomId</span>: item.<span class="hljs-property">roomId</span>,<br>        <span class="hljs-attr">roomName</span>: item.<span class="hljs-property">name</span>,<br>        <span class="hljs-attr">event</span>: <span class="hljs-string">&#x27;login&#x27;</span>,<br>    &#125;))<br></code></pre></div></td></tr></table></figure><ul><li>比如，用户界面接收其他用户的发送的消息</li></ul><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-variable language_">this</span>.<span class="hljs-property">ws</span>.<span class="hljs-property">onmessage</span> = <span class="hljs-function">(<span class="hljs-params">message</span>) =&gt;</span> &#123;<br>  <span class="hljs-keyword">const</span> data = <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">parse</span>(message.<span class="hljs-property">data</span>)<br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">onlineNum</span> = data.<span class="hljs-property">num</span><br>  <span class="hljs-keyword">if</span> (data.<span class="hljs-property">event</span> === <span class="hljs-string">&#x27;login&#x27;</span>) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">msgList</span>.<span class="hljs-title function_">push</span>(&#123;<br>      <span class="hljs-attr">content</span>: <span class="hljs-string">`欢迎<span class="hljs-subst">$&#123;data.userName&#125;</span>进入<span class="hljs-subst">$&#123;data.roomName&#125;</span>房间～`</span>,<br>    &#125;)<br>  &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (data.<span class="hljs-property">event</span> === <span class="hljs-string">&#x27;logout&#x27;</span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;logout&#x27;</span>, data)<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">msgList</span>.<span class="hljs-title function_">push</span>(&#123;<br>      <span class="hljs-attr">content</span>: <span class="hljs-string">`<span class="hljs-subst">$&#123;data.userName&#125;</span>离开房间`</span>,<br>    &#125;)<br>  &#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-keyword">const</span> self = <span class="hljs-variable language_">this</span>.<span class="hljs-property">userId</span> === data.<span class="hljs-property">userId</span><br>    <span class="hljs-keyword">if</span> (self) <span class="hljs-keyword">return</span><br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">msgList</span>.<span class="hljs-title function_">push</span>(&#123;<br>      <span class="hljs-attr">name</span>: data.<span class="hljs-property">userName</span>,<br>      <span class="hljs-attr">self</span>: <span class="hljs-literal">false</span>,<br>      <span class="hljs-attr">content</span>: data.<span class="hljs-property">content</span>,<br>    &#125;)<br>  &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><ul><li>当前用户退出界面</li></ul><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-variable language_">this</span>.<span class="hljs-property">ws</span>.<span class="hljs-property">onclose</span> = <span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">removeAllTimeJob</span>()<br>  <span class="hljs-title class_">Toast</span>(<span class="hljs-string">&#x27;您已离开房间&#x27;</span>)<br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">roomOpen</span> = <span class="hljs-literal">false</span><br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">msgList</span> = []<br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">onlineNum</span> = <span class="hljs-number">0</span><br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="04-服务端的实现"><a href="#04-服务端的实现" class="headerlink" title="04 服务端的实现"></a>04 服务端的实现</h3><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-keyword">const</span> <span class="hljs-title class_">Websocket</span> = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;ws&#x27;</span>)<br><br><span class="hljs-keyword">const</span> wss = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Websocket</span>.<span class="hljs-title class_">Server</span>(&#123; <span class="hljs-attr">port</span>: <span class="hljs-number">9001</span> &#125;)<br><br><span class="hljs-comment">// 存放所有的房间信息</span><br><span class="hljs-keyword">const</span> group = &#123;&#125;<br><br><span class="hljs-comment">// 心跳检测有效时间</span><br><span class="hljs-keyword">const</span> heartBeatTime = <span class="hljs-number">50000</span><br><br>wss.<span class="hljs-title function_">on</span>(<span class="hljs-string">&#x27;connection&#x27;</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params">ws</span>) &#123;<br>  ws.<span class="hljs-property">isAlive</span> = <span class="hljs-literal">true</span><br>  ws.<span class="hljs-property">heartBeatTimeIntervalObj</span> = -<span class="hljs-number">1</span><br>  ws.<span class="hljs-property">heartBeatTimeoutObj</span> = -<span class="hljs-number">1</span><br><br>  <span class="hljs-comment">// 监听心跳定时器，如果长时间没有心跳，自动断开连接</span><br>  <span class="hljs-keyword">const</span> <span class="hljs-title function_">setHeartBeatTimeout</span> = (<span class="hljs-params"></span>) =&gt; &#123;<br>    <span class="hljs-keyword">if</span> (ws.<span class="hljs-property">heartBeatTimeoutObj</span> !== -<span class="hljs-number">1</span>) &#123;<br>      <span class="hljs-built_in">clearTimeout</span>(ws.<span class="hljs-property">heartBeatTimeoutObj</span>)<br>      ws.<span class="hljs-property">heartBeatTimeoutObj</span> = -<span class="hljs-number">1</span><br>    &#125;<br>    ws.<span class="hljs-property">heartBeatTimeoutObj</span> = <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>      ws.<span class="hljs-title function_">close</span>()<br>      ws.<span class="hljs-property">isAlive</span> = <span class="hljs-literal">false</span><br>    &#125;, heartBeatTime)<br>  &#125;<br>  <span class="hljs-comment">// 重置心跳定时器</span><br>  <span class="hljs-title function_">setHeartBeatTimeout</span>()<br><br>  ws.<span class="hljs-title function_">on</span>(<span class="hljs-string">&#x27;message&#x27;</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params">message</span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;server receive message: &#x27;</span>, message.<span class="hljs-title function_">toString</span>())<br>    <span class="hljs-keyword">const</span> data = <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">parse</span>(message.<span class="hljs-title function_">toString</span>())<br>    <span class="hljs-comment">// 重置心跳定时器</span><br>    <span class="hljs-title function_">setHeartBeatTimeout</span>()<br>    <span class="hljs-comment">// 用户初次进入聊天室</span><br>    <span class="hljs-keyword">if</span> (data.<span class="hljs-property">event</span> === <span class="hljs-string">&#x27;login&#x27;</span>) &#123;<br>      ws.<span class="hljs-property">enterInfo</span> = data<br>    &#125;<br><br>    <span class="hljs-comment">// 接收到客户端发来的心跳消息，则重置心跳定时器</span><br>    <span class="hljs-keyword">if</span> (data.<span class="hljs-property">event</span> === <span class="hljs-string">&#x27;heartBeat&#x27;</span> &amp;&amp; data.<span class="hljs-property">content</span> === <span class="hljs-string">&#x27;ping&#x27;</span>) &#123;<br>      ws.<span class="hljs-property">isAlive</span> = <span class="hljs-literal">true</span><br><br>      <span class="hljs-keyword">if</span> (ws.<span class="hljs-property">heartBeatTimeoutObj</span> === -<span class="hljs-number">1</span>) &#123;<br>        <span class="hljs-built_in">clearTimeout</span>(ws.<span class="hljs-property">heartBeatTimeoutObj</span>)<br>        ws.<span class="hljs-property">heartBeatTimeoutObj</span> = -<span class="hljs-number">1</span><br>      &#125;<br>      <span class="hljs-comment">// 重置心跳定时器</span><br>      <span class="hljs-title function_">setHeartBeatTimeout</span>()<br><br>      ws.<span class="hljs-title function_">send</span>(<br>        <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>(&#123;<br>          <span class="hljs-attr">event</span>: <span class="hljs-string">&#x27;heartBeat&#x27;</span>,<br>          <span class="hljs-attr">content</span>: <span class="hljs-string">&#x27;pong&#x27;</span>,<br>        &#125;)<br>      )<br>      <span class="hljs-keyword">return</span><br>    &#125;<br><br>    <span class="hljs-comment">// 计算聊天室人数</span><br>    <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> ws.<span class="hljs-property">roomId</span> === <span class="hljs-string">&#x27;undefined&#x27;</span> &amp;&amp; data.<span class="hljs-property">roomId</span>) &#123;<br>      ws.<span class="hljs-property">roomId</span> = data.<span class="hljs-property">roomId</span><br>      <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> group[ws.<span class="hljs-property">roomId</span>] === <span class="hljs-string">&#x27;undefined&#x27;</span>) &#123;<br>        group[ws.<span class="hljs-property">roomId</span>] = <span class="hljs-number">1</span><br>      &#125; <span class="hljs-keyword">else</span> &#123;<br>        group[ws.<span class="hljs-property">roomId</span>]++<br>      &#125;<br>    &#125;<br><br>    data.<span class="hljs-property">num</span> = group[ws.<span class="hljs-property">roomId</span>]<br><br>    <span class="hljs-comment">// 判断当前收到消息，是否为用户所在的聊天室</span><br>    wss.<span class="hljs-property">clients</span>.<span class="hljs-title function_">forEach</span>(<span class="hljs-function">(<span class="hljs-params">client</span>) =&gt;</span> &#123;<br>      <span class="hljs-keyword">if</span> (client.<span class="hljs-property">readyState</span> === <span class="hljs-title class_">Websocket</span>.<span class="hljs-property">OPEN</span> &amp;&amp; client.<span class="hljs-property">roomId</span> === ws.<span class="hljs-property">roomId</span>) &#123;<br>        client.<span class="hljs-title function_">send</span>(<span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>(data))<br>      &#125;<br>    &#125;)<br>  &#125;)<br><br>  <span class="hljs-comment">// 用户离开房间</span><br>  ws.<span class="hljs-title function_">on</span>(<span class="hljs-string">&#x27;close&#x27;</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params">message</span>) &#123;<br>    group[ws.<span class="hljs-property">roomId</span>]--<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;server close: &#x27;</span>, message)<br><br>    <span class="hljs-comment">// 判断用户离开的哪个聊天室，发送退出房间的消息</span><br>    wss.<span class="hljs-property">clients</span>.<span class="hljs-title function_">forEach</span>(<span class="hljs-keyword">function</span> <span class="hljs-title function_">each</span>(<span class="hljs-params">client</span>) &#123;<br>      <span class="hljs-keyword">if</span> (<br>        client !== ws &amp;&amp;<br>        client.<span class="hljs-property">readyState</span> === <span class="hljs-title class_">Websocket</span>.<span class="hljs-property">OPEN</span> &amp;&amp;<br>        client.<span class="hljs-property">roomId</span> === ws.<span class="hljs-property">roomId</span><br>      ) &#123;<br>        client.<span class="hljs-title function_">send</span>(<br>          <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>(&#123;<br>            ...ws.<span class="hljs-property">enterInfo</span>,<br>            <span class="hljs-attr">event</span>: <span class="hljs-string">&#x27;logout&#x27;</span>,<br>            <span class="hljs-attr">num</span>: group[ws.<span class="hljs-property">roomId</span>],<br>          &#125;)<br>        )<br>      &#125;<br>    &#125;)<br>  &#125;)<br>&#125;)<br></code></pre></div></td></tr></table></figure><h3 id="04-心跳机制"><a href="#04-心跳机制" class="headerlink" title="04 心跳机制"></a>04 心跳机制</h3><blockquote><p>引入心跳机制，是因为于在长连接的场景下，客户端和服务端并不是一直处于通信状态，如果双方长期没有沟通则双方都不清楚对方目前的状态，所以需要发送一段很小的报文告诉对方“我还活着”。</p></blockquote><p><img src="https://s2.loli.net/2022/04/02/yvG8AElrSpwxjD3.png" alt="image-20220402181042899"></p><p><strong>其他目的</strong></p><p>服务端检测到某个客户端迟迟没有心跳过来可以主动关闭通道，让它下线；<br>客户端检测到某个服务端迟迟没有响应心跳也能重连获取一个新的连接。</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-comment">// 监听心跳定时器，如果长时间没有心跳，自动断开连接</span><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">setHeartBeatTimeout</span> = (<span class="hljs-params"></span>) =&gt; &#123;<br>  <span class="hljs-keyword">if</span> (ws.<span class="hljs-property">heartBeatTimeoutObj</span> !== -<span class="hljs-number">1</span>) &#123;<br>    <span class="hljs-built_in">clearTimeout</span>(ws.<span class="hljs-property">heartBeatTimeoutObj</span>)<br>    ws.<span class="hljs-property">heartBeatTimeoutObj</span> = -<span class="hljs-number">1</span><br>  &#125;<br>  ws.<span class="hljs-property">heartBeatTimeoutObj</span> = <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>    ws.<span class="hljs-title function_">close</span>()<br>    ws.<span class="hljs-property">isAlive</span> = <span class="hljs-literal">false</span><br>  &#125;, heartBeatTime)<br>&#125;<br><span class="hljs-comment">// 重置心跳定时器</span><br><span class="hljs-title function_">setHeartBeatTimeout</span>()<br></code></pre></div></td></tr></table></figure><blockquote><p>仓库地址“<a href="https://git.kkgroup.cn/huanghuafeng/websocket-chatroom">黄华峰 / WebSocket-chatroom · GitLab (kkgroup.cn)</a></p></blockquote>]]></content>
    
    
    <categories>
      
      <category>WebSocket</category>
      
    </categories>
    
    
    <tags>
      
      <tag>WebSocket</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>antd 按需引入</title>
    <link href="/2022/04/20/antd%20%E6%8C%89%E9%9C%80%E5%BC%95%E5%85%A5/"/>
    <url>/2022/04/20/antd%20%E6%8C%89%E9%9C%80%E5%BC%95%E5%85%A5/</url>
    
    <content type="html"><![CDATA[<h2 id="antd-按需引入"><a href="#antd-按需引入" class="headerlink" title="antd 按需引入"></a>antd 按需引入</h2><h3 id="01-CRA-创建项目后"><a href="#01-CRA-创建项目后" class="headerlink" title="01 CRA 创建项目后"></a>01 CRA 创建项目后</h3><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-comment">// 暴露 config 文件夹</span><br>npm run eject<br></code></pre></div></td></tr></table></figure><h3 id="02-安装-antd-和-babel-plugin-import"><a href="#02-安装-antd-和-babel-plugin-import" class="headerlink" title="02 安装 antd 和 babel-plugin-import"></a>02 安装 antd 和 babel-plugin-import</h3><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-comment">// 安装 adtd 以及 babel-plugin-import</span><br>npm i babel-plugin-<span class="hljs-keyword">import</span> -D<br>npm i antd<br></code></pre></div></td></tr></table></figure><h3 id=""><a href="#" class="headerlink" title=""></a></h3><h3 id="03-配置-antd-按需加载"><a href="#03-配置-antd-按需加载" class="headerlink" title="03 配置 antd 按需加载"></a>03 配置 antd 按需加载</h3><p>找到下列文件增加配置</p><ul><li>webpack.config.js</li></ul><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-comment">// 1.找到这个位置</span><br><span class="hljs-keyword">const</span> sassRegex = <span class="hljs-regexp">/\.(scss|sass)$/</span>;<br><span class="hljs-keyword">const</span> sassModuleRegex = <span class="hljs-regexp">/\.module\.(scss|sass)$/</span>;<br><span class="hljs-comment">// 1.加入下列配置</span><br><span class="hljs-keyword">const</span> lessRegex =<span class="hljs-regexp">/\.less$/</span>;<br><span class="hljs-keyword">const</span> lessModuleRegex=<span class="hljs-regexp">/\.module\.less$/</span>;<br><br><br><span class="hljs-comment">// 2.找到这个位置</span><br>&#123;<br>    <span class="hljs-attr">test</span>: cssModuleRegex,<br>    <span class="hljs-attr">use</span>: <span class="hljs-title function_">getStyleLoaders</span>(&#123;<br>    <span class="hljs-attr">importLoaders</span>: <span class="hljs-number">1</span>,<br>    <span class="hljs-attr">sourceMap</span>: isEnvProduction &amp;&amp; shouldUseSourceMap,<br>    <span class="hljs-attr">modules</span>: <span class="hljs-literal">true</span>,<br>    <span class="hljs-attr">getLocalIdent</span>: getCSSModuleLocalIdent,<br>    &#125;),<br> &#125;,<br> <span class="hljs-comment">// 2.加入下列配置</span><br> &#123;<br>     <span class="hljs-attr">test</span>: lessRegex,<br>         <span class="hljs-attr">exclude</span>: lessModuleRegex,<br>             <span class="hljs-attr">use</span>: <span class="hljs-title function_">getStyleLoaders</span>(&#123;<br>                 <span class="hljs-attr">importLoaders</span>: <span class="hljs-number">2</span>,<br>                 <span class="hljs-attr">sourceMap</span>: isEnvProduction &amp;&amp; shouldUseSourceMap,<br>             &#125;),<br>                 <span class="hljs-attr">sideEffects</span>: <span class="hljs-literal">true</span>,<br> &#125;,<br> &#123;<br>     <span class="hljs-attr">test</span>: lessModuleRegex,<br>         <span class="hljs-attr">use</span>: <span class="hljs-title function_">getStyleLoaders</span>(&#123;<br>             <span class="hljs-attr">importLoaders</span>: <span class="hljs-number">2</span>,<br>             <span class="hljs-attr">modules</span>: <span class="hljs-literal">true</span>,<br>             <span class="hljs-attr">getLocalIdent</span>: getCSSModuleLocalIdent,<br>             <span class="hljs-attr">sourceMap</span>: isEnvProduction &amp;&amp; shouldUseSourceMap,<br>         &#125;),<br> &#125;,<br><br></code></pre></div></td></tr></table></figure><ul><li>package.json</li></ul><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-string">&quot;babel&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;presets&quot;</span>: [<br>      <span class="hljs-string">&quot;react-app&quot;</span><br>    ],<br><span class="hljs-comment">//加入以下信息</span><br>    <span class="hljs-string">&quot;plugins&quot;</span>: [<br>      [<br>        <span class="hljs-string">&quot;@babel/plugin-proposal-decorators&quot;</span>,<br>        &#123;<br>          <span class="hljs-string">&quot;legacy&quot;</span>: <span class="hljs-literal">true</span><br>        &#125;<br>      ],<br>      [<br>        <span class="hljs-string">&quot;import&quot;</span>,<br>        &#123;<br>          <span class="hljs-string">&quot;libraryName&quot;</span>: <span class="hljs-string">&quot;antd&quot;</span>,<br>          <span class="hljs-string">&quot;libraryDirectory&quot;</span>: <span class="hljs-string">&quot;es&quot;</span>,<br>          <span class="hljs-string">&quot;style&quot;</span>: <span class="hljs-string">&quot;css&quot;</span><br>        &#125;<br>      ]<br>    ]<br>  &#125;<br></code></pre></div></td></tr></table></figure><h3 id="04-测试"><a href="#04-测试" class="headerlink" title="04 测试"></a>04 测试</h3><figure class="highlight jsx"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs jsx"><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">Button</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;antd&#x27;</span><br>;<span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;primary&quot;</span>&gt;</span>测试<span class="hljs-tag">&lt;/<span class="hljs-name">Button</span>&gt;</span></span><br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>antd</category>
      
    </categories>
    
    
    <tags>
      
      <tag>antd</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>如何正确姿势使用 Hooks 优化性能? 🤔</title>
    <link href="/2022/04/20/%E5%85%B3%E4%BA%8E%20React%20Hook%20%E6%80%9D%E8%80%83%E7%9A%84%E6%80%BB%E7%BB%93/"/>
    <url>/2022/04/20/%E5%85%B3%E4%BA%8E%20React%20Hook%20%E6%80%9D%E8%80%83%E7%9A%84%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<h2 id="如何正确姿势使用-Hooks-优化性能-🤔"><a href="#如何正确姿势使用-Hooks-优化性能-🤔" class="headerlink" title="如何正确姿势使用 Hooks 优化性能? 🤔"></a>如何正确姿势使用 Hooks 优化性能? 🤔</h2><blockquote><p>前言，你真的了解 Hooks 么? 今天看了一篇关于 Hooks 使用误区的一篇文章，ahooks 的作者从特别的角度，带我们重新认识 Hooks</p></blockquote><p>文章 Url: <a href="https://mp.weixin.qq.com/s/UqdFCDwf5KN4oZ-XwcTBnA">React Hooks 使用误区，驳官方文档 (qq.com)</a></p><h3 id="01-重新认识-Hooks"><a href="#01-重新认识-Hooks" class="headerlink" title="01 重新认识 Hooks"></a>01 重新认识 Hooks</h3><p>刚接触 <code>Hooks</code> 那会，大概看了下官方文档，官方一些 Hooks 可以用来优化性能，就屁颠屁颠到处使用 <code>useState</code>、<code>useMemo</code>、<code>useCallback</code> ，但是其实不然，<strong>优化性能这东西需要看场景的</strong>，并不是所有场景都适合得。例如，在很简单的基础类型计算时，可能 <code>useMemo</code> 并不划算，请问算 <code>a+b</code> 的消耗大？还是记录 <code>a/b</code> ，并比较<code>a/b</code> 是否变化的消耗大？反而还<strong>增加负担</strong>。</p><h3 id="02-总结"><a href="#02-总结" class="headerlink" title="02 总结"></a>02 总结</h3><blockquote><p>上面的文章，作者讲很详细了。这边主要对上面的文章进行一个总结，以便后面查看：</p></blockquote><ul><li>Hooks 依赖，只有变化时，需要重新执行 useEffect 的变量，才要放到 deps 中。而不是 useEffect 用到的变量都放到 deps 中。</li><li>deps 参数并不可以解决闭包问题，可以使用 <code>useRef</code><ul><li>正常情况不会有闭包问题</li><li>延迟调用会存在闭包问题<ol><li>使用 <code>setTimeout</code>、<code>setInterval</code>、<code>Promise.then</code> 等</li><li><code>useEffect</code> 的卸载函数</li></ol></li></ul></li></ul><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-comment">// 通过 ref 来记忆最新的 count</span><br><span class="hljs-keyword">const</span> countRef = <span class="hljs-title function_">useRef</span>(count)<br>countRef.<span class="hljs-property">current</span> = count<br><br><span class="hljs-title function_">useEffect</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-keyword">const</span> timer = <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(countRef.<span class="hljs-property">current</span>)<br>  &#125;, <span class="hljs-number">3000</span>)<br>  <span class="hljs-keyword">return</span> <span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-built_in">clearTimeout</span>(timer)<br>  &#125;<br>&#125;, [])<br></code></pre></div></td></tr></table></figure><ul><li><p>不建议使用 <strong><code>useCallback</code></strong> ，是要和 <code>shouldComponentUpdate/React.memo</code> 配套使用的，除非有个别非常复杂的组件，单独使用即可。</p></li><li><p><strong><code>useMemo</code></strong> 建议大量使用，但并不是无节制的使用(简单基础运算)</p></li><li><p><strong><code>useState</code></strong> 的正确使用姿势</p><ul><li><p>能通过<code>state</code>或<code>prop</code> 计算，就不需要使用 <code>useState</code></p></li><li><p>保证数据源唯一</p><ul><li>不要既存在 <code>redux</code> 中，又在组件中定义了一个 <code>state</code> 存储。</li><li>不要既存在父级组件中，又在当前组件中定义了一个 <code>state</code> 存储。</li><li>不要既存在 <code>url query</code> 中，又在组件中定义了一个 <code>state</code> 存储。</li></ul></li><li><p>​ <code>useState</code> 适当合并，不需要拆分过细，增加可读性</p></li></ul></li></ul><h3 id="03-关于性能优化文章"><a href="#03-关于性能优化文章" class="headerlink" title="03 关于性能优化文章"></a>03 关于性能优化文章</h3><p><a href="https://mp.weixin.qq.com/s/nrX-tHSfWaSZJrUmYbPugQ">送给 React 开发者十九条性能优化建议 (qq.com)</a></p>]]></content>
    
    
    <categories>
      
      <category>React</category>
      
      <category>Hook</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Hook</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Nest.js 环境变量配置</title>
    <link href="/2022/04/20/Nesj.js%20%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%E9%85%8D%E7%BD%AE/"/>
    <url>/2022/04/20/Nesj.js%20%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%E9%85%8D%E7%BD%AE/</url>
    
    <content type="html"><![CDATA[<h2 id="Nest-js-环境变量配置"><a href="#Nest-js-环境变量配置" class="headerlink" title="Nest.js 环境变量配置"></a>Nest.js 环境变量配置</h2><blockquote><p>前言，程序需要跑在不同环境下，所以就会需要不同的环境变量,例如生产环境,测试环境，不同环境的，里面变量也是一样的，比如说数据库的信息，端口号等等。配置不同的环境变量也是为了实现软编码，防止一些重要的参数泄漏</p></blockquote><p>在 <code>Nest</code> 中最佳方案创建一个 <code>ConfigModule</code>，该 <code>ConfigModule</code> 公开一个 <code>ConfigService</code> ，在 <code>ConfigService</code> 加载特有环境的 <code>.env</code> 文件。 <code>Nest</code> 提供了 <code>@nestjs/config</code> 开箱即用的依赖包。</p><p>引自<a href="https://iiong.com/nest-js-environment-variable-configuration-and-serialization/">Nest.js 环境变量配置和序列化 – 淮城一只猫 (iiong.com)</a></p><h3 id="01-安装"><a href="#01-安装" class="headerlink" title="01 安装"></a>01 安装</h3><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">npm i @nestjs/config<br></code></pre></div></td></tr></table></figure><h3 id="02-配置"><a href="#02-配置" class="headerlink" title="02 配置"></a>02 配置</h3><p>在 <code>app.module.ts</code> 中的 <code>forRoot</code> 静态方法配置环境变量 <code>.env</code> 解析：</p><figure class="highlight tsx"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs tsx"><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">Module</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@nestjs/common&#x27;</span><br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">ConfigModule</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@nestjs/config&#x27;</span><br><br><span class="hljs-meta">@Module</span>(&#123;<br>  <span class="hljs-attr">imports</span>: [<span class="hljs-title class_">ConfigModule</span>.<span class="hljs-title function_">forRoot</span>()],<br>&#125;)<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AppModule</span> &#123;&#125;<br></code></pre></div></td></tr></table></figure><p>在 <code>同级src</code> 新建 <code>.env</code> 文件:</p><figure class="highlight ini"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs ini"><span class="hljs-attr">DB_HOST</span>=localhost<br><span class="hljs-attr">DB_PORT</span>=<span class="hljs-number">3306</span><br><span class="hljs-attr">DB_USER</span>=xxx<br><span class="hljs-attr">DB_PASSWORD</span>=xxx<br><span class="hljs-attr">DB_DATABASE</span>=xxxx<br></code></pre></div></td></tr></table></figure><ul><li><strong>按需引入 .module.ts 文件引入</strong></li></ul><figure class="highlight tsx"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs tsx"><span class="hljs-comment">// 在需要 *.module.ts 文件引入</span><br><span class="hljs-meta">@Module</span>(&#123;<br>  <span class="hljs-attr">imports</span>: [<span class="hljs-title class_">ConfigModule</span>],<br>  <span class="hljs-comment">// ...</span><br>&#125;)<br></code></pre></div></td></tr></table></figure><ul><li><strong>全局引入</strong></li></ul><p><code>app.module.ts</code> 全局引入</p><figure class="highlight tsx"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs tsx"><span class="hljs-keyword">import</span> configuration <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./config/configuration&#x27;</span><br><br><span class="hljs-meta">@Module</span>(&#123;<br>  <span class="hljs-attr">imports</span>: [<br>    <span class="hljs-title class_">ConfigModule</span>.<span class="hljs-title function_">forRoot</span>(&#123;<br>      <span class="hljs-attr">isGlobal</span>: <span class="hljs-literal">true</span>,<br>      <span class="hljs-attr">load</span>: [configuration],<br>    &#125;),<br>  ],<br>&#125;)<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AppModule</span> &#123;&#125;<br></code></pre></div></td></tr></table></figure><h3 id="03-读取配置"><a href="#03-读取配置" class="headerlink" title="03 读取配置"></a>03 读取配置</h3><p>在需要用到配置地方，在构造函数注入使用：</p><figure class="highlight ts"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs ts"><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">ConfigService</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@nestjs/config&#x27;</span><br><br><span class="hljs-title function_">constructor</span>(<span class="hljs-params"><span class="hljs-keyword">private</span> configService: ConfigService</span>) &#123;&#125;<br></code></pre></div></td></tr></table></figure><p>使用配置：</p><figure class="highlight typescript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs typescript"><span class="hljs-keyword">const</span> dbUser = <span class="hljs-variable language_">this</span>.<span class="hljs-property">configService</span>.<span class="hljs-property">get</span>&lt;<span class="hljs-built_in">string</span>&gt;(<span class="hljs-string">&#x27;DB_USER&#x27;</span>)<br><span class="hljs-keyword">const</span> dbHost = <span class="hljs-variable language_">this</span>.<span class="hljs-property">configService</span>.<span class="hljs-property">get</span>&lt;<span class="hljs-built_in">string</span>&gt;(<span class="hljs-string">&#x27;DB_HOST&#x27;</span>)<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Node</category>
      
      <category>Nest</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Nest</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Vlist 虚拟网格组件 -- 解读🤓</title>
    <link href="/2022/03/30/Vlist%20%E8%99%9A%E6%8B%9F%E7%BD%91%E6%A0%BC%E7%BB%84%E4%BB%B6%20--%20%E8%A7%A3%E8%AF%BB/"/>
    <url>/2022/03/30/Vlist%20%E8%99%9A%E6%8B%9F%E7%BD%91%E6%A0%BC%E7%BB%84%E4%BB%B6%20--%20%E8%A7%A3%E8%AF%BB/</url>
    
    <content type="html"><![CDATA[<h2 id="Vlist-虚拟网格组件-–-解读-🤓"><a href="#Vlist-虚拟网格组件-–-解读-🤓" class="headerlink" title="Vlist 虚拟网格组件 – 解读 🤓"></a>Vlist 虚拟网格组件 – 解读 🤓</h2><blockquote><p>前言， 前几天刚完成一个需求，长（网格）列表优化，主要参考了虚拟列表原理。不同的是，虚拟列表是一维线性下来的，而虚拟网格是二维，要考虑不仅是屏幕高度，还要屏幕的宽度。不废话辽，上干货。</p></blockquote><h3 id="01-先浅用下，感受下它的神奇"><a href="#01-先浅用下，感受下它的神奇" class="headerlink" title="01 先浅用下，感受下它的神奇"></a>01 先浅用下，感受下它的神奇</h3><img src="https://s2.loli.net/2022/03/30/BteKUqVIXaC8JTk.gif" alt="虚拟网格gif" style="zoom: 50%;" /><blockquote><p>可以很清晰看到，随着页面的滚动，DOM 也是跟着渲染的，极大减少了浏览器的开销（卡顿是因为录制 gif,只有 10fps😅 ）</p></blockquote><h3 id="02-虚拟网格实践"><a href="#02-虚拟网格实践" class="headerlink" title="02 虚拟网格实践"></a>02 虚拟网格实践</h3><blockquote><p>虚拟网格的原理： 其实就是根据外层容器尺寸，进行数据分组，以组为单位渲染数据列（column - n），然后剩下就是和虚拟列表的原理大致一样嘚</p></blockquote><p><img src="https://s2.loli.net/2022/03/30/WQPjyoCwNh9JE3n.png" alt="image-20220330181540874"></p><ol><li><p>首先，明确几个<strong>变量</strong></p><ul><li><p><strong>column</strong> ：内层容器纵向最大可放置的数量</p></li><li><p><strong>row</strong>：内层容器横向最大可放置的数量</p></li><li><p><strong>itemWidth</strong>：子组件的 width</p></li><li><p><strong>itemHeight</strong>: 子组件的 height</p></li><li><p><strong>startGroupIndex:</strong> 渲染，开始渲染的位置（组）</p></li><li><p><strong>endtGroupIndex:</strong> 渲染，结束渲染的位置（组）</p></li></ul></li><li><p>我们只对可视层做渲染，但是为了保持整个容器像渲染正常长列表一样，里面的容器还需要保持原有的高度。这边把 <code>Html</code> 设计这样</p><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 外层容器 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;vListContainer&quot;</span>&gt;</span><br>  <span class="hljs-comment">&lt;!-- 内层容器 --&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;phantomContent&quot;</span>&gt;</span><br>    ...<br>    <span class="hljs-comment">&lt;!-- column-1 --&gt;</span><br>    <span class="hljs-comment">&lt;!-- column-2 --&gt;</span><br>    <span class="hljs-comment">&lt;!-- column-3 --&gt;</span><br>    ....<br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></div></td></tr></table></figure></li><li><p>通过计算<code>_.chunk(itemsArray, column )</code>，拿到分组的数组 <code>groupItems</code></p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-comment">// groupItems 二维数组</span><br>;[[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>][(<span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>)][(<span class="hljs-number">7</span>, <span class="hljs-number">8</span>)]]<br></code></pre></div></td></tr></table></figure></li><li><p>再通过监听 <code>外层容器 onscroll</code> 计算出 <code>startGroupIndex</code> 和 <code>endtGroupIndex</code></p></li><li><p>通过 <code>renderDisplayContent</code> 渲染到页面上</p></li><li><p>另外当页面发生变化时，通过监听<code>resize</code> 事件（computeGridSize）更新 <code>column</code>，<code>row</code>，<code>groupItems</code>，以重新渲染</p></li></ol><h3 id="03-虚拟网格组件源码细节"><a href="#03-虚拟网格组件源码细节" class="headerlink" title="03 虚拟网格组件源码细节"></a>03 虚拟网格组件源码细节</h3><figure class="highlight jsx"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs jsx"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span>, &#123; useState, useCallback, useMemo, useEffect &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span><br><span class="hljs-keyword">import</span> useThrottle <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;hooks/useThrottle&#x27;</span><br><span class="hljs-keyword">import</span> _ <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;lodash&#x27;</span><br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">VListStyle</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./style&#x27;</span><br><span class="hljs-keyword">import</span> &#123; useRef &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span><br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@description</span>: 虚拟列表</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> &#123;<span class="hljs-type">*</span>&#125; containerRef 外容器ref</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> &#123;<span class="hljs-type">*</span>&#125; itemsArray 列表数据</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> &#123;<span class="hljs-type">*</span>&#125; children子组件</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> &#123;<span class="hljs-type">*</span>&#125; containerInitHeight 外容器初始高度</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> &#123;<span class="hljs-type">*</span>&#125; containeInitWidth 外容器初始宽度</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> &#123;<span class="hljs-type">*</span>&#125; itemHeight 子组件高度</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> &#123;<span class="hljs-type">*</span>&#125; itemWidth子组件宽度</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> &#123;<span class="hljs-type">*</span>&#125; BufferSize 列表缓冲区大小</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> &#123;<span class="hljs-type">*</span>&#125;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">VList</span>(<span class="hljs-params">&#123;</span><br><span class="hljs-params">  containerRef,</span><br><span class="hljs-params">  itemsArray = [],</span><br><span class="hljs-params">  children,</span><br><span class="hljs-params">  containerInitHeight,</span><br><span class="hljs-params">  containeInitWidth,</span><br><span class="hljs-params">  itemHeight,</span><br><span class="hljs-params">  itemWidth,</span><br><span class="hljs-params">  BufferSize = <span class="hljs-number">4</span>,</span><br><span class="hljs-params">&#125;</span>) &#123;<br>  <span class="hljs-comment">// 内层容器的 ref</span><br>  <span class="hljs-keyword">const</span> phantomContentRef = <span class="hljs-title function_">useRef</span>(<span class="hljs-literal">null</span>)<br><br>  <span class="hljs-comment">// 内层容器纵向最大可放置的数量</span><br>  <span class="hljs-keyword">const</span> [column, setColumn] = <span class="hljs-title function_">useState</span>(<span class="hljs-function">() =&gt;</span><br>    <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">floor</span>(containeInitWidth / itemWidth)<br>  )<br><br>  <span class="hljs-comment">// 内层容器横向最大可放置的数量</span><br>  <span class="hljs-keyword">const</span> [row, setRow] = <span class="hljs-title function_">useState</span>(<span class="hljs-function">() =&gt;</span><br>    <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">ceil</span>(containerInitHeight / itemHeight)<br>  )<br><br>  <span class="hljs-comment">// 列表数据分组，按照column分组</span><br>  <span class="hljs-keyword">const</span> [groupItems, setGroupItems] = <span class="hljs-title function_">useState</span>(<span class="hljs-function">() =&gt;</span><br>    _.<span class="hljs-title function_">chunk</span>(itemsArray, column)<br>  )<br><br>  <span class="hljs-comment">// 渲染，开始渲染的位置（组）</span><br>  <span class="hljs-keyword">const</span> [startGroupIndex, setStartGroupIndex] = <span class="hljs-title function_">useState</span>(<span class="hljs-number">0</span>)<br><br>  <span class="hljs-comment">// 渲染，结束渲染的位置（组）</span><br>  <span class="hljs-keyword">const</span> [endtGroupIndex, setEndGroupIndex] = <span class="hljs-title function_">useState</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">min</span>(row * column, groupItems.<span class="hljs-property">length</span> - <span class="hljs-number">1</span>)<br>  &#125;)<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@description</span>: 滚动条 onscroll事件，计算 startGroupIndex， endtGroupIndex</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span></span><br><span class="hljs-comment">   * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-keyword">const</span> onScrollListening = <span class="hljs-title function_">useCallback</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-comment">// 内层容器滚动偏移量</span><br>    <span class="hljs-keyword">const</span> &#123; scrollTop &#125; = containerRef.<span class="hljs-property">current</span><br><br>    <span class="hljs-comment">// 计算滚动到的组索引号</span><br>    <span class="hljs-keyword">const</span> currentstartGroupIndex = <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">floor</span>(scrollTop / itemHeight)<br><br>    <span class="hljs-comment">// 当前滚动到的组索引号 与 startGroupIndex 不同时，才更新 startGroupIndex， endtGroupIndex</span><br>    <span class="hljs-keyword">if</span> (currentstartGroupIndex !== startGroupIndex) &#123;<br>      <span class="hljs-title function_">setStartGroupIndex</span>(currentstartGroupIndex)<br>      <span class="hljs-title function_">setEndGroupIndex</span>(<br>        <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">min</span>(startGroupIndex + row + <span class="hljs-title class_">BufferSize</span>, groupItems.<span class="hljs-property">length</span> - <span class="hljs-number">1</span>)<br>      )<br>    &#125;<br>  &#125;, [itemHeight, startGroupIndex, containerRef, <span class="hljs-title class_">BufferSize</span>, groupItems, row])<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@description</span>: 用于通过 startGroupIndex， endtGroupIndex 遍历 groupItems 渲染到页面上</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span></span><br><span class="hljs-comment">   * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-keyword">const</span> renderDisplayContent = <span class="hljs-title function_">useMemo</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-comment">// itemsArray 数据为空，不渲染</span><br>    <span class="hljs-keyword">if</span> (!_.<span class="hljs-title function_">isEmpty</span>(itemsArray)) &#123;<br>      <span class="hljs-comment">// 存放需要需要渲染DOM 数组</span><br>      <span class="hljs-keyword">const</span> content = []<br><br>      <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = startGroupIndex; i &lt;= endtGroupIndex; i++) &#123;<br>        content.<span class="hljs-title function_">push</span>(<br>          <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span></span></span><br><span class="hljs-tag"><span class="language-xml">            <span class="hljs-attr">key</span>=<span class="hljs-string">&#123;i&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">            <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;phantomItem&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">            <span class="hljs-attr">style</span>=<span class="hljs-string">&#123;&#123;</span></span></span><br><span class="hljs-tag"><span class="language-xml">              <span class="hljs-attr">gridTemplateColumns:</span> `<span class="hljs-attr">repeat</span>(<span class="hljs-attr">auto-fill</span>, $&#123;<span class="hljs-attr">itemWidth</span>&#125;<span class="hljs-attr">px</span>)`,</span></span><br><span class="hljs-tag"><span class="language-xml">            &#125;&#125;</span></span><br><span class="hljs-tag"><span class="language-xml">          &gt;</span></span><br><span class="language-xml">            &#123;</span><br><span class="language-xml">              // 遍历 groupItems</span><br><span class="language-xml">              groupItems[i].map((item, j) =&gt; children(item, `$&#123;i&#125;-$&#123;j&#125; `))</span><br><span class="language-xml">            &#125;</span><br><span class="language-xml">          <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>        )<br>      &#125;<br>      <span class="hljs-keyword">return</span> content<br>    &#125;<br>  &#125;, [<br>    startGroupIndex,<br>    endtGroupIndex,<br>    groupItems,<br>    children,<br>    itemsArray,<br>    itemWidth,<br>  ])<br><br>  <span class="hljs-comment">// 给 containerBobyRef 加上 onscroll 事件</span><br>  containerRef.<span class="hljs-property">current</span>.<span class="hljs-property">onscroll</span> = <span class="hljs-title function_">useThrottle</span>(onScrollListening, <span class="hljs-number">100</span>, [])<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@description</span>: 用于监听外层容器的可视区域大小变化</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> &#123;<span class="hljs-type">*</span>&#125;</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@return</span> &#123;<span class="hljs-type">*</span>&#125;</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-keyword">const</span> computeGridSize = <span class="hljs-title function_">useCallback</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-comment">// 外层容器当前可视高度</span><br>    <span class="hljs-keyword">const</span> <span class="hljs-title class_">Height</span> = containerRef.<span class="hljs-property">current</span>.<span class="hljs-property">clientHeight</span><br><br>    <span class="hljs-comment">// 外层容器当前可视宽度</span><br>    <span class="hljs-keyword">const</span> <span class="hljs-title class_">Width</span> = containerRef.<span class="hljs-property">current</span>.<span class="hljs-property">clientWidth</span><br><br>    <span class="hljs-comment">// 内层容器纵向当前最大可放置的数量</span><br>    <span class="hljs-keyword">const</span> currentColumn = <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">floor</span>(<span class="hljs-title class_">Width</span> / itemWidth)<br><br>    <span class="hljs-comment">// 内层容器横向当前最大可放置的数量</span><br>    <span class="hljs-keyword">const</span> currentRow = <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">ceil</span>(<span class="hljs-title class_">Height</span> / itemHeight)<br><br>    <span class="hljs-comment">// 不相同时，说明页面发生变化，更新 column， row</span><br>    <span class="hljs-keyword">if</span> (currentColumn !== column || currentRow !== row) &#123;<br>      <span class="hljs-title function_">setColumn</span>(currentColumn)<br>      <span class="hljs-title function_">setRow</span>(currentRow)<br>      <span class="hljs-title function_">setGroupItems</span>(_.<span class="hljs-title function_">chunk</span>(itemsArray, currentColumn))<br>    &#125;<br>  &#125;, [containerRef, itemHeight, itemWidth, column, row, itemsArray])<br><br>  <span class="hljs-comment">// 监听外层容器的可视区域大小变化</span><br>  <span class="hljs-title function_">useEffect</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-variable language_">window</span>.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;resize&#x27;</span>, computeGridSize)<br>    <span class="hljs-keyword">return</span> <span class="hljs-function">() =&gt;</span> <span class="hljs-variable language_">window</span>.<span class="hljs-title function_">removeEventListener</span>(<span class="hljs-string">&#x27;resize&#x27;</span>, computeGridSize)<br>  &#125;, [computeGridSize])<br><br>  <span class="hljs-comment">// height: `$&#123;groupItems.length * itemHeight&#125;px`</span><br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">VListStyle</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;phantomContent&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">ref</span>=<span class="hljs-string">&#123;phantomContentRef&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">style</span>=<span class="hljs-string">&#123;&#123;</span></span></span><br><span class="hljs-tag"><span class="language-xml">          <span class="hljs-attr">marginTop:</span> `$&#123;<span class="hljs-attr">startGroupIndex</span> * <span class="hljs-attr">itemHeight</span>&#125;<span class="hljs-attr">px</span>`,</span></span><br><span class="hljs-tag"><span class="language-xml">          <span class="hljs-attr">marginBottom:</span> `$&#123;</span></span><br><span class="hljs-tag"><span class="language-xml">            (<span class="hljs-attr">groupItems.length</span> <span class="hljs-attr">-</span> <span class="hljs-attr">endtGroupIndex</span> <span class="hljs-attr">-</span> <span class="hljs-attr">1</span>) * <span class="hljs-attr">itemHeight</span></span></span><br><span class="hljs-tag"><span class="language-xml">          &#125;<span class="hljs-attr">px</span>`,</span></span><br><span class="hljs-tag"><span class="language-xml">        &#125;&#125;</span></span><br><span class="hljs-tag"><span class="language-xml">      &gt;</span></span><br><span class="language-xml">        &#123;renderDisplayContent&#125;</span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">VListStyle</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/&gt;</span></span><br>  )<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title class_">VList</span><br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>React</category>
      
    </categories>
    
    
    <tags>
      
      <tag>虚拟列表</tag>
      
      <tag>虚拟网格</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>封装组件 -- FileTable</title>
    <link href="/2022/03/28/%E5%B0%81%E8%A3%85%E7%BB%84%E4%BB%B6%20--%20FileTable/"/>
    <url>/2022/03/28/%E5%B0%81%E8%A3%85%E7%BB%84%E4%BB%B6%20--%20FileTable/</url>
    
    <content type="html"><![CDATA[<h2 id="封装组件-–-FileTable"><a href="#封装组件-–-FileTable" class="headerlink" title="封装组件 – FileTable"></a>封装组件 – FileTable</h2><h3 id="01-前言"><a href="#01-前言" class="headerlink" title="01 前言"></a>01 前言</h3><p><strong>遇到问题：</strong></p><p>在写个这个组件之前，首当其冲想到是改造 <code>Antd ‘s Table</code> 组件，图个方便（不需要一个一个写样式）。但是后面发现，<code>antd</code> 自带的 <code>Table</code> 对于<code>高度自适应</code>非常不友好（特别是数据量少的时候，table 直接给你缩成短短一行）</p><p><strong>尝试的解决方案：</strong></p><ul><li>在通过<code>官方文档</code>、<code>Google</code> 和 <code>issues</code> 各种方式都没找到比较好解决方案</li><li>尝试了操作 <code>DOM</code> 去赋值可以实现需求（但是这个不太好）</li><li>想过修改 <code>Table</code> 组件原来的样式，分析过后，它的<code>DOM</code> 结构过于复杂，而且后期还有隐藏的 <code>Bug</code> ，结合修改时间，性比价不太高</li></ul><p><strong>最终的解决方案：</strong></p><p>参照 <code>Teamshare</code> 决定还是重新自己写一个组件—<code>FileTable</code> , 血的教训（前面的工作量白做了）</p><h3 id="02-FileTable-组件结构"><a href="#02-FileTable-组件结构" class="headerlink" title="02 FileTable 组件结构"></a>02 FileTable 组件结构</h3><p><img src="https://s2.loli.net/2022/03/18/9rNiBozQEqGlf8P.png" alt="image-20220318104450107"></p><blockquote><p><strong>文件结构：</strong></p><ol><li>TableBody – 表格 Body<ul><li>FileNameCell – 用于显示 文件类型 icon 和 文件名</li><li>OperationCell – 用于显示 “…”</li><li>index.jsx – 表格体 Body 入口文件</li><li>style.js – 表格 Body 样式</li></ul></li><li>TableHeader – 表头<ul><li>columns.js – 预定义写表格列</li><li>constants.js – 常用变量</li><li>index.jsx – 用于组装 TableBody 和 TableHeader</li><li>style.js – 文件表格样式</li><li>utils.js – 工具类方法</li></ul></li></ol></blockquote><h3 id="03-FileTable-轻使用"><a href="#03-FileTable-轻使用" class="headerlink" title="03 FileTable 轻使用"></a>03 FileTable 轻使用</h3><p><strong>参数 Params：</strong></p><ul><li><em>className</em> – 类名</li><li><em>rowKeys</em> – row ‘s Key</li><li><em>getData</em> – 获取数据 API</li><li><em>columns</em> – 表格列</li><li><em>storageKey</em> – 存在 SessionStorageKey ‘s Key</li><li><em>emptyImage</em> – 数据为空时候，显示的 icon</li><li>emptyTip – 数据为空时候，显示的 tip</li></ul><p><strong>你将会得到：</strong></p><p><img src="https://s2.loli.net/2022/03/18/JT5hnxBwsyfUN9b.png" alt="image-20220318104520407"></p>]]></content>
    
    
    <categories>
      
      <category>React</category>
      
    </categories>
    
    
    <tags>
      
      <tag>React</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Typora 小妙招 -- 图片服务器😊</title>
    <link href="/2022/03/28/Typora%20%E5%B0%8F%E5%A6%99%E6%8B%9B%20--%20%E5%9B%BE%E7%89%87%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    <url>/2022/03/28/Typora%20%E5%B0%8F%E5%A6%99%E6%8B%9B%20--%20%E5%9B%BE%E7%89%87%E6%9C%8D%E5%8A%A1%E5%99%A8/</url>
    
    <content type="html"><![CDATA[<h2 id="Typora-小妙招-–-图片服务器-😊"><a href="#Typora-小妙招-–-图片服务器-😊" class="headerlink" title="Typora 小妙招 – 图片服务器 😊"></a>Typora 小妙招 – 图片服务器 😊</h2><h3 id="01-前言"><a href="#01-前言" class="headerlink" title="01 前言"></a>01 前言</h3><p><code>Typora</code> 是当今程序猿笔记利器，当我们需要插图片在笔记中，保存其实是本地图片。一旦你上传到自己播客上面，就会发现图片显示不出来，非常麻烦。这边教大家配置一个图片服务器，使用 <code>sm.ms</code> 作为图床</p><blockquote><p>Typora V0.11.17</p></blockquote><h3 id="02-教程"><a href="#02-教程" class="headerlink" title="02 教程"></a>02 教程</h3><p>选择 sm.ms 作为图床,官网地址：<a href="https://sm.ms/">https://sm.ms</a></p><p>特点：永久存储免注册，图片链接支持 https，可以删除上传的图片，提供多种图片链接格式，目前免费用户无法使用香港节点因此速度比较慢，有时候可能上传失败。</p><p>图片上传限制：每个图片最大 5M，每次最多上传 10 张</p><ol><li><p>注册或登陆 sm.ms</p><p>​ <a href="https://sm.ms/login">https://sm.ms/login</a></p></li><li><p>生成 token</p><p><img src="https://s2.loli.net/2022/03/17/Ym7XfbrlZVjdEhv.png" alt="image-20220317225046857"></p></li><li><p>配置 token</p><p>进入<a href="https://sm.ms/home/apitoken">API Access - SM.MS | Dashboard</a></p><p><img src="https://s2.loli.net/2022/03/17/m4aX9PZvYwbc5lS.png" alt="image-20220317225253731"></p><p>回到 Typora 配置</p><p><img src="C:\Users\DuoRouSai\AppData\Roaming\Typora\typora-user-images\image-20220317225444609.png" alt="image-20220317225444609"></p><p>按照图片顺序，配置 config</p><p><img src="https://s2.loli.net/2022/03/17/TdfZnEJyoaIXHVm.png" alt="image-20220317225658734"></p><figure class="highlight json"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;picBed&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;uploader&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;smms&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-comment">//传图床为 SM.MS,</span><br>    <span class="hljs-attr">&quot;smms&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;token&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;xxxxxxxxxxxxxxxxxxxxx&quot;</span> <span class="hljs-comment">//这里面的token换成刚刚生成的 sm.ms 的token</span><br>    <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;picgoPlugins&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></div></td></tr></table></figure><p>注意修改后重启软件 !!!</p></li></ol><p><strong>效果预览</strong>:</p><p>将图片复制到 Typora ,就自动上传</p><p><img src="https://s2.loli.net/2022/03/17/xMtPjqCZ7mfJiAU.png" alt="image-20220317230130170"></p><p><strong>大功告成！！！</strong> 💕</p><p><img src="../AppData/Roaming/Typora/typora-user-images/image-20220318141602372.png" alt="image-20220318141602372"></p>]]></content>
    
    
    <categories>
      
      <category>Typora</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>stopPropagation 和 stopImmediatePropagation区别✌️</title>
    <link href="/2022/03/28/stopPropagation%20%E5%92%8C%20stopImmediatePropagation%E5%8C%BA%E5%88%AB/"/>
    <url>/2022/03/28/stopPropagation%20%E5%92%8C%20stopImmediatePropagation%E5%8C%BA%E5%88%AB/</url>
    
    <content type="html"><![CDATA[<h1 id="stopPropagation-和-stopImmediatePropagation-区别-✌️"><a href="#stopPropagation-和-stopImmediatePropagation-区别-✌️" class="headerlink" title="stopPropagation 和 stopImmediatePropagation 区别 ✌️"></a>stopPropagation 和 stopImmediatePropagation 区别 ✌️</h1><h3 id="01-名词解释"><a href="#01-名词解释" class="headerlink" title="01 名词解释"></a>01 名词解释</h3><p>✔️<strong>event.stopPropagation ：</strong>比较常见，用于停止冒泡，阻止事件在 DOM 中继续冒泡。</p><p>✔️<strong>event.stopImmediatePropagation:</strong> 阻止 click 事件冒泡,并且阻止 p 元素上绑定的其他 click 事件的事件监听函数的执行.</p><h3 id="02-实践小例子"><a href="#02-实践小例子" class="headerlink" title="02 实践小例子"></a>02 实践小例子</h3><p>💻 动动小手实践下,有助于理解哦…</p><p>// 摘自 MDN</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">      <span class="hljs-selector-tag">p</span> &#123;</span><br><span class="language-css">        <span class="hljs-attribute">height</span>: <span class="hljs-number">30px</span>;</span><br><span class="language-css">        <span class="hljs-attribute">width</span>: <span class="hljs-number">150px</span>;</span><br><span class="language-css">        <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#ccf</span>;</span><br><span class="language-css">      &#125;</span><br><span class="language-css">      <span class="hljs-selector-tag">div</span> &#123;</span><br><span class="language-css">        <span class="hljs-attribute">height</span>: <span class="hljs-number">30px</span>;</span><br><span class="language-css">        <span class="hljs-attribute">width</span>: <span class="hljs-number">150px</span>;</span><br><span class="language-css">        <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#cfc</span>;</span><br><span class="language-css">      &#125;</span><br><span class="language-css">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>paragraph<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">      <span class="hljs-keyword">const</span> p = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;p&#x27;</span>)</span><br><span class="language-javascript">      p.<span class="hljs-title function_">addEventListener</span>(</span><br><span class="language-javascript">        <span class="hljs-string">&#x27;click&#x27;</span>,</span><br><span class="language-javascript">        <span class="hljs-function">(<span class="hljs-params">event</span>) =&gt;</span> &#123;</span><br><span class="language-javascript">          <span class="hljs-title function_">alert</span>(<span class="hljs-string">&#x27;我是p元素上被绑定的第一个监听函数&#x27;</span>)</span><br><span class="language-javascript">        &#125;,</span><br><span class="language-javascript">        <span class="hljs-literal">false</span></span><br><span class="language-javascript">      )</span><br><span class="language-javascript"></span><br><span class="language-javascript">      p.<span class="hljs-title function_">addEventListener</span>(</span><br><span class="language-javascript">        <span class="hljs-string">&#x27;click&#x27;</span>,</span><br><span class="language-javascript">        <span class="hljs-function">(<span class="hljs-params">event</span>) =&gt;</span> &#123;</span><br><span class="language-javascript">          <span class="hljs-title function_">alert</span>(<span class="hljs-string">&#x27;我是p元素上被绑定的第二个监听函数&#x27;</span>)</span><br><span class="language-javascript">          event.<span class="hljs-title function_">stopImmediatePropagation</span>()</span><br><span class="language-javascript">          <span class="hljs-comment">// 执行stopImmediatePropagation方法,阻止click事件冒泡,并且阻止p元素上绑定的其他click事件的事件监听函数的执行.</span></span><br><span class="language-javascript">        &#125;,</span><br><span class="language-javascript">        <span class="hljs-literal">false</span></span><br><span class="language-javascript">      )</span><br><span class="language-javascript"></span><br><span class="language-javascript">      p.<span class="hljs-title function_">addEventListener</span>(</span><br><span class="language-javascript">        <span class="hljs-string">&#x27;click&#x27;</span>,</span><br><span class="language-javascript">        <span class="hljs-function">(<span class="hljs-params">event</span>) =&gt;</span> &#123;</span><br><span class="language-javascript">          <span class="hljs-title function_">alert</span>(<span class="hljs-string">&#x27;我是p元素上被绑定的第三个监听函数&#x27;</span>)</span><br><span class="language-javascript">          <span class="hljs-comment">// 该监听函数排在上个函数后面，该函数不会被执行</span></span><br><span class="language-javascript">        &#125;,</span><br><span class="language-javascript">        <span class="hljs-literal">false</span></span><br><span class="language-javascript">      )</span><br><span class="language-javascript"></span><br><span class="language-javascript">      <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;div&#x27;</span>).<span class="hljs-title function_">addEventListener</span>(</span><br><span class="language-javascript">        <span class="hljs-string">&#x27;click&#x27;</span>,</span><br><span class="language-javascript">        <span class="hljs-function">(<span class="hljs-params">event</span>) =&gt;</span> &#123;</span><br><span class="language-javascript">          <span class="hljs-title function_">alert</span>(<span class="hljs-string">&#x27;我是div元素,我是p元素的上层元素&#x27;</span>)</span><br><span class="language-javascript">          <span class="hljs-comment">// p元素的click事件没有向上冒泡，该函数不会被执行</span></span><br><span class="language-javascript">        &#125;,</span><br><span class="language-javascript">        <span class="hljs-literal">false</span></span><br><span class="language-javascript">      )</span><br><span class="language-javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h3 id="03-项目应用场景"><a href="#03-项目应用场景" class="headerlink" title="03 项目应用场景"></a>03 项目应用场景</h3><p><strong>场景：</strong></p><img src="https://s2.loli.net/2022/03/18/Dw9e2YEbGOsHrTB.png" alt="image-20220318184706337" style="zoom: 50%;" /><p>需求就是点击 <code>“ESC”</code> 关闭新建的那个框框，<code>event.stopImmediatePropagation()</code> 可以阻止事件冒泡，以及阻止其他的绑定事件的执行。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>React 长列表性能优化 -- react-window</title>
    <link href="/2022/03/28/React%20%E9%95%BF%E5%88%97%E8%A1%A8%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%20--%20react-window/"/>
    <url>/2022/03/28/React%20%E9%95%BF%E5%88%97%E8%A1%A8%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%20--%20react-window/</url>
    
    <content type="html"><![CDATA[<h2 id="React-长列表性能优化-–-react-window"><a href="#React-长列表性能优化-–-react-window" class="headerlink" title="React 长列表性能优化 – react-window"></a>React 长列表性能优化 – react-window</h2><blockquote><p>假如有一天，你遇到一个非常变态的需求或者一个不会分页的后端 – 前端拿到 1W+条数据时，你会怎么做？浏览器性能是有限的的，把 1w+条数据渲染到页面，非常容易造成页面卡顿，导致用户体验不佳。🤷‍♀️</p></blockquote><h3 id="01-常见的解决方案"><a href="#01-常见的解决方案" class="headerlink" title="01 常见的解决方案"></a>01 常见的解决方案</h3><p>1.懒加载</p><p>方式：通过监听列表的滚动，每当用户滚动到列表底部的时候，进行加载后面的数据追加渲染到 DOM 上。</p><p>缺点：当用户一直向下划，页面依然会产生大量 DOM 元素，占用内存过多，导致页面卡顿。</p><p>2.虚拟列表</p><p>方式：其核心思路，渲染长列表时，每次只渲染可视区域的列表数。</p><h3 id="02-虚拟列表技术"><a href="#02-虚拟列表技术" class="headerlink" title="02 虚拟列表技术"></a>02 虚拟列表技术</h3><blockquote><p>常见虚拟列表技术 react-window 和 react-virtualized ，有什么不同呢?</p></blockquote><p>这两个库都出自一个作者，<code>react-window</code> 是对 <code>react-virtualized</code> 的重写，至于为啥重写呢？作者给出的解释是，<code>react-virtualized</code> 考虑情况太多，增加了太多的非基本功能和组件。删除这些功能会导致之前使用的开发者痛苦面具 🤯，所以就重写了。</p><p><a href="https://github.com/bvaughn/react-window">react-window</a> 更加关注 <strong>smaller</strong>1 and <strong>faster</strong>。</p><h3 id="03-react-window-尝试"><a href="#03-react-window-尝试" class="headerlink" title="03 react-window 尝试"></a>03 react-window 尝试</h3><p>Here’s a <a href="https://codesandbox.io/s/bvaughn-react-window-fixed-size-list-vertical-forked-7xp7qn?file=/index.js:211-216">CodeSandbox</a></p><p>上面这块是比较基本的使用，我打算参考 <code>react-window</code> 的原理，去实现这个需求。</p><p><img src="https://s2.loli.net/2022/03/21/t48I7q9rUbwOYEK.png" alt="image-20220321182310892"></p><p>今天暂时还没研究透，明天实践下再进行补充。</p>]]></content>
    
    
    <categories>
      
      <category>React</category>
      
    </categories>
    
    
    <tags>
      
      <tag>React</tag>
      
      <tag>性能优化</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>useCallback 和 useMemo 的区别</title>
    <link href="/2022/03/28/useCallback%20%E5%92%8C%20useMemo%20%E7%9A%84%E5%8C%BA%E5%88%AB%EF%BC%9F/"/>
    <url>/2022/03/28/useCallback%20%E5%92%8C%20useMemo%20%E7%9A%84%E5%8C%BA%E5%88%AB%EF%BC%9F/</url>
    
    <content type="html"><![CDATA[<h2 id="useCallback-和-useMemo-的区别"><a href="#useCallback-和-useMemo-的区别" class="headerlink" title="useCallback 和 useMemo 的区别"></a>useCallback 和 useMemo 的区别</h2><blockquote><p>前言，刚看官方文档的时候。也许会觉得他们很像，或者认为<code>useCallback</code> 是 <code>useMemo</code>的语法糖 🍬</p><p>其实不然，他们虽然说都是 “性能优化” 的手段，他们的用法和关注层面还是有点不一样</p></blockquote><h3 id="01-useCallback"><a href="#01-useCallback" class="headerlink" title="01 useCallback"></a>01 useCallback</h3><p><strong>用法：</strong></p><figure class="highlight jsx"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs jsx"><span class="hljs-keyword">const</span> memoizedCallback = <span class="hljs-title function_">useCallback</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-title function_">doSomething</span>(a, b)<br>&#125;, [a, b])<br></code></pre></div></td></tr></table></figure><p><code>useCallback(fn, deps)</code> 相当于 <code>useMemo(() =&gt; fn, deps)</code></p><p><strong>关注：</strong></p><p><code>useCallback</code> 一般用于函数更新，返回一个新的方法</p><h3 id="02-useMemo"><a href="#02-useMemo" class="headerlink" title="02 useMemo"></a>02 useMemo</h3><p><strong>用法：</strong></p><figure class="highlight jsx"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs jsx"><span class="hljs-keyword">const</span> memoizedValue = <span class="hljs-title function_">useMemo</span>(<span class="hljs-function">() =&gt;</span> <span class="hljs-title function_">computeExpensiveValue</span>(a, b), [a, b])<br></code></pre></div></td></tr></table></figure><p><strong>关注：</strong></p><p><code>useMemo</code> 一般用于组件中变量，返回变量值</p>]]></content>
    
    
    <categories>
      
      <category>hook</category>
      
    </categories>
    
    
    <tags>
      
      <tag>React</tag>
      
      <tag>hook</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>自定义 Hook 和 封装组件</title>
    <link href="/2022/03/28/%E8%87%AA%E5%AE%9A%E4%B9%89%20hooks%20%E5%92%8C%20%E5%B0%81%E8%A3%85%E7%BB%84%E4%BB%B6/"/>
    <url>/2022/03/28/%E8%87%AA%E5%AE%9A%E4%B9%89%20hooks%20%E5%92%8C%20%E5%B0%81%E8%A3%85%E7%BB%84%E4%BB%B6/</url>
    
    <content type="html"><![CDATA[<h2 id="自定义-Hook-和-封装组件"><a href="#自定义-Hook-和-封装组件" class="headerlink" title="自定义 Hook 和 封装组件"></a>自定义 Hook 和 封装组件</h2><blockquote><p>前言：</p><p><em>Hook</em> 是 React 16.8 的新增特性。它可以让你在不编写 class 的情况下使用 state 以及其他的 React 特性。</p></blockquote><h3 id="01-自定义-Hook"><a href="#01-自定义-Hook" class="headerlink" title="01 自定义 Hook"></a>01 自定义 Hook</h3><blockquote><p>通过自定义 Hook，可以将组件逻辑提取到可重用的函数中。使得一些公共逻辑可以从项目中解耦出来，不仅项目其他地方中使用，还以提供给社区 💻。</p></blockquote><p>一般以 “<code>use</code>” 命名开头，这个是约束。也是为了让 React 帮我们更好地检查是否符合 <code>Hook</code> 规则。</p><p>一般放在项目的 <code>hooks</code> 文件下</p><p>✍️<strong>关于自定义 <code>Hook</code> 的封装：</strong></p><p>a.与项目逻辑解耦，抽离出公共逻辑</p><p>b.尽量不越界、不涉及到 UI，只关注逻辑</p><p>c.外部使用，做到只考虑 <code>输入</code> 和 <code>输出 </code>, 无关乎内部实现</p><p>推荐一个强大的 <strong>hooks 库 —</strong><a href="https://ahooks.js.org/"><strong>ahook</strong></a></p><h3 id="02-封装组件"><a href="#02-封装组件" class="headerlink" title="02 封装组件"></a>02 封装组件</h3><blockquote><p>封装组件，它和自定义 Hook，都用到函数组件，但是它更加关注 UI 层渲染。</p></blockquote><p>一般放在项目的 <code>components</code> 文件下</p><p>✍️<strong>关于<code>封装组件</code>：</strong></p><p>a. 更加关注 UI 层的渲染，注重考虑复用性</p><p>b.在设计组件时，多方面和多维度考虑，组件可扩展性</p><p>c.样式的丰富性，高度可再定制性</p>]]></content>
    
    
    <categories>
      
      <category>hook</category>
      
    </categories>
    
    
    <tags>
      
      <tag>React</tag>
      
      <tag>hook</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>响应式布局小实践 --Rem 和媒体查询</title>
    <link href="/2022/03/28/%E5%93%8D%E5%BA%94%E5%BC%8F%E5%B8%83%E5%B1%80%E5%B0%8F%E5%AE%9E%E8%B7%B5%20--Rem%20%E5%92%8C%E5%AA%92%E4%BD%93%E6%9F%A5%E8%AF%A2/"/>
    <url>/2022/03/28/%E5%93%8D%E5%BA%94%E5%BC%8F%E5%B8%83%E5%B1%80%E5%B0%8F%E5%AE%9E%E8%B7%B5%20--Rem%20%E5%92%8C%E5%AA%92%E4%BD%93%E6%9F%A5%E8%AF%A2/</url>
    
    <content type="html"><![CDATA[<h2 id="响应式布局小实践-–Rem-和媒体查询"><a href="#响应式布局小实践-–Rem-和媒体查询" class="headerlink" title="响应式布局小实践 –Rem 和媒体查询"></a>响应式布局小实践 –Rem 和媒体查询</h2><blockquote><p>前言：下午捣鼓了下，看了很多解决移动端自适应的方案，大多以 Rem 和媒体查询作为主流解决方案。另外 CSS3 的 flex 和 Grid 也是不戳的布局解决方案。</p></blockquote><h3 id="01-✔️Rem-媒体查询"><a href="#01-✔️Rem-媒体查询" class="headerlink" title="01 ✔️Rem / 媒体查询"></a>01 ✔️Rem / 媒体查询</h3><p>通俗一点说，<strong>Rem</strong> 是根据 <code>&lt;Html&gt;</code> 样式的 <code>font-size</code> 来计算相对大小的，比如说，<code>&lt;Html&gt;</code> 的 <code>font-size=16px</code>(默认)，那么就是相当于 <code>1rem=16px </code> 。当然<code>&lt;Html&gt;</code>的<code>font-size</code>是可以自行设置的。</p><p>**<a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/Media_Queries/Using_media_queries">媒体查询</a>**，具体可以看下官方文档，这边主要讲下它的常规使用。</p><figure class="highlight jsx"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs jsx"><span class="hljs-comment">// 常见设备的媒体查询</span><br>@media screen and (max-<span class="hljs-attr">width</span>: 1160px)<br>@media screen and (max-<span class="hljs-attr">width</span>: 820px)ipad <span class="hljs-title class_">Air</span><br>@media screen and (max-<span class="hljs-attr">width</span>: 768px)ipad mini<br>@media screen and (max-<span class="hljs-attr">width</span>: 390px)iphone 12pro<br></code></pre></div></td></tr></table></figure><h3 id="02-✔️-实践"><a href="#02-✔️-实践" class="headerlink" title="02 ✔️ 实践"></a>02 ✔️ 实践</h3><p><strong>思路：</strong></p><ol><li><p>在响应式布局中，必须通过<code>js</code>来动态控制根元素<code>font-size</code>的大小。<code>( 用户设备宽度 / 设计稿标准宽度 ) * 100</code></p><figure class="highlight jsx"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs jsx"><span class="hljs-comment">// 这边封装成一个 hook</span><br><span class="hljs-keyword">import</span> &#123; useCallback, useEffect &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span><br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">useMobileRem</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> inMobile = <span class="hljs-title function_">useCallback</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementsByTagName</span>(<span class="hljs-string">&#x27;html&#x27;</span>)[<span class="hljs-number">0</span>].<span class="hljs-property">style</span>.<span class="hljs-property">fontSize</span> =<br>      (<span class="hljs-variable language_">document</span>.<span class="hljs-property">documentElement</span>.<span class="hljs-property">clientWidth</span> / <span class="hljs-number">1920</span>) * <span class="hljs-number">100</span> + <span class="hljs-string">&#x27;px&#x27;</span><br>  &#125;, [])<br><br>  <span class="hljs-title function_">useEffect</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;DOMContentLoaded&#x27;</span>, inMobile)<br>    <span class="hljs-variable language_">window</span>.<span class="hljs-property">onresize</span> = inMobile<br>    <span class="hljs-keyword">return</span> <span class="hljs-function">() =&gt;</span> &#123;<br>      <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">removeEventListener</span>(<span class="hljs-string">&#x27;DOMContentLoaded&#x27;</span>, inMobile)<br>    &#125;<br>  &#125;, [inMobile])<br>&#125;<br></code></pre></div></td></tr></table></figure></li><li><p>通过<strong>媒体查询</strong>的方式，若当前设备宽度小于某个值时，采用<code>rem</code>单位的布局。</p></li></ol><figure class="highlight jsx"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs jsx"><span class="hljs-comment">// 根据产品需求，去编写不同屏幕的样式</span><br>@media (min-<span class="hljs-attr">width</span>: 30em) and (max-<span class="hljs-attr">width</span>: 50em) &#123; ... &#125;<br></code></pre></div></td></tr></table></figure><h3 id="03-FAQ"><a href="#03-FAQ" class="headerlink" title="03 FAQ"></a>03 FAQ</h3><p>❓：px、rem 和 em 的区别？</p><p>💻：<strong>px</strong>是固定的像素，是相对于显示器屏幕分辨率而言的。<strong>em</strong>、<strong>rem</strong> 对于 <strong>px <strong>更具有灵活性，他们是相对长度单位，</strong>em</strong> 是相对于父元素的单位，<strong>rem</strong> (<strong>root em</strong> )是相对根元素的长度。</p>]]></content>
    
    
    <categories>
      
      <category>移动端兼容</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Rem</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Gird 网格布局</title>
    <link href="/2022/03/28/Gird%20%E7%BD%91%E6%A0%BC%E5%B8%83%E5%B1%80/"/>
    <url>/2022/03/28/Gird%20%E7%BD%91%E6%A0%BC%E5%B8%83%E5%B1%80/</url>
    
    <content type="html"><![CDATA[<h2 id="Gird-网格布局"><a href="#Gird-网格布局" class="headerlink" title="Gird 网格布局"></a>Gird 网格布局</h2><blockquote><p>前言：昨天为了解决栅格布局，走了很多弯路。今天突然看到阮一峰老师<a href="https://www.ruanyifeng.com/blog/2019/03/grid-layout-tutorial.html">关于 Grid 的文章</a>让我发现了新大陆，U1S1 阮老师写的文章真的通俗易懂。努力向阮老师看齐，希望自己文章以后也可以被称赞！！话不多说，来干货！</p></blockquote><h3 id="01-网格布局"><a href="#01-网格布局" class="headerlink" title="01 网格布局"></a>01 网格布局</h3><p>之前的我一直都是用 <code>Flex</code> 弹性布局，觉得拥有 <code>Flex</code>, 这天下就没有我布不了的局。直到我发现了 <code>Grid</code>,是真的方便，难怪各各 UI 框架，都会看到一个叫做 <code>Grid</code> 布局。</p><p><strong>网格布局</strong>， 顾名思义是类似网格一样的布局（我好像说了一句废话）。为了什么这么说呢？<code>Gird</code> 是二维布局，它将容器用 “<strong>行</strong>” 和 “<strong>列</strong>”划分，而一个一个格子称作为单元格。前面说到 <code>Flex</code> 更像是一维布局。</p><h3 id="02-适用场景"><a href="#02-适用场景" class="headerlink" title="02 适用场景"></a>02 适用场景</h3><p><strong>语法方面</strong>，人家阮老师已经讲很详细了，这边偷个懒。讲两个常见的使用场景：</p><p>a. 假如做个商城列表，需要那种排排列列很整齐那种，还需要自适应两边的留白。</p><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css"><span class="hljs-selector-class">.container</span> &#123;<br>  <span class="hljs-attribute">display</span>: grid;<br>  <span class="hljs-attribute">grid-template-columns</span>: <span class="hljs-built_in">repeat</span>(auto-fill, <span class="hljs-number">180px</span>);<br>  <span class="hljs-attribute">justify-content</span>: space-evenly;<br>  <span class="hljs-attribute">grid-gap</span>: <span class="hljs-number">10px</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><img src="https://s2.loli.net/2022/03/25/ZB6RuVos9bn51wm.png" alt="image-20220325001113432" style="zoom:25%;" /><p>b. 一般网页页头，分成三部分，分别为 logo、中间区域（各个入口）、右侧区域（登录、输入框），一般这种都是两边固定，中间区域自适应。</p><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css"><span class="hljs-selector-class">.container</span> &#123;<br> <span class="hljs-attribute">width</span>: <span class="hljs-number">100%</span>;<br>    <span class="hljs-attribute">display</span>: grid;<br>    <span class="hljs-attribute">grid-template-columns</span>: <span class="hljs-number">200px</span> auto <span class="hljs-number">200px</span><br>&#125;<br></code></pre></div></td></tr></table></figure><p><img src="https://s2.loli.net/2022/03/25/wsiYIxCnFlHtkqu.png" alt="image-20220325001325658"></p>]]></content>
    
    
    <categories>
      
      <category>CSS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CSS</tag>
      
      <tag>layout布局</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>听说你还不会“虚拟列表”，对不起我来晚了</title>
    <link href="/2022/03/28/%E5%90%AC%E8%AF%B4%E4%BD%A0%E8%BF%98%E4%B8%8D%E4%BC%9A%E2%80%9C%E8%99%9A%E6%8B%9F%E5%88%97%E8%A1%A8%E2%80%9D%EF%BC%8C%E5%AF%B9%E4%B8%8D%E8%B5%B7%E6%88%91%E6%9D%A5%E6%99%9A%E4%BA%86/"/>
    <url>/2022/03/28/%E5%90%AC%E8%AF%B4%E4%BD%A0%E8%BF%98%E4%B8%8D%E4%BC%9A%E2%80%9C%E8%99%9A%E6%8B%9F%E5%88%97%E8%A1%A8%E2%80%9D%EF%BC%8C%E5%AF%B9%E4%B8%8D%E8%B5%B7%E6%88%91%E6%9D%A5%E6%99%9A%E4%BA%86/</url>
    
    <content type="html"><![CDATA[<h2 id="听说你还不会“虚拟列表”，对不起我来晚了"><a href="#听说你还不会“虚拟列表”，对不起我来晚了" class="headerlink" title="听说你还不会“虚拟列表”，对不起我来晚了"></a>听说你还不会“虚拟列表”，对不起我来晚了</h2><blockquote><p>前言：上次说到要实践 React- window , 今天终于可以过来还债辽😀！研究了许久，总共想到 3 种方法实现它。</p></blockquote><h3 id="01-什么是虚拟列表❓"><a href="#01-什么是虚拟列表❓" class="headerlink" title="01 什么是虚拟列表❓"></a>01 什么是虚拟列表❓</h3><p>它是当下解决长列表数据（2w数据量）高性能解决方案，它的原理也非常通俗易懂，正常情况下，2w数据或者更多数据要渲染到列表是非常耗时，且滚动起来非常卡的，总而言之用户体验非常差的。而<strong>虚拟列表</strong>，只需要渲染可视区域数据，它极大减少渲染性能的开销，提升了用户的体验。</p><p><img src="https://s2.loli.net/2022/03/30/a82CqZIzxPlos63.png" alt="image.png"></p><h3 id="02-实践起来💻"><a href="#02-实践起来💻" class="headerlink" title="02  实践起来💻"></a>02  实践起来💻</h3><blockquote><p>这边为了方便没有学过框架的小伙伴，我用原生的<code>Html</code>来编写，同时上传到了在线编辑IDE里面，可供大家参考</p></blockquote><p><strong>a.  Position 法：</strong></p><blockquote><ul><li><p>首先，我们需要定义几个变量</p><ul><li><p>startIndex:  用户可视区域的第一个数据项，参考上图就是 <code>item8</code> </p></li><li><p>endIndex: 用户可视区域的最后一个数据项，上图的 <code>item15</code></p></li><li></li></ul></li></ul></blockquote><p>我们只对可视层做渲染，但是为了保持整个容器像渲染正常长列表一样，里面的容器还需要保持原有的高度。这边把 <code>Html</code> 设计这样</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- 外层容器 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;vListContainer&quot;</span>&gt;</span><br>  <span class="hljs-comment">&lt;!-- 内层容器 --&gt;</span>  <br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;phantomContent&quot;</span>&gt;</span><br>    ...<br>    <span class="hljs-comment">&lt;!-- item-1 --&gt;</span><br>    <span class="hljs-comment">&lt;!-- item-2 --&gt;</span><br>    <span class="hljs-comment">&lt;!-- item-3 --&gt;</span><br>    ....<br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></div></td></tr></table></figure><ul><li><p>其中，<code>vListContainer</code> 容器样式为<code>overflow-y: auto;</code>（出现滚动条）</p><ul><li><p><code>phantomContent</code> 容器样式为<code>position: relative</code> </p></li><li><p>内容器里面子项 <code>item-n</code> 样式为 <code>position: absolute</code></p></li><li><p>设计这样，就是为了方便通过<strong>相对定位</strong>的方式，把 <code>item-n</code> 渲染到可视区域去（灵魂👌）</p></li></ul></li><li><p>接下来，我们需要在 <code>vListContainer</code>  绑定 <strong>onScroll</strong> 函数，利用其 <strong>scrollTop</strong> 计算出 <code>startIndex</code> 和 <code>endIndex</code></p><p>计算之前，需要知道：</p><ul><li><strong>rowHeight</strong> ：单项数据的高度</li><li><strong>total</strong>： 总共数据量</li><li><strong>height</strong>：可视的高度，通过 <code>vListContainer</code> 的 <strong>clientHeight</strong> 可以拿到</li></ul></li><li><p>通过上述变量就可以计算出 ：</p><ul><li>列表总高度: <code>phantomHeight = total * rowHeight</code> 设置内层容器 <code>phantomContent </code>高度</li><li>可视范围内展示元素数：<code>limit = Math.ceil(height/rowHeight)</code></li></ul></li></ul><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">onScroll</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-comment">/* 求得 startIndex，endtIndex  */</span><br>    <span class="hljs-keyword">const</span> &#123; scrollTop &#125; = vListContainer;<br>    <span class="hljs-keyword">const</span> currentStartIndex = <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">ceil</span>(scrollTop / rowHeight);<br><br>    <span class="hljs-keyword">if</span> (currentStartIndex !== startIndex) &#123;<br>        startIndex = currentStartIndex;<br>        endtIndex = <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">min</span>(currentStartIndex + limit, total);<br>    &#125;<br>    <span class="hljs-comment">// startIndex，endtIndex 更新后，渲染到可视区域</span><br>    <span class="hljs-title function_">renderDisplayContent</span>();<br>&#125;<br></code></pre></div></td></tr></table></figure><ul><li>得到这些参数，我们就可以把数据项渲染到可视区域去辽😊</li></ul><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">renderDisplayContent</span>(<span class="hljs-params"></span>) &#123;<br>    phantomContent.<span class="hljs-property">innerHTML</span> = <span class="hljs-string">&quot;&quot;</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = startIndex; i &lt;= endtIndex; i++) &#123;<br>        <span class="hljs-comment">// 遍历数据项，并渲染到 DOM 上</span><br>        <span class="hljs-keyword">var</span> x = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createElement</span>(<span class="hljs-string">&quot;DIV&quot;</span>);<br>        x.<span class="hljs-property">style</span>.<span class="hljs-property">border</span> = <span class="hljs-string">&quot;1px solid #eee&quot;</span>;<br>        x.<span class="hljs-property">style</span>.<span class="hljs-property">width</span> = <span class="hljs-string">&quot;100%&quot;</span>;<br>        x.<span class="hljs-property">style</span>.<span class="hljs-property">position</span> = <span class="hljs-string">&quot;absolute&quot;</span>;<br>        <span class="hljs-comment">// 这块关键代码，通过绝对定位，像钉子一样钉在可视区域</span><br>        x.<span class="hljs-property">style</span>.<span class="hljs-property">top</span> = i * rowHeight + <span class="hljs-string">&quot;px&quot;</span>;<br>        x.<span class="hljs-property">innerText</span> = i;<br>        phantomContent.<span class="hljs-title function_">appendChild</span>(x);<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>然后就会得到一个简单高性能的列表 —&gt; 效果图💕 </p><p><img src="https://s2.loli.net/2022/03/30/abYPShq7o3wHLmG.gif" alt="高性能长列表效果图.gif"></p><blockquote><p><strong>结论：</strong>通过效果图，可以很清晰看到，<code>DOM</code>做到真正可渲染可视区的数据项，从 2w –&gt; 20 ,性能可谓是翻了很多倍呢😉。这边只是实现一个简单造轮子，建议大家一定要动手，能更快上手。另外 <code>React-window</code> 和 <code>react-virtualized</code> 是社区封装好的，当然，有现成是方便我们使用，但是一定动手，知识才是属于我们嘚！😎</p></blockquote><p><strong>线上Demo:</strong> <a href="https://codesandbox.io/s/new-snowflake-bo42ol?file=/index.html">new-snowflake-bo42ol - CodeSandbox</a></p><blockquote><p><strong>优化：</strong>现在渲染的是只是简单数据项，真正应用场景，可能有图片，各种文字，渲染起来可能会有卡顿。引入 <code>BufferSize</code>概念，类似缓冲区一样的。</p></blockquote><p><strong>优化后的Demo:</strong><a href="https://codesandbox.io/s/cocky-montalcini-762v0x?file=/index.html">cocky-montalcini-762v0x - CodeSandbox</a></p><blockquote><p>剩下两个方案，都和上面差不多，只是实现方式不一样。不做过多解释，举一反三。线上Demo 有标注关键代码部分</p></blockquote><p><strong>b. transform 法</strong></p><p><strong>关键思想：</strong> 利用 <code>transform</code> y属性，去造成那种划动的效果</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">renderDisplayContent</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-comment">//------ 关键代码部分 </span><br>    phantomContent.<span class="hljs-property">style</span>.<span class="hljs-property">transform</span> = <span class="hljs-string">`translate3d(0px,<span class="hljs-subst">$&#123;startIndex * rowHeight&#125;</span>px,0px)`</span><br>    <span class="hljs-comment">//------</span><br>    phantomContent.<span class="hljs-property">innerHTML</span> = <span class="hljs-string">&quot;&quot;</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> i = startIndex; i &lt;= endtIndex; i++ )&#123;<br>        <span class="hljs-keyword">var</span> x = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createElement</span>(<span class="hljs-string">&quot;DIV&quot;</span>);<br>        x.<span class="hljs-property">style</span>.<span class="hljs-property">border</span> = <span class="hljs-string">&quot;1px solid #eee&quot;</span><br>        x.<span class="hljs-property">innerText</span> = i<br>        phantomContent.<span class="hljs-title function_">appendChild</span>(x)<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p><strong>线上Demo：</strong><a href="https://codesandbox.io/s/distracted-snowflake-v3400l?file=/index.html">distracted-snowflake-v3400l - CodeSandbox</a></p><p><strong>c. marginTop 和 marginBottom 法</strong></p><p><strong>关键思想：</strong> <strong>marginTop</strong> 和 <strong>marginBottom</strong> 去分别填充，可视区域的 <strong>上面</strong> 和 <strong>下面</strong>。（有兴趣可以试试 <strong>pandingTop</strong> 和 <strong>pandingBottom</strong>）</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">renderDisplayContent</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-comment">//------关键代码部分</span><br>        phantomContent.<span class="hljs-property">style</span>.<span class="hljs-property">marginTop</span> = rowHeight * startIndex + <span class="hljs-string">&quot;px&quot;</span>;<br>    <span class="hljs-comment">//------</span><br>        phantomContent.<span class="hljs-property">style</span>.<span class="hljs-property">marginBottom</span> =<br>          rowHeight * (total - endtIndex) + <span class="hljs-string">&quot;px&quot;</span>;<br>        phantomContent.<span class="hljs-property">innerHTML</span> = <span class="hljs-string">&quot;&quot;</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = startIndex; i &lt;= endtIndex; i++) &#123;<br>          <span class="hljs-keyword">var</span> x = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createElement</span>(<span class="hljs-string">&quot;DIV&quot;</span>);<br>          x.<span class="hljs-property">style</span>.<span class="hljs-property">border</span> = <span class="hljs-string">&quot;1px solid #eee&quot;</span>;<br>          x.<span class="hljs-property">innerText</span> = i;<br>          phantomContent.<span class="hljs-title function_">appendChild</span>(x);<br>        &#125;<br> &#125;<br></code></pre></div></td></tr></table></figure><p><strong>线上Demo :</strong> <a href="https://codesandbox.io/s/hardcore-newton-phulu8?file=/index.html">hardcore-newton-phulu8 - CodeSandbox</a></p>]]></content>
    
    
    <categories>
      
      <category>React</category>
      
    </categories>
    
    
    <tags>
      
      <tag>React</tag>
      
      <tag>性能优化</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>useThrottle hook节流</title>
    <link href="/2022/03/28/useThrottle%20hook%20%E7%9A%84%E5%B0%81%E8%A3%85/"/>
    <url>/2022/03/28/useThrottle%20hook%20%E7%9A%84%E5%B0%81%E8%A3%85/</url>
    
    <content type="html"><![CDATA[<h2 id="useThrottle-hook-节流"><a href="#useThrottle-hook-节流" class="headerlink" title="useThrottle hook 节流"></a>useThrottle hook 节流</h2><blockquote><p>前言, 节流是前端常用工具函数。比如说进行窗口的 resize, onscroll 等操作时，事件调用的频率很高，使得浏览器开销很大，使得用户的体验很差。使用节流可以极大降低调用的频率，所以将其封装成 hook。</p></blockquote><p><strong>节流的原理：</strong> 定义一个计时器，规定在 delay 后执行函数。如果在 delay 时间内再次触发，则会判断定时器是否存在，有则返回（不执行操作）；无则，重新设定一个计时器（delay 后执行函数）。</p><p><strong>节流 hook:</strong></p><figure class="highlight jsx"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs jsx"><span class="hljs-keyword">import</span> &#123; useEffect, useCallback, useRef &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span><br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">useThrottle</span>(<span class="hljs-params">fn, delay, dep = []</span>) &#123;<br>  <span class="hljs-keyword">const</span> &#123; current &#125; = <span class="hljs-title function_">useRef</span>(&#123; fn, <span class="hljs-attr">timer</span>: <span class="hljs-literal">null</span> &#125;)<br>  <span class="hljs-title function_">useEffect</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>    current.<span class="hljs-property">fn</span> = fn<br>  &#125;, [fn, current])<br><br>  <span class="hljs-keyword">return</span> <span class="hljs-title function_">useCallback</span>(<br>    <span class="hljs-keyword">function</span> <span class="hljs-title function_">f</span>(<span class="hljs-params">...args</span>) &#123;<br>      <span class="hljs-keyword">if</span> (!current.<span class="hljs-property">timer</span>) &#123;<br>        current.<span class="hljs-property">timer</span> = <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>          <span class="hljs-keyword">delete</span> current.<span class="hljs-property">timer</span><br>        &#125;, delay)<br>        current.<span class="hljs-property">fn</span>.<span class="hljs-title function_">call</span>(<span class="hljs-variable language_">this</span>, ...args)<br>      &#125;<br>    &#125;,<br>    [...dep, delay, current]<br>  )<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> useThrottle<br></code></pre></div></td></tr></table></figure><p><strong>使用方法：</strong></p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * @fn: 函数</span><br><span class="hljs-comment"> * @delay: 延迟时间（ms）</span><br><span class="hljs-comment"> * @dep: 依赖</span><br><span class="hljs-comment"> */</span><br><span class="hljs-title function_">useThrottle</span>(func, <span class="hljs-number">500</span>, [])<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>hook</category>
      
    </categories>
    
    
    <tags>
      
      <tag>React</tag>
      
      <tag>hook</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>React of Study</title>
    <link href="/2022/03/18/React%20of%20Study/"/>
    <url>/2022/03/18/React%20of%20Study/</url>
    
    <content type="html"><![CDATA[<h1 id="React-of-Study"><a href="#React-of-Study" class="headerlink" title="React of Study"></a>React of Study</h1><h2 id="一-React-入门"><a href="#一-React-入门" class="headerlink" title="一.React 入门"></a>一.React 入门</h2><h3 id="JSX-简介"><a href="#JSX-简介" class="headerlink" title="JSX 简介"></a>JSX 简介</h3><p>JSX，是一个 JavaScript 的语法扩展。</p><h5 id="语法规则："><a href="#语法规则：" class="headerlink" title="语法规则："></a>语法规则：</h5><ul><li><p>在 JSX 中嵌入表达式(区分表达式与代码块)</p></li><li><p>本身 JSX 也是一个表达式</p></li><li><p>虚拟 DOM ,一些标签的属性采用 <strong>“ 小驼峰法”</strong></p><figure class="highlight jsx"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs jsx"><span class="hljs-keyword">const</span> <span class="hljs-variable constant_">VDOM</span> = <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">h1</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&#123;&#123;</span> <span class="hljs-attr">fontSize:</span> &#x27;<span class="hljs-attr">26px</span>&#x27; &#125;&#125;&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br></code></pre></div></td></tr></table></figure></li><li><p>JSX 里的 <code>class</code> 变成了 <a href="https://developer.mozilla.org/en-US/docs/Web/API/Element/className"><code>className</code></a>，而 <code>tabindex</code> 则变为 tabIndex;</p><figure class="highlight jsx"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs jsx"><span class="hljs-keyword">const</span> <span class="hljs-variable constant_">VDOM</span> = <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">h1</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;title&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br></code></pre></div></td></tr></table></figure></li><li><p><img src="C:\Users\DuoRouSai\AppData\Roaming\Typora\typora-user-images\image-20220110162421373.png" alt="image-20220110162421373">。</p></li></ul><h3 id="React-Developer-Tools-调试工具"><a href="#React-Developer-Tools-调试工具" class="headerlink" title="React Developer Tools 调试工具"></a>React Developer Tools 调试工具</h3><ul><li>Components 组件结构</li><li>Profiler 性能监控</li></ul><h2 id="二-React-面向组件编程"><a href="#二-React-面向组件编程" class="headerlink" title="二.React 面向组件编程"></a>二.React 面向组件编程</h2><h3 id="1-基本理解和使用"><a href="#1-基本理解和使用" class="headerlink" title="1.基本理解和使用"></a>1.基本理解和使用</h3><ul><li><p>函数式组件</p><figure class="highlight jsx"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs jsx"><span class="hljs-comment">// 在 Babel 下 ，是严格模式</span><br><span class="hljs-comment">// 函数式编程</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">MyComponent</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">return</span> <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>我是函数式编程“简单组件”<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span><br>&#125;<br><span class="hljs-title class_">ReactDOM</span>.<span class="hljs-title function_">render</span>(<span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">MyComponent</span> /&gt;</span></span>, <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;test&#x27;</span>))<br><span class="hljs-comment">// &lt;MyComponent/&gt; react 帮你调用 MyComponent</span><br></code></pre></div></td></tr></table></figure></li><li><p>类式组件</p><figure class="highlight jsx"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs jsx"><span class="hljs-comment">// 在 Babel 下 ，是严格模式</span><br><span class="hljs-comment">// 类式编程</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyComponent</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">React.Component</span> &#123;<br>  <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> (<br>      <span class="hljs-comment">// “复杂组件” 有 State</span><br>      <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>我是类式编程“复杂组件”<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span><br>    )<br>  &#125;<br>&#125;<br><span class="hljs-title class_">ReactDOM</span>.<span class="hljs-title function_">render</span>(<span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">MyComponent</span> /&gt;</span></span>, <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;test&#x27;</span>))<br><span class="hljs-comment">// &lt;MyComponent/&gt; react 帮你 new MyComponent</span><br></code></pre></div></td></tr></table></figure></li></ul><h3 id="2-组件实例的三大核心属性-1-State"><a href="#2-组件实例的三大核心属性-1-State" class="headerlink" title="2.组件实例的三大核心属性 1: State"></a>2.组件实例的三大核心属性 1: State</h3><h5 id="理解："><a href="#理解：" class="headerlink" title="理解："></a>理解：</h5><p>1.state 是组件的状态机，通过更新组件的 state 来更新对应页面显示（重新渲染）</p><p>2.state 是对象形式的，多个 key-value 组合</p><h5 id="值得注意："><a href="#值得注意：" class="headerlink" title="值得注意："></a>值得注意：</h5><blockquote><p>1.组件中 render 方法中的 this 是组件实例的对象</p><p>2.组件自定义方法中，默认开启了 use strict，为 undefine,解决：</p><ul><li><p>bind()，强制绑定实例对象的 this</p></li><li><p>箭头函数</p><p>3.setState()，组件的数据不可以直接更改。</p></li></ul></blockquote><p>​</p><h3 id="3-组件实例的三大核心属性-2-props"><a href="#3-组件实例的三大核心属性-2-props" class="headerlink" title="3.组件实例的三大核心属性 2: props"></a>3.组件实例的三大核心属性 2: props</h3><h5 id="理解：-1"><a href="#理解：-1" class="headerlink" title="理解："></a>理解：</h5><ol><li>每个组件对象都会有 props 属性</li><li>组件标签的所有属性都保存在 props 中</li><li>用 props-type.js 对属性进行类型检测，必要性判断(React161 开始)</li></ol><h5 id="值得注意：-1"><a href="#值得注意：-1" class="headerlink" title="值得注意："></a>值得注意：</h5><blockquote><ul><li>组件内部的 props 是只读属性的</li><li>有组件外向组件内传递变化的数据</li></ul></blockquote><h3 id="4-组件实例的三大核心属性-3-refs-与事件处理"><a href="#4-组件实例的三大核心属性-3-refs-与事件处理" class="headerlink" title="4.组件实例的三大核心属性 3: refs 与事件处理"></a>4.组件实例的三大核心属性 3: refs 与事件处理</h3><h5 id="理解：-2"><a href="#理解：-2" class="headerlink" title="理解："></a>理解：</h5><blockquote><p>Refs 提供了一种方式，允许我们访问 DOM 节点或在 render 方法中创建的 React 元素。</p></blockquote><h5 id="三种形式创建-ref"><a href="#三种形式创建-ref" class="headerlink" title="三种形式创建 ref:"></a>三种形式创建 ref:</h5><ol><li><p>字符串形式的 ref</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js">input ref=<span class="hljs-string">&quot;input1&quot;</span> type=<span class="hljs-string">&quot;text&quot;</span><br></code></pre></div></td></tr></table></figure></li><li><p>回调形式的 ref</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js">input ref=&#123;<span class="hljs-function">(<span class="hljs-params">a</span>)=&gt;</span><span class="hljs-variable language_">this</span>.<span class="hljs-property">input1</span> = a&#125; type=<span class="hljs-string">&quot;text&quot;</span><br></code></pre></div></td></tr></table></figure></li><li><p>createRef 创建 ref 容器</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js">input2 = <span class="hljs-title class_">React</span>.<span class="hljs-title function_">createRef</span>()<br>input ref=&#123;<span class="hljs-variable language_">this</span>.<span class="hljs-property">input1</span>&#125; type=<span class="hljs-string">&quot;text&quot;</span><br></code></pre></div></td></tr></table></figure></li></ol><h5 id="事件处理："><a href="#事件处理：" class="headerlink" title="事件处理："></a>事件处理：</h5><ol><li>通过 onXxx 属性指定事件处理函数（注意大小写）<ul><li>React 使用的式自定义(合成)事件，而不是原生的 DOM 事件–更好兼容性</li><li>React 中的事件通过委托方式处理的（委托给组件最外层的元素）–更高的效率</li></ul></li><li>通过 event.target 得到发生事件的 DOM 对象</li></ol><h3 id="5-组件的生命周期："><a href="#5-组件的生命周期：" class="headerlink" title="5.组件的生命周期："></a>5.组件的生命周期：</h3><h5 id="旧版本的生命周期："><a href="#旧版本的生命周期：" class="headerlink" title="旧版本的生命周期："></a>旧版本的生命周期：</h5><p><img src="C:\Users\DuoRouSai\AppData\Roaming\Typora\typora-user-images\image-20220112113749152.png" alt="image-20220112113749152"></p><h6 id="生命周期的三个阶段（旧）："><a href="#生命周期的三个阶段（旧）：" class="headerlink" title="生命周期的三个阶段（旧）："></a>生命周期的三个阶段（旧）：</h6><p><img src="C:\Users\DuoRouSai\AppData\Roaming\Typora\typora-user-images\image-20220112114024249.png" alt="image-20220112114024249"></p><h5 id="新版本生命周期（-gt-v17-0-0）："><a href="#新版本生命周期（-gt-v17-0-0）：" class="headerlink" title="新版本生命周期（&gt;v17.0.0）："></a>新版本生命周期（&gt;v17.0.0）：</h5><p><img src="C:\Users\DuoRouSai\AppData\Roaming\Typora\typora-user-images\image-20220112140120136.png" alt="image-20220112140120136"></p><h6 id="新增生命钩子（2-个）："><a href="#新增生命钩子（2-个）：" class="headerlink" title="新增生命钩子（2 个）："></a>新增生命钩子（2 个）：</h6><blockquote><p>getDerivedStateFromProps：此方法适用于<a href="https://zh-hans.reactjs.org/blog/2018/06/07/you-probably-dont-need-derived-state.html#when-to-use-derived-state">罕见的用例</a>，即 state 的值在任何时候都取决于 props。</p><p>getSnapshotBeforeUpdate()：它使得组件能在发生更改之前从 DOM 中捕获一些信息（例如，滚动位置）。此生命周期方法的任何返回值将作为参数传递给 <code>componentDidUpdate()</code>。</p></blockquote><h6 id="即将废弃生命钩子（三个）：均需在前面加上-UNSAFE-前缀"><a href="#即将废弃生命钩子（三个）：均需在前面加上-UNSAFE-前缀" class="headerlink" title="即将废弃生命钩子（三个）：均需在前面加上 UNSAFE_ (前缀)"></a>即将废弃生命钩子（三个）：均需在前面加上 UNSAFE_ (前缀)</h6><ul><li>componentWillMount（）</li><li>componentWillUpdate（）</li><li>componentWillReceiveProps（）</li></ul><h3 id="6-虚拟-DOM，diff-算法："><a href="#6-虚拟-DOM，diff-算法：" class="headerlink" title="6.虚拟 DOM，diff 算法："></a>6.虚拟 DOM，diff 算法：</h3><p><img src="C:\Users\DuoRouSai\AppData\Roaming\Typora\typora-user-images\image-20220112161357938.png" alt="image-20220112161357938"></p><h2 id="三-React-ajax"><a href="#三-React-ajax" class="headerlink" title="三.React ajax"></a>三.React ajax</h2><h3 id="1-react-脚手架配置代理总结"><a href="#1-react-脚手架配置代理总结" class="headerlink" title="1.react 脚手架配置代理总结"></a>1.react 脚手架配置代理总结</h3><h4 id="方法一："><a href="#方法一：" class="headerlink" title="方法一："></a>方法一：</h4><p><img src="C:\Users\DuoRouSai\AppData\Roaming\Typora\typora-user-images\image-20220113230205483.png" alt="image-20220113230205483"></p><h4 id="方法二："><a href="#方法二：" class="headerlink" title="方法二："></a>方法二：</h4><blockquote><p>注意从 http-proxy-middleware v2.0 开始使用 createProxyMiddleware 代替 proxy</p><p><img src="C:\Users\DuoRouSai\AppData\Roaming\Typora\typora-user-images\image-20220113230149722.png" alt="image-20220113230149722"></p></blockquote><h3 id="2-xhr（axios）-和-fetch-的区别"><a href="#2-xhr（axios）-和-fetch-的区别" class="headerlink" title="2.xhr（axios） 和 fetch 的区别"></a>2.xhr（axios） 和 fetch 的区别</h3><blockquote><p><strong>xhr 与 fetch 是同一级别的 ！！！</strong></p></blockquote><h5 id="1-传统的-xhr-请求"><a href="#1-传统的-xhr-请求" class="headerlink" title="1.传统的 xhr 请求"></a>1.传统的 xhr 请求</h5><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> xhr = <span class="hljs-keyword">new</span> <span class="hljs-title class_">XMLHttpRequest</span>()<br>xhr.<span class="hljs-title function_">open</span>(<span class="hljs-string">&#x27;GET&#x27;</span>, url)<br>xhr.<span class="hljs-property">responseType</span> = <span class="hljs-string">&#x27;json&#x27;</span><br><br>xhr.<span class="hljs-property">onload</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(xhr.<span class="hljs-property">response</span>)<br>&#125;<br><br>xhr.<span class="hljs-property">onerror</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;Oops, error&#x27;</span>)<br>&#125;<br><br>xhr.<span class="hljs-title function_">send</span>()<br></code></pre></div></td></tr></table></figure><h5 id="2-未优化的-fetch-请求"><a href="#2-未优化的-fetch-请求" class="headerlink" title="2.未优化的 fetch 请求"></a>2.未优化的 fetch 请求</h5><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-title function_">fetch</span>(url)<br>  .<span class="hljs-title function_">then</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params">response</span>) &#123;<br>    <span class="hljs-keyword">return</span> response.<span class="hljs-title function_">json</span>()<br>  &#125;)<br>  .<span class="hljs-title function_">then</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params">data</span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(data)<br>  &#125;)<br>  .<span class="hljs-title function_">catch</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params">e</span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;Oops, error&#x27;</span>)<br>  &#125;)<br></code></pre></div></td></tr></table></figure><h5 id="3-优化后的-fetch-请求"><a href="#3-优化后的-fetch-请求" class="headerlink" title="3.优化后的 fetch 请求"></a>3.优化后的 fetch 请求</h5><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">try</span> &#123;<br>  <span class="hljs-keyword">let</span> response = <span class="hljs-keyword">await</span> <span class="hljs-title function_">fetch</span>(url)<br>  <span class="hljs-keyword">let</span> data = <span class="hljs-keyword">await</span> response.<span class="hljs-title function_">json</span>()<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(data)<br>&#125; <span class="hljs-keyword">catch</span> (e) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;Oops, error&#x27;</span>, e)<br>&#125;<br><span class="hljs-comment">// 注：这段代码如果想运行，外面需要包一个 async function</span><br></code></pre></div></td></tr></table></figure><h3 id="3-PubSubJs-消息订阅-与-发布机制"><a href="#3-PubSubJs-消息订阅-与-发布机制" class="headerlink" title="3.PubSubJs 消息订阅 与 发布机制"></a>3.PubSubJs 消息订阅 与 发布机制</h3><p><img src="C:\Users\DuoRouSai\AppData\Roaming\Typora\typora-user-images\image-20220114154029332.png" alt="image-20220114154029332"></p><h5 id="使用过程："><a href="#使用过程：" class="headerlink" title="使用过程："></a>使用过程：</h5><p>导入 pubsub.js 模块</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-keyword">import</span> <span class="hljs-title class_">PubSub</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;pubsub-js&#x27;</span><br></code></pre></div></td></tr></table></figure><p>在需要 消息订阅 的组件，订阅</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-keyword">var</span> token = <span class="hljs-title class_">PubSub</span>.<span class="hljs-title function_">subscribe</span>(<span class="hljs-string">&#x27;MY TOPIC&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">msg, data</span>) =&gt;</span> &#123;&#125;)<br></code></pre></div></td></tr></table></figure><p>在需要 发布 组件中，发布消息（msg:消息，data:数据）</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-title class_">PubSub</span>.<span class="hljs-title function_">publish</span>(<span class="hljs-string">&#x27;MY TOPIC&#x27;</span>, <span class="hljs-string">&#x27;hello world!&#x27;</span>)<br></code></pre></div></td></tr></table></figure><p>消息订阅的组件待销毁后，取消订阅</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-title class_">PubSub</span>.<span class="hljs-title function_">unsubscribe</span>(token)<br></code></pre></div></td></tr></table></figure><h2 id="四-React-路由"><a href="#四-React-路由" class="headerlink" title="四.React 路由"></a>四.React 路由</h2><h3 id="1-Spa-理解"><a href="#1-Spa-理解" class="headerlink" title="1.Spa 理解"></a>1.Spa 理解</h3><p><img src="C:\Users\DuoRouSai\AppData\Roaming\Typora\typora-user-images\image-20220114155209771.png" alt="image-20220114155209771"></p><h3 id="2-路由的理解"><a href="#2-路由的理解" class="headerlink" title="2.路由的理解"></a>2.路由的理解</h3><ol><li><p>什么是路由？</p><p><img src="C:\Users\DuoRouSai\AppData\Roaming\Typora\typora-user-images\image-20220114155416804.png" alt="image-20220114155416804"></p></li><li><p>路由分类</p><ul><li><p>后端路由</p><p><img src="C:\Users\DuoRouSai\AppData\Roaming\Typora\typora-user-images\image-20220114160524889.png" alt="image-20220114160524889"></p></li><li><p>前端路由</p><p>方式一：H5 推出来的 history 模式(旧的浏览器不兼容)</p><p>方式二：hash 值（锚点）</p><p><img src="C:\Users\DuoRouSai\AppData\Roaming\Typora\typora-user-images\image-20220114160544635.png" alt="image-20220114160544635"></p></li></ul></li></ol><h3 id="3-路由基本使用："><a href="#3-路由基本使用：" class="headerlink" title="3.路由基本使用："></a>3.路由基本使用：</h3><h2 id="五-Redux-状态管理"><a href="#五-Redux-状态管理" class="headerlink" title="五.Redux 状态管理"></a>五.Redux 状态管理</h2><h3 id="1-redux-原理图"><a href="#1-redux-原理图" class="headerlink" title="1.redux 原理图"></a>1.redux 原理图</h3><p><img src="C:\Users\DuoRouSai\AppData\Roaming\Typora\typora-user-images\image-20220126180325926.png" alt="image-20220126180325926"></p><h2 id="2-react-redux-原理图"><a href="#2-react-redux-原理图" class="headerlink" title="2.react-redux 原理图"></a>2.react-redux 原理图</h2><p><img src="C:\Users\DuoRouSai\AppData\Roaming\Typora\typora-user-images\image-20220126180413848.png" alt="image-20220126180413848"></p>]]></content>
    
    
    <categories>
      
      <category>React</category>
      
    </categories>
    
    
    <tags>
      
      <tag>React</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>前端工程化--批量导入模块</title>
    <link href="/2022/03/18/%E5%89%8D%E7%AB%AF%E5%B7%A5%E7%A8%8B%E5%8C%96--%E6%89%B9%E9%87%8F%E5%AF%BC%E5%85%A5%E6%A8%A1%E5%9D%97/"/>
    <url>/2022/03/18/%E5%89%8D%E7%AB%AF%E5%B7%A5%E7%A8%8B%E5%8C%96--%E6%89%B9%E9%87%8F%E5%AF%BC%E5%85%A5%E6%A8%A1%E5%9D%97/</url>
    
    <content type="html"><![CDATA[<h2 id="前端工程化–批量导入模块"><a href="#前端工程化–批量导入模块" class="headerlink" title="前端工程化–批量导入模块"></a>前端工程化–批量导入模块</h2><h3 id="01-起因"><a href="#01-起因" class="headerlink" title="01 起因"></a>01 起因</h3><blockquote><p>前端项目中，可能随着项目的庞大的，模块随之项目体量而变多，比如说 service 模块下有 100+ 模块，手动引入实在浪费时间了，所以程序猿能用技术偷懒，就不要手工。</p></blockquote><h3 id="02-具体实现"><a href="#02-具体实现" class="headerlink" title="02 具体实现"></a>02 具体实现</h3><blockquote><p><a href="https://webpack.docschina.org/guides/dependency-management/#requirecontext">官方文档在这里~~~</a></p></blockquote><p>这边具体语法可以参考官方文档，下边具体是具体实现：</p><p>比如：</p><p><code>service</code> 模块下有个<code>modules</code>，存放 <code>a.js, b.js, c.js</code></p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-comment">// service/index.js</span><br><span class="hljs-comment">// 前端工程化里面常用的批量导入文件</span><br><span class="hljs-keyword">const</span> requireContext = <span class="hljs-built_in">require</span>.<span class="hljs-title function_">context</span>(<span class="hljs-string">&#x27;./modules&#x27;</span>, <span class="hljs-literal">false</span>, <span class="hljs-regexp">/\.js$/</span>)<br><span class="hljs-comment">// 用于存放模块的数组</span><br><span class="hljs-keyword">const</span> <span class="hljs-variable constant_">MODULES</span> = []<br><span class="hljs-keyword">const</span> requireContextKeys = requireContext.<span class="hljs-title function_">keys</span>()<br><br><span class="hljs-comment">// 根据上面批量导入的文件读取里面定义的模块到 MOUDULES 数组中</span><br>requireContextKeys.<span class="hljs-title function_">forEach</span>(<span class="hljs-function">(<span class="hljs-params">item</span>) =&gt;</span> &#123;<br>  <span class="hljs-keyword">const</span> <span class="hljs-variable language_">module</span> = requireContext(item)<br>  <span class="hljs-variable constant_">MODULES</span>.<span class="hljs-title function_">push</span>(<span class="hljs-variable language_">module</span>.<span class="hljs-property">Service</span>)<br>&#125;)<br></code></pre></div></td></tr></table></figure><p>通过 <code>clog</code> 打印 <code>MODULES</code> 数组</p><p><img src="https://i.ibb.co/YZz7vXL/image-20220314121929909.png"></p>]]></content>
    
    
    <categories>
      
      <category>Webpack</category>
      
    </categories>
    
    
    <tags>
      
      <tag>前端工程化</tag>
      
      <tag>Webpack</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JavaScript 事件循环</title>
    <link href="/2022/03/18/JavaScript%20%E4%BA%8B%E4%BB%B6%E5%BE%AA%E7%8E%AF/"/>
    <url>/2022/03/18/JavaScript%20%E4%BA%8B%E4%BB%B6%E5%BE%AA%E7%8E%AF/</url>
    
    <content type="html"><![CDATA[<h2 id="JavaScript-事件循环"><a href="#JavaScript-事件循环" class="headerlink" title="JavaScript 事件循环"></a>JavaScript 事件循环</h2><p>唠唠基础😊</p><p>众所周知 <code>js</code> 是单线程的，至于为什么是单线程的？</p><p>答： <code>js</code>作为脚本语言，其主要负责 <code>操作DOM</code> 和 <code>用户交互</code> 。假如变成多线程的话，一个线程在给某个<code>DOM</code> 添加内容 ，而另外一个线程正在删除这个 <code>DOM</code> 一切就乱套了。</p><h3 id="01-同步任务和异步任务"><a href="#01-同步任务和异步任务" class="headerlink" title="01 同步任务和异步任务"></a>01 同步任务和异步任务</h3><p>​        <strong>虽然 <code>js</code> 是单线程，但是引入两个概念，一个是<code>同步</code>，另外一个<code>异步</code>。</strong></p><ul><li>同步任务：</li></ul><p>代码是按照<code>执行栈</code>顺序执行下来的，比如：</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;Hello&quot;</span>)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;DouR&quot;</span>)<br><span class="hljs-comment">// console:</span><br><span class="hljs-comment">// 1：Hello </span><br><span class="hljs-comment">// 2：DouR</span><br></code></pre></div></td></tr></table></figure><ul><li>异步任务：</li></ul><p>异步操作，比如：<code>setTimeout</code>，<code>Promise</code>，<code>Ajax</code>…等。当顺序执行 <code>执行栈</code> 代码时，遇到异步操作，可以把它们看做比较耗时的工作，放入<code>任务队列</code>中去，接着执行代码，等执行完同步代码后在执行<code>任务队列</code> 的任务。</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">()=&gt;</span>&#123;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;Hello&quot;</span>)<br>&#125;)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;DouR&quot;</span>)<br><span class="hljs-comment">// console:</span><br><span class="hljs-comment">// 1: DouR</span><br><span class="hljs-comment">// 2: Hello </span><br></code></pre></div></td></tr></table></figure><p>可以很清晰看到先打印 <code>DouR</code> </p><h3 id="02-Event-Loop"><a href="#02-Event-Loop" class="headerlink" title="02 Event Loop"></a>02 Event Loop</h3><p>事件循环就是 <code>入栈出栈</code> 的过程，上面提到的异步任务，可以分成 <code>宏任务（Macrotask）</code>  和  <code>微任务（Microtask）</code></p><p><strong>宏任务：</strong>setTimeout, setInterval, setImmediate, I/O, UI render</p><p><strong>微任务：</strong>process.nextTick, Promises, Object.observe, MutationObserver(H5 新特性)</p><p><strong>每一次 Event Loop 触发时：</strong></p><ol><li>首先执行<code>主执行栈</code>任务，例如 script 任务</li><li>分别将 <code>宏任务</code> 和 <code>微任务</code> ,压入<code>宏任务队列</code> 和 <code>微任务队列</code></li><li>接着，先取出 <code>微任务队列</code> 执行直至清空（执行过程中，碰到<code>微任务</code>或者<code>宏任务</code> 分别压入队列中去，用于下一轮 Event loop执行）</li><li>—— 新的一轮 Event Loop——</li><li>取出 <code>宏任务队列</code> 执行直至清空 </li><li>取出 <code>微任务队列</code> 执行直至清空 </li><li>5、6重复</li></ol><p><strong>试试这个栗子：</strong></p><figure class="highlight arcade"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs arcade"><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-string">&#x27;global&#x27;</span>)<br><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">1</span>;i &lt;= <span class="hljs-number">5</span>;i ++) &#123;<br>  setTimeout(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(i)<br>  &#125;,i*<span class="hljs-number">1000</span>)<br>  <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(i)<br>&#125;<br><br><span class="hljs-keyword">new</span> Promise(<span class="hljs-keyword">function</span> (<span class="hljs-params">resolve</span>) &#123;<br>  <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-string">&#x27;promise1&#x27;</span>)<br>  resolve()<br> &#125;).then(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-string">&#x27;then1&#x27;</span>)<br>&#125;)<br><br>setTimeout(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-string">&#x27;timeout2&#x27;</span>)<br>  <span class="hljs-keyword">new</span> Promise(<span class="hljs-keyword">function</span> (<span class="hljs-params">resolve</span>) &#123;<br>    <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-string">&#x27;timeout2_promise&#x27;</span>)<br>    resolve()<br>  &#125;).then(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-string">&#x27;timeout2_then&#x27;</span>)<br>  &#125;)<br>&#125;, <span class="hljs-number">1000</span>)<br><br></code></pre></div></td></tr></table></figure><p><strong>结果：</strong></p><p><img src="https://i.ibb.co/9YbnGCm/image-20220308213843024.png" alt="image-20220308213843024"></p><p><strong>说个冷知识，浏览器的事件循环 和 Node事件循环不一致</strong><a href="https://juejin.cn/post/6844903574560833550">浏览器和Node不同的事件循环（Event Loop） - 掘金 (juejin.cn)</a></p>]]></content>
    
    
    <categories>
      
      <category>JavaScript</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JavaScript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Style-Components  浅体验</title>
    <link href="/2022/03/07/Style-Component%20%20%E6%B5%85%E4%BD%93%E9%AA%8C/"/>
    <url>/2022/03/07/Style-Component%20%20%E6%B5%85%E4%BD%93%E9%AA%8C/</url>
    
    <content type="html"><![CDATA[<h2 id="Style-Components-浅体验"><a href="#Style-Components-浅体验" class="headerlink" title="Style-Components  浅体验"></a>Style-Components  浅体验</h2><p><img src="https://styled-components.com/icon.png"></p><blockquote><p>当你还在烦恼你的 <code>css</code> 为啥总是会影响到其他的组件，可以考虑下 <code>style-component</code> 了！官方 icon 就很魔性</p></blockquote><h3 id="01-安装"><a href="#01-安装" class="headerlink" title="01 安装"></a>01 安装</h3><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">$ npm install --save styled-components<br></code></pre></div></td></tr></table></figure><h3 id="02-简单使用下"><a href="#02-简单使用下" class="headerlink" title="02 简单使用下"></a>02 简单使用下</h3><p>首先创建一个 <code>style.js</code> 来编写 <code>css</code>, 对！你没有听错，<code>css</code> 写在 <code>js</code> 中。</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-comment">// style.js</span><br><span class="hljs-keyword">import</span> styled <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;styled-components&quot;</span><br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> <span class="hljs-title class_">HelloDiv</span> = styled.<span class="hljs-property">div</span><span class="hljs-string">`</span><br><span class="hljs-string">    width: 200px;</span><br><span class="hljs-string">    text-align: center;</span><br><span class="hljs-string">    background-color: orange;</span><br><span class="hljs-string">    color: yellow;</span><br><span class="hljs-string">    .box &#123;</span><br><span class="hljs-string">        color: blue;</span><br><span class="hljs-string">    &#125;</span><br><span class="hljs-string">`</span><br></code></pre></div></td></tr></table></figure><p>再然后，把 <code>style.js</code> 引入到 <code>Hello.jsx</code> ，使用 <code>HelloDiv</code> 作为标签名，就会得到一个语义化的自定义标签。</p><figure class="highlight jsx"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs jsx"><span class="hljs-comment">// Hello.jsx</span><br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">HelloDiv</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./style&quot;</span><br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">Hello</span> () &#123;<br>    <span class="hljs-keyword">return</span>(<br>        <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">HelloDiv</span>&gt;</span></span><br><span class="language-xml">             Hello style-components</span><br><span class="language-xml">             <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;box&quot;</span>&gt;</span></span><br><span class="language-xml">                 我是 box</span><br><span class="language-xml">             <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">HelloDiv</span>&gt;</span></span><br>    )<br>&#125;<br></code></pre></div></td></tr></table></figure><p>然后，咱们打开控制台瞧瞧，给咱 <code> Hello组件</code> 起了啥标签名</p><p><img src="https://i.ibb.co/BGLrtbd/image-20220302113342382.png"></p><p>神奇不，再也不用担心，写的样式影响到其他的组件啦…</p><h3 id="03-扩展：ThemeProvider"><a href="#03-扩展：ThemeProvider" class="headerlink" title="03 扩展：ThemeProvider"></a>03 扩展：ThemeProvider</h3><blockquote><p>假如你项目当下或者未来有定制化 <code>theme</code> 的需求，快来看这，来对地啦！</p></blockquote><p><strong>使用方式：</strong></p><p>首先你需要定义一个存放定义各种各样的主题样式 <code>theme.js</code></p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-comment">// theme.js</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br>  <span class="hljs-attr">c_blue</span>: <span class="hljs-string">&quot;#3B81F7&quot;</span>, *<span class="hljs-comment">// 蓝色*</span><br>  <span class="hljs-attr">c_yellow</span>: <span class="hljs-string">&quot;#FFA800&quot;</span>, *<span class="hljs-comment">// 黄色*</span><br>  <span class="hljs-attr">c_red</span>: <span class="hljs-string">&quot;#FF2121&quot;</span>, *<span class="hljs-comment">// 红色*</span><br>  <span class="hljs-attr">c_green</span>: <span class="hljs-string">&quot;#07C160&quot;</span>, *<span class="hljs-comment">// 绿色*</span><br>  <span class="hljs-attr">c_white</span>: <span class="hljs-string">&quot;#FFFFFF&quot;</span>, *<span class="hljs-comment">// 白色*</span><br>&#125;<br></code></pre></div></td></tr></table></figure><p>然后，在你项目最最最..最根标签下，使用  <code>styled-components</code> 提供的 ThemeProvider 标签包裹起来，再把你定义好的 <code>theme</code> 的作为 <code>props</code> 引入进去</p><figure class="highlight jsx"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs jsx"><span class="hljs-comment">// src/index.jsx</span><br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">ThemeProvider</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;styled-components&quot;</span><br><span class="hljs-keyword">import</span> theme <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./theme&quot;</span><br><br><span class="hljs-title class_">ReactDOM</span>.<span class="hljs-title function_">render</span>(<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">React.StrictMode</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">ThemeProvider</span>  <span class="hljs-attr">theme</span>=<span class="hljs-string">&#123;</span> <span class="hljs-attr">theme</span> &#125;&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">App</span> /&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">ThemeProvider</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">React.StrictMode</span>&gt;</span></span>,<br>  <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;root&#x27;</span>)<br>);<br><br></code></pre></div></td></tr></table></figure><p>接下来，你就愉快地使用你在 <code>theme.js</code>  定义的颜色</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-comment">// Hello/style.js</span><br><span class="hljs-keyword">import</span> styled <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;styled-components&quot;</span><br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> <span class="hljs-title class_">HelloDiv</span> = styled.<span class="hljs-property">div</span><span class="hljs-string">`</span><br><span class="hljs-string">    width: 200px;</span><br><span class="hljs-string">    text-align: center;</span><br><span class="hljs-string">    background-color: <span class="hljs-subst">$&#123;p =&gt; p.theme.c_orange&#125;</span>;</span><br><span class="hljs-string">    color: <span class="hljs-subst">$&#123;p =&gt; p.theme.c_yellow&#125;</span> ;</span><br><span class="hljs-string">    .box &#123;</span><br><span class="hljs-string">        color:<span class="hljs-subst">$&#123;p =&gt; p.theme.c_blue&#125;</span> ;</span><br><span class="hljs-string">    &#125;</span><br><span class="hljs-string">`</span><br></code></pre></div></td></tr></table></figure><h3 id="04扩展：createGlobalStyle"><a href="#04扩展：createGlobalStyle" class="headerlink" title="04扩展：createGlobalStyle"></a>04扩展：createGlobalStyle</h3><blockquote><p>用于覆盖全局样式，比如想修改UI 框架默认的样式…</p></blockquote><p><strong>使用方式：</strong></p><p>这边以修改 <code>antd</code> 的 <code>&lt;Button /&gt;</code> 组件为例 </p><p><img src="https://i.ibb.co/0Ck5WF8/image-20220307170932506.png" alt="image-20220307170932506"></p><p>首先，使用 <code>style-components</code> 的 <code>createGlobalStyle</code> API 创建一个需要覆盖的样式</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-comment">// style.js</span><br><span class="hljs-keyword">import</span> &#123;createGlobalStyle&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;styled-components&quot;</span><br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> <span class="hljs-title class_">StyledIndex</span> = createGlobalStyle<span class="hljs-string">`</span><br><span class="hljs-string">    .ant-btn-primary &#123;</span><br><span class="hljs-string">        background-color: orange;</span><br><span class="hljs-string">    &#125;</span><br><span class="hljs-string">`</span><br></code></pre></div></td></tr></table></figure><p>接着，引用需要的覆盖的样式的组件中去</p><figure class="highlight jsx"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs jsx"><span class="hljs-comment">// index.js</span><br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">StyledIndex</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./style.js&#x27;</span>;<br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">Button</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;antd&#x27;</span>;<br><br><span class="hljs-title class_">ReactDOM</span>.<span class="hljs-title function_">render</span>(<br>  <span class="language-xml"><span class="hljs-tag">&lt;&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">StyledIndex</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">StyledIndex</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">Button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;primary&quot;</span>&gt;</span>Primary Button<span class="hljs-tag">&lt;/<span class="hljs-name">Button</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;/&gt;</span></span>,<br>  <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;container&#x27;</span>),<br>);<br></code></pre></div></td></tr></table></figure><p>当组件被 render 的时候，读到 <code>StyledIndex</code> 就会被注入全局样式中去，变成下面这样…</p><p><img src="https://i.ibb.co/DLJr0vK/image-20220307170743466.png" alt="image-20220307170743466"></p><p><strong>还有一种情况，就是你只是想单独定制，但不影响到其他组件的样式，可以这样做：</strong></p><p>定义 <code>MyButton组件</code></p><figure class="highlight jsx"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs jsx"><span class="hljs-comment">// MyButton.jsx</span><br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">StyledIndex</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./style.js&#x27;</span>;<br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">Button</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;antd&#x27;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">MyButton</span> (props) &#123;<br>    <span class="hljs-keyword">return</span> (<br>      <span class="language-xml"><span class="hljs-tag">&lt;&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">StyledIndex</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">StyledIndex</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">Button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;primary&quot;</span> &#123;<span class="hljs-attr">...props</span>&#125; <span class="hljs-attr">className</span>=<span class="hljs-string">&#123;</span>`<span class="hljs-attr">mybtu</span> $&#123;<span class="hljs-attr">props.className</span> || &#x27;&#x27;&#125;`&#125;&gt;</span>MyButton<span class="hljs-tag">&lt;/<span class="hljs-name">Button</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/&gt;</span></span><br>    )<br>&#125;<br></code></pre></div></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-comment">// style.js</span><br><span class="hljs-keyword">import</span> &#123;createGlobalStyle&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;styled-components&quot;</span><br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> <span class="hljs-title class_">StyledIndex</span> = createGlobalStyle<span class="hljs-string">`</span><br><span class="hljs-string">// 用 mybtu 类名包裹起来</span><br><span class="hljs-string">    .mybtu &#123;</span><br><span class="hljs-string">      &amp;.ant-btn-primary &#123;</span><br><span class="hljs-string">          background-color: orange;</span><br><span class="hljs-string">      &#125;</span><br><span class="hljs-string">    &#125;</span><br><span class="hljs-string">`</span><br></code></pre></div></td></tr></table></figure><p>然后引入到 <code>index.js</code> 就会得到：</p><figure class="highlight jsx"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs jsx"><span class="hljs-comment">// index.js</span><br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">Button</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;antd&#x27;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-title class_">MyButton</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./MyButton.jsx&quot;</span><br><br><span class="hljs-title class_">ReactDOM</span>.<span class="hljs-title function_">render</span>(<br>  <span class="language-xml"><span class="hljs-tag">&lt;&gt;</span></span><br><span class="language-xml">     <span class="hljs-tag">&lt;<span class="hljs-name">Button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;primary&quot;</span>&gt;</span>Primary Button<span class="hljs-tag">&lt;/<span class="hljs-name">Button</span>&gt;</span></span><br><span class="language-xml">     <span class="hljs-tag">&lt;<span class="hljs-name">MyButton</span> /&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;/&gt;</span></span>,<br>  <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;container&#x27;</span>),<br>);<br></code></pre></div></td></tr></table></figure><p><img src="https://i.ibb.co/16Y1019/image-20220307171756082.png" alt="image-20220307171756082"></p><h3 id="05-后面的学习到在继续更新"><a href="#05-后面的学习到在继续更新" class="headerlink" title="05 后面的学习到在继续更新"></a>05 后面的学习到在继续更新</h3><p>🌊翻滚吧后浪…</p>]]></content>
    
    
    <categories>
      
      <category>CSS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CSS</tag>
      
      <tag>Style-Components</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>React Hook 初体验</title>
    <link href="/2022/03/02/React%20Hook%20%E5%88%9D%E4%BD%93%E9%AA%8C/"/>
    <url>/2022/03/02/React%20Hook%20%E5%88%9D%E4%BD%93%E9%AA%8C/</url>
    
    <content type="html"><![CDATA[<h1 id="React-Hook-初体验"><a href="#React-Hook-初体验" class="headerlink" title="React Hook 初体验"></a>React Hook 初体验</h1><h2 id="1-Hook-简介"><a href="#1-Hook-简介" class="headerlink" title="1.Hook 简介"></a>1.Hook 简介</h2><p>Hook 是一些可以让你在函数组件里“钩入” React state 及生命周期等特性的函数。Hook 不能在 class 组件中使用 —— 这使得你不使用 class 也能使用 React。</p><h2 id="2-动机"><a href="#2-动机" class="headerlink" title="2.动机"></a>2.动机</h2><p><a href="https://react.docschina.org/docs/hooks-intro.html#motivation">官方解释：</a></p><ol><li>组件之间复用状态逻辑很难</li><li>复杂组件变得难以理解</li><li>难以理解的 class</li></ol><h2 id="3-Hook-规则"><a href="#3-Hook-规则" class="headerlink" title="3.Hook 规则"></a>3.Hook 规则</h2><h4 id="只在最顶层使用-Hook"><a href="#只在最顶层使用-Hook" class="headerlink" title="只在最顶层使用 Hook"></a>只在最顶层使用 Hook</h4><blockquote><p><strong>不要在循环，条件或嵌套函数中调用 Hook，</strong> 确保总是在你的 React 函数的最顶层调用他们。</p></blockquote><h4 id="只在-React-函数中调用-Hook"><a href="#只在-React-函数中调用-Hook" class="headerlink" title="只在 React 函数中调用 Hook"></a>只在 React 函数中调用 Hook</h4><p><strong>不要在普通的 JavaScript 函数中调用 Hook。</strong>你可以：</p><ul><li>✅ 在 React 的函数组件中调用 Hook</li><li>✅ 在自定义 Hook 中调用其他 Hook</li></ul><h2 id="4-基础-Hook"><a href="#4-基础-Hook" class="headerlink" title="4.基础 Hook"></a>4.基础 Hook</h2><h3 id="useState"><a href="#useState" class="headerlink" title="useState"></a>useState</h3><p>function 组件示例：</p><figure class="highlight jsx"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs jsx"><span class="hljs-keyword">function</span> <span class="hljs-title function_">Example</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-comment">// 声明一个叫 &quot;count&quot; 的 state 变量</span><br>  <span class="hljs-keyword">const</span> [count, setCount] = <span class="hljs-title function_">useState</span>(<span class="hljs-number">0</span>)<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>You clicked &#123;count&#125; times<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> setCount(count + 1)&#125;&gt;Click me<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>  )<br>&#125;<br></code></pre></div></td></tr></table></figure><p>等价的 Class 示例：</p><figure class="highlight jsx"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs jsx"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Example</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">React.Component</span> &#123;<br>  <span class="hljs-title function_">constructor</span>(<span class="hljs-params">props</span>) &#123;<br>    <span class="hljs-variable language_">super</span>(props)<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">state</span> = &#123;<br>      <span class="hljs-attr">count</span>: <span class="hljs-number">0</span>,<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> (<br>      <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>You clicked &#123;this.state.count&#125; times<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> this.setState(&#123; count: this.state.count + 1 &#125;)&#125;&gt;</span><br><span class="language-xml">          Click me</span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>    )<br>  &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="useEffect"><a href="#useEffect" class="headerlink" title="useEffect"></a>useEffect</h3><blockquote><p><em>Effect Hook</em> 可以让你在函数组件中执行副作用操作</p></blockquote><figure class="highlight jsx"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs jsx"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span>, &#123; useState, useEffect &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">Example</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> [count, setCount] = <span class="hljs-title function_">useState</span>(<span class="hljs-number">0</span>)<br><br>  <span class="hljs-comment">// Similar to componentDidMount and componentDidUpdate:</span><br>  <span class="hljs-title function_">useEffect</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-comment">// Update the document title using the browser API</span><br>    <span class="hljs-variable language_">document</span>.<span class="hljs-property">title</span> = <span class="hljs-string">`You clicked <span class="hljs-subst">$&#123;count&#125;</span> times`</span><br>  &#125;)<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>You clicked &#123;count&#125; times<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> setCount(count + 1)&#125;&gt;Click me<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>  )<br>&#125;<br></code></pre></div></td></tr></table></figure><blockquote><p>提示</p><p>如果你熟悉 React class 的生命周期函数，你可以把 <code>useEffect</code> Hook 看做 <code>componentDidMount</code>，<code>componentDidUpdate</code> 和 <code>componentWillUnmount</code> 这三个函数的组合。</p></blockquote><h4 id="无需清除的-effect"><a href="#无需清除的-effect" class="headerlink" title="无需清除的 effect"></a>无需清除的 effect</h4><p>使用 class 的示例：</p><figure class="highlight jsx"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs jsx"><span class="hljs-comment">// 实时更新标签页 title</span><br><span class="hljs-title function_">componentDidMount</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">document</span>.<span class="hljs-property">title</span> = <span class="hljs-string">`You clicked <span class="hljs-subst">$&#123;<span class="hljs-variable language_">this</span>.state.count&#125;</span> times`</span>;<br>&#125;<br><span class="hljs-title function_">componentDidUpdate</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">document</span>.<span class="hljs-property">title</span> = <span class="hljs-string">`You clicked <span class="hljs-subst">$&#123;<span class="hljs-variable language_">this</span>.state.count&#125;</span> times`</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>当你使用 hook：</p><figure class="highlight jsx"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs jsx"><span class="hljs-comment">// 当组件重新渲染之后就会执行</span><br><span class="hljs-title function_">useEffect</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-variable language_">document</span>.<span class="hljs-property">title</span> = <span class="hljs-string">`You clicked <span class="hljs-subst">$&#123;count&#125;</span> times`</span><br>&#125;)<br></code></pre></div></td></tr></table></figure><h4 id="需要清除的-effect"><a href="#需要清除的-effect" class="headerlink" title="需要清除的 effect"></a>需要清除的 effect</h4><p>使用 class 的示例：</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-comment">// 通常会在 componentDidMount 中设置订阅，并在 componentWillUnmount 中清除它。例如：订阅-发布</span><br><span class="hljs-title function_">componentDidMount</span>(<span class="hljs-params"></span>) &#123;<br>     <span class="hljs-title class_">ChatAPI</span>.<span class="hljs-title function_">subscribeToFriendStatus</span>(<br>         <span class="hljs-variable language_">this</span>.<span class="hljs-property">props</span>.<span class="hljs-property">friend</span>.<span class="hljs-property">id</span>,<br>     );<br> &#125;<br><span class="hljs-title function_">componentWillUnmount</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-title class_">ChatAPI</span>.<span class="hljs-title function_">unsubscribeFromFriendStatus</span>(<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">props</span>.<span class="hljs-property">friend</span>.<span class="hljs-property">id</span>,<br>    );<br>&#125;<br></code></pre></div></td></tr></table></figure><p>当你使用 hook：</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-comment">// effect 中返回一个函数，这是 effect 可选的清除机制。每个 effect 都可以返回一个清除函数。React 会在组件卸载的时候执行清除操作。正如之前学到的，effect 在每次渲染的时候都会执行。这就是为什么 React 会在执行当前 effect 之前对上一个 effect 进行清除。</span><br><span class="hljs-title function_">useEffect</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-title class_">ChatAPI</span>.<span class="hljs-title function_">subscribeToFriendStatus</span>(props.<span class="hljs-property">friend</span>.<span class="hljs-property">id</span>)<br>  <span class="hljs-comment">// 清除订阅</span><br>  <span class="hljs-keyword">return</span> <span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-title class_">ChatAPI</span>.<span class="hljs-title function_">unsubscribeFromFriendStatus</span>(props.<span class="hljs-property">friend</span>.<span class="hljs-property">id</span>)<br>  &#125;<br>&#125;)<br></code></pre></div></td></tr></table></figure><h2 id="5-额外的-Hook"><a href="#5-额外的-Hook" class="headerlink" title="5.额外的 Hook"></a>5.额外的 Hook</h2><h2 id="6-自定义-Hook"><a href="#6-自定义-Hook" class="headerlink" title="6.自定义 Hook"></a>6.自定义 Hook</h2>]]></content>
    
    
    <categories>
      
      <category>React</category>
      
    </categories>
    
    
    <tags>
      
      <tag>React</tag>
      
      <tag>React-Hook</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>npx 切换不同版本的 node 😲</title>
    <link href="/2022/02/25/npx%20%E5%88%87%E6%8D%A2%E4%B8%8D%E5%90%8C%E7%89%88%E6%9C%AC%E7%9A%84%20node%20%F0%9F%98%B2/"/>
    <url>/2022/02/25/npx%20%E5%88%87%E6%8D%A2%E4%B8%8D%E5%90%8C%E7%89%88%E6%9C%AC%E7%9A%84%20node%20%F0%9F%98%B2/</url>
    
    <content type="html"><![CDATA[<h2 id="npx-切换不同版本的-node-😲"><a href="#npx-切换不同版本的-node-😲" class="headerlink" title="npx 切换不同版本的 node 😲"></a>npx 切换不同版本的 node 😲</h2><p>偶然发现 <code>node</code> 的 <code>npx</code> 可以切换不同版本的 <code>node</code>,妥妥的 node 版本管理工具。之前也试过 <code>nvm</code> ，在某些场景下，个人感觉 <code>npx</code> 更方便点。</p><h3 id="01-原理"><a href="#01-原理" class="headerlink" title="01 原理"></a>01 原理</h3><blockquote><p>利用 npx 可以下载模块这个特点，可以指定某个版本的 Node 运行脚本。它的窍门就是使用 npm 的 <a href="https://www.npmjs.com/package/node">node 模块</a>。</p></blockquote><p>具体的 <code>npx</code> 语法，可以参考阮一峰老师，[此处](<a href="http://www.ruanyifeng.com/blog/2019/02/npx.html">npx 使用教程 - 阮一峰的网络日志 (ruanyifeng.com)</a>)</p><h3 id="02-示例"><a href="#02-示例" class="headerlink" title="02 示例"></a>02 示例</h3><p>模拟一个需要 <code>node@12.xx.xx</code> 才能启动的项目</p><p>使用 npx 下载对应 node 版本模块</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">$ npx node@12.9.1 -v<br>v12.9.1<br></code></pre></div></td></tr></table></figure><p>找到需要启动项目的目录下</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">$ npx -p node@12.9.1 npm start<br></code></pre></div></td></tr></table></figure><p>项目启动成功…</p>]]></content>
    
    
    <categories>
      
      <category>Node</category>
      
    </categories>
    
    
    <tags>
      
      <tag>npx</tag>
      
      <tag>node</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>TypeScript 那些事儿</title>
    <link href="/2022/02/21/TypeScript%20%E9%82%A3%E4%BA%9B%E4%BA%8B%E5%84%BF/"/>
    <url>/2022/02/21/TypeScript%20%E9%82%A3%E4%BA%9B%E4%BA%8B%E5%84%BF/</url>
    
    <content type="html"><![CDATA[<h2 id="TypeScript-那些事儿"><a href="#TypeScript-那些事儿" class="headerlink" title="TypeScript 那些事儿"></a>TypeScript 那些事儿</h2><h3 id="01-变量类型-😊"><a href="#01-变量类型-😊" class="headerlink" title="01 变量类型 😊"></a>01 变量类型 😊</h3><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-keyword">let</span> 变量名 : 变量类型 = value<br><span class="hljs-keyword">function</span> (<span class="hljs-params"> 变量名：变量类型 </span>): 变量类型&#123;&#125;<br></code></pre></div></td></tr></table></figure><h4 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h4><table><thead><tr><th>类型</th><th>例子</th><th align="center">描述</th></tr></thead><tbody><tr><td>number</td><td>1,22,2.5</td><td align="center">任意数字</td></tr><tr><td>string</td><td>‘DuoR’,”bbb”</td><td align="center">任意字符串</td></tr><tr><td>boolean</td><td>true,false</td><td align="center"></td></tr><tr><td>字面量</td><td>其本身</td><td align="center">限制变量的值就是该字面量的值</td></tr><tr><td>any</td><td>*</td><td align="center">任意类型</td></tr><tr><td>unknown</td><td>*</td><td align="center">类型安全的 any</td></tr><tr><td>void</td><td>空值 undefined</td><td align="center">没有值</td></tr><tr><td>never</td><td>没有值</td><td align="center">不能是任何值</td></tr><tr><td>object</td><td>对象值</td><td align="center">js Object</td></tr><tr><td>array</td><td>[1,2,3,]</td><td align="center">js array</td></tr><tr><td>tuple</td><td>[4,5]</td><td align="center">元组，表示一个已知元素数量和类型的数组</td></tr><tr><td>enum</td><td>enum{A,B}</td><td align="center">枚举</td></tr><tr><td>联合声明</td><td>boolean | string</td><td align="center">可以是 boolean 和 string 类型</td></tr></tbody></table><ul><li><p>变量类型之间是不可以互相赋值的，否则会报错</p></li><li><p>声明和赋值是同时进行的，TS 可以自动对类型进行检测,可以省略定义类型的步骤</p></li><li><p>类型断言，<code>变量1 = &lt;变量类型&gt; 变量名2 或 变量1 = 变量名2 as 变量类型</code></p></li><li><p>类型的别名, <code>type 自定义类型名 = 变量类型（|，&amp;）</code></p></li><li><p>typescrpt 3.4 引入 readonly, 修饰后，变量只读:</p></li></ul><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-keyword">const</span> <span class="hljs-attr">arr</span>: readonly string[]= [<span class="hljs-string">&#x27;1&#x27;</span>,<span class="hljs-string">&#x27;2&#x27;</span>,<span class="hljs-string">&#x27;3&#x27;</span>]<br></code></pre></div></td></tr></table></figure><p><strong>注意点：</strong></p><p>a. 在 <code>tsconfig.json</code> 指定了<code>&quot;strictNullChecks&quot;:false</code>，<code>undefined</code> 与 <code>null</code> 是可以赋值到其他类型的（string/num…）,否则，<code>null</code> 和 <code>undefined</code> 只能赋值给 <code>void</code> 和它们各自的类型。</p><p>b. <code>number</code> 和 <code>bigint</code> 都是表示数字，但是这两个类<code>相互不兼容的</code></p><h4 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h4><figure class="highlight tsx"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs tsx"><span class="hljs-comment">// 函数声明</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">sum</span>(<span class="hljs-params">num1: <span class="hljs-built_in">number</span>, num2: <span class="hljs-built_in">number</span></span>): <span class="hljs-built_in">number</span> &#123;<br>  <span class="hljs-keyword">return</span> num1 + num2<br>&#125;<br><br><span class="hljs-comment">// 函数表达式</span><br><span class="hljs-title function_">sum</span>(<span class="hljs-number">98</span>, <span class="hljs-number">29</span>)<br><br><span class="hljs-keyword">let</span> sub = (<span class="hljs-attr">num1</span>: <span class="hljs-built_in">number</span>, <span class="hljs-attr">num2</span>: <span class="hljs-built_in">number</span>): <span class="hljs-function"><span class="hljs-params">number</span> =&gt;</span> &#123;<br>  <span class="hljs-keyword">return</span> num1 - num2<br>&#125;<br><span class="hljs-title function_">sub</span>(<span class="hljs-number">98</span>, <span class="hljs-number">29</span>)<br><br><span class="hljs-comment">// 函数重载</span><br><span class="hljs-keyword">type</span> <span class="hljs-title class_">Types</span> = <span class="hljs-built_in">number</span> | <span class="hljs-built_in">string</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">a: <span class="hljs-built_in">string</span>, b: <span class="hljs-built_in">string</span></span>): <span class="hljs-built_in">string</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">a: <span class="hljs-built_in">number</span>, b: <span class="hljs-built_in">number</span></span>): <span class="hljs-built_in">number</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">a: <span class="hljs-built_in">number</span>, b: <span class="hljs-built_in">string</span></span>): <span class="hljs-built_in">string</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">a: <span class="hljs-built_in">string</span>, b: <span class="hljs-built_in">number</span></span>): <span class="hljs-built_in">string</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">a: Types, b: Types</span>) &#123;<br>  <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> a === <span class="hljs-string">&#x27;string&#x27;</span> || <span class="hljs-keyword">typeof</span> b === <span class="hljs-string">&#x27;string&#x27;</span>) &#123;<br>    <span class="hljs-keyword">return</span> a.<span class="hljs-title function_">toString</span>() + b.<span class="hljs-title function_">toString</span>()<br>  &#125;<br>  <span class="hljs-keyword">return</span> a + b<br>&#125;<br><span class="hljs-title function_">add</span>(<span class="hljs-string">&#x27;1&#x27;</span>, <span class="hljs-string">&#x27;2&#x27;</span>).<span class="hljs-title function_">split</span>(<span class="hljs-string">&#x27;&#x27;</span>)<br></code></pre></div></td></tr></table></figure><h4 id="特别的类型"><a href="#特别的类型" class="headerlink" title="特别的类型"></a>特别的类型</h4><h5 id="never"><a href="#never" class="headerlink" title="never"></a>never</h5><blockquote><p>表示的是那些永不存在的值的类型</p></blockquote><p>两种情况：</p><figure class="highlight tsx"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs tsx"><span class="hljs-comment">// 异常</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">err</span>(<span class="hljs-params">msg: <span class="hljs-built_in">string</span></span>): <span class="hljs-built_in">never</span> &#123;<br>  <span class="hljs-comment">// OK</span><br>  <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>(msg)<br>&#125;<br><br><span class="hljs-comment">// 死循环</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">loopForever</span>(<span class="hljs-params"></span>): <span class="hljs-built_in">never</span> &#123;<br>  <span class="hljs-comment">// OK</span><br>  <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;&#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>特别用法：</p><figure class="highlight tsx"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs tsx"><span class="hljs-comment">// 利用 never 类型的特性来实现全面性检查</span><br><span class="hljs-keyword">type</span> <span class="hljs-title class_">Foo</span> = <span class="hljs-built_in">string</span> | <span class="hljs-built_in">number</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">controlFlowAnalysisWithNever</span>(<span class="hljs-params">foo: Foo</span>) &#123;<br>  <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> foo === <span class="hljs-string">&#x27;string&#x27;</span>) &#123;<br>    <span class="hljs-comment">// 这里 foo 被收窄为 string 类型</span><br>  &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> foo === <span class="hljs-string">&#x27;number&#x27;</span>) &#123;<br>    <span class="hljs-comment">// 这里 foo 被收窄为 number 类型</span><br>  &#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-comment">// foo 在这里是 never</span><br>    <span class="hljs-keyword">const</span> <span class="hljs-attr">check</span>: <span class="hljs-built_in">never</span> = foo<br>  &#125;<br>&#125;<br><span class="hljs-comment">// 假如哪一天Foo新增boolean，ts就会抛出一个产生一个编译错误。确保 controlFlowAnalysisWithNever 方法总是穷尽了 Foo 的所有可能类型。</span><br><span class="hljs-keyword">type</span> <span class="hljs-title class_">Foo</span> = <span class="hljs-built_in">string</span> | <span class="hljs-built_in">number</span> | <span class="hljs-built_in">boolean</span><br><span class="hljs-comment">// 使用 never 避免出现新增了联合类型没有对应的实现，目的就是写出类型绝对安全的代码。</span><br></code></pre></div></td></tr></table></figure><h5 id="unknown"><a href="#unknown" class="headerlink" title="unknown"></a>unknown</h5><blockquote><p>unknown<code>与</code>any<code>的最大区别是： 任何类型的值可以赋值给</code>any<code>，同时</code>any<code>类型的值也可以赋值给任何类型。</code>unknown<code> 任何类型的值都可以赋值给它，但它只能赋值给</code>unknown<code>和</code>any</p></blockquote><figure class="highlight tsx"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs tsx"><span class="hljs-comment">// 这种机制起到了很强的预防性，更安全，这就要求我们必须缩小类型，我们可以使用typeof、类型断言等方式来缩小未知范围：</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">getDogName</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">let</span> <span class="hljs-attr">x</span>: unknown<br>  <span class="hljs-keyword">return</span> x<br>&#125;<br><span class="hljs-keyword">const</span> dogName = <span class="hljs-title function_">getDogName</span>()<br><span class="hljs-comment">// 直接使用</span><br><span class="hljs-keyword">const</span> upName = dogName.<span class="hljs-title function_">toLowerCase</span>() <span class="hljs-comment">// Error</span><br><span class="hljs-comment">// typeof</span><br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> dogName === <span class="hljs-string">&#x27;string&#x27;</span>) &#123;<br>  <span class="hljs-keyword">const</span> upName = dogName.<span class="hljs-title function_">toLowerCase</span>() <span class="hljs-comment">// OK</span><br>&#125;<br><span class="hljs-comment">// 类型断言</span><br><span class="hljs-keyword">const</span> upName = (dogName <span class="hljs-keyword">as</span> <span class="hljs-built_in">string</span>).<span class="hljs-title function_">toLowerCase</span>() <span class="hljs-comment">// OK</span><br></code></pre></div></td></tr></table></figure><h5 id="Number、String、Boolean、Symbol"><a href="#Number、String、Boolean、Symbol" class="headerlink" title="Number、String、Boolean、Symbol"></a>Number、String、Boolean、Symbol</h5><blockquote><p>首先，我们来回顾一下初学 TypeScript 时，很容易和原始类型 number、string、boolean、symbol 混淆的首字母大写的 Number、String、Boolean、Symbol 类型，后者是相应原始类型的<code>包装对象</code>，姑且把它们称之为对象类型。</p></blockquote><p>从类型兼容性上看，原始类型兼容对应的对象类型，反过来对象类型不兼容对应的原始类型。</p><p>下面我们看一个具体的示例：</p><figure class="highlight tsx"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs tsx"><span class="hljs-keyword">let</span> <span class="hljs-attr">num</span>: <span class="hljs-built_in">number</span><br><span class="hljs-keyword">let</span> <span class="hljs-title class_">Num</span>: <span class="hljs-title class_">Number</span><br><span class="hljs-title class_">Num</span> = num <span class="hljs-comment">// ok</span><br>num = <span class="hljs-title class_">Num</span> <span class="hljs-comment">// ts(2322)报错</span><br></code></pre></div></td></tr></table></figure><p><strong>此，我们需要铭记不要使用对象类型来注解值的类型，因为这没有任何意义。</strong></p><h5 id="object、Object-和"><a href="#object、Object-和" class="headerlink" title="object、Object 和 {}"></a>object、Object 和 {}</h5><blockquote><p>另外，object（首字母小写，以下称“小 object”）、Object（首字母大写，以下称“大 Object”）和 {}（以下称“空对象”）</p></blockquote><p>小 object 代表的是所有非原始类型，也就是说我们不能把 number、string、boolean、symbol 等 原始类型赋值给 object。在严格模式下，<code>null</code> 和 <code>undefined</code> 类型也不能赋给 object。</p><figure class="highlight tsx"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs tsx"><span class="hljs-comment">// object</span><br><span class="hljs-keyword">let</span> <span class="hljs-attr">lowerCaseObject</span>: <span class="hljs-built_in">object</span><br>lowerCaseObject = <span class="hljs-number">1</span> <span class="hljs-comment">// ts(2322)</span><br>lowerCaseObject = <span class="hljs-string">&#x27;a&#x27;</span> <span class="hljs-comment">// ts(2322)</span><br>lowerCaseObject = <span class="hljs-literal">true</span> <span class="hljs-comment">// ts(2322)</span><br>lowerCaseObject = <span class="hljs-literal">null</span> <span class="hljs-comment">// ts(2322)</span><br>lowerCaseObject = <span class="hljs-literal">undefined</span> <span class="hljs-comment">// ts(2322)</span><br>lowerCaseObject = &#123;&#125; <span class="hljs-comment">// ok</span><br></code></pre></div></td></tr></table></figure><p>大 Object 代表所有拥有 toString、hasOwnProperty 方法的类型，所以所有原始类型、非原始类型都可以赋给 Object。同样，在严格模式下，null 和 undefined 类型也不能赋给 Object。</p><figure class="highlight tsx"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs tsx"><span class="hljs-comment">// Object</span><br><span class="hljs-keyword">let</span> <span class="hljs-attr">upperCaseObject</span>: <span class="hljs-title class_">Object</span><br>upperCaseObject = <span class="hljs-number">1</span> <span class="hljs-comment">// ok</span><br>upperCaseObject = <span class="hljs-string">&#x27;a&#x27;</span> <span class="hljs-comment">// ok</span><br>upperCaseObject = <span class="hljs-literal">true</span> <span class="hljs-comment">// ok</span><br>upperCaseObject = <span class="hljs-literal">null</span> <span class="hljs-comment">// ts(2322)</span><br>upperCaseObject = <span class="hljs-literal">undefined</span> <span class="hljs-comment">// ts(2322)</span><br>upperCaseObject = &#123;&#125; <span class="hljs-comment">// ok</span><br></code></pre></div></td></tr></table></figure><p><strong>综上结论：{}、大 Object 是比小 object 更宽泛的类型（least specific），{} 和大 Object 可以互相代替，用来表示原始类型（null、undefined 除外）和非原始类型；而小 object 则表示非原始类型。</strong></p><h5 id="字面量"><a href="#字面量" class="headerlink" title="字面量"></a>字面量</h5><blockquote><p>在 TypeScript 中，字面量不仅可以表示值，还可以表示类型，即所谓的字面量类型。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-comment">// 目前，TypeScript 支持 3 种字面量类型：字符串字面量类型、数字字面量类型、布尔字面量类型</span><br><span class="hljs-keyword">let</span> <span class="hljs-attr">specifiedStr</span>: <span class="hljs-string">&#x27;this is string&#x27;</span> = <span class="hljs-string">&#x27;this is string&#x27;</span><br><span class="hljs-keyword">let</span> <span class="hljs-attr">specifiedNum</span>: <span class="hljs-number">1</span> = <span class="hljs-number">1</span><br><span class="hljs-keyword">let</span> <span class="hljs-attr">specifiedBoolean</span>: <span class="hljs-literal">true</span> = <span class="hljs-literal">true</span><br></code></pre></div></td></tr></table></figure><p>应用场景：</p><p>比如声明如下所示的一个类型 Config：</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js">interface <span class="hljs-title class_">Config</span> &#123;<br>  <span class="hljs-attr">size</span>: <span class="hljs-string">&#x27;small&#x27;</span> | <span class="hljs-string">&#x27;big&#x27;</span>;<br>  <span class="hljs-attr">isEnable</span>: <span class="hljs-literal">true</span> | <span class="hljs-literal">false</span>;<br>  <span class="hljs-attr">margin</span>: <span class="hljs-number">0</span> | <span class="hljs-number">2</span> | <span class="hljs-number">4</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>需要注意 :</p><p>在缺省类型注解的情况下，TypeScript 推断出它的类型直接由赋值字面量的类型决定</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-keyword">const</span> str = <span class="hljs-string">&#x27;this is string&#x27;</span> <span class="hljs-comment">// str: &#x27;this is string&#x27;</span><br><span class="hljs-keyword">const</span> num = <span class="hljs-number">1</span> <span class="hljs-comment">// num: 1</span><br><span class="hljs-keyword">const</span> bool = <span class="hljs-literal">true</span> <span class="hljs-comment">// bool: true</span><br></code></pre></div></td></tr></table></figure><h3 id="02-ts-专业名词-🧐"><a href="#02-ts-专业名词-🧐" class="headerlink" title="02 ts 专业名词 🧐"></a>02 ts 专业名词 🧐</h3><h4 id="类型推断"><a href="#类型推断" class="headerlink" title="类型推断"></a>类型推断</h4><blockquote><p>在很多情况下，TypeScript 会根据上下文环境自动推断出变量的类型，无须我们再写明类型注解。</p></blockquote><figure class="highlight tsx"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs tsx"><span class="hljs-keyword">let</span> <span class="hljs-attr">str</span>: <span class="hljs-built_in">string</span> = <span class="hljs-string">&#x27;I am a string&#x27;</span><br><span class="hljs-keyword">let</span> <span class="hljs-attr">num</span>: <span class="hljs-built_in">number</span> = <span class="hljs-number">1</span><br><span class="hljs-keyword">let</span> <span class="hljs-attr">bool</span>: <span class="hljs-built_in">boolean</span> = <span class="hljs-literal">true</span><br><span class="hljs-comment">// 简化后 -----&gt;</span><br><span class="hljs-keyword">let</span> str = <span class="hljs-string">&#x27;I am a string&#x27;</span><br><span class="hljs-keyword">let</span> num = <span class="hljs-number">1</span><br><span class="hljs-keyword">let</span> bool = <span class="hljs-literal">true</span><br></code></pre></div></td></tr></table></figure><p>我们把 TypeScript 这种基于赋值表达式推断类型的能力称之为<code>类型推断</code></p><p>在 TypeScript 中，具有初始化值的变量、有默认值的函数参数、函数返回的类型都可以根据上下文推断出来。比如我们能根据 return 语句推断函数返回的类型，如下代码所示：</p><figure class="highlight tsx"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs tsx"><span class="hljs-comment">/** 根据参数的类型，推断出返回值的类型也是 number */</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">add1</span>(<span class="hljs-params">a: <span class="hljs-built_in">number</span>, b: <span class="hljs-built_in">number</span></span>) &#123;<br>  <span class="hljs-keyword">return</span> a + b<br>&#125;<br><span class="hljs-keyword">const</span> x1 = <span class="hljs-title function_">add1</span>(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>) <span class="hljs-comment">// 推断出 x1 的类型也是 number</span><br><br><span class="hljs-comment">/** 推断参数 b 的类型是数字或者 undefined，返回值的类型也是数字 */</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">add2</span>(<span class="hljs-params">a: <span class="hljs-built_in">number</span>, b = <span class="hljs-number">1</span></span>) &#123;<br>  <span class="hljs-keyword">return</span> a + b<br>&#125;<br><span class="hljs-keyword">const</span> x2 = <span class="hljs-title function_">add2</span>(<span class="hljs-number">1</span>)<br><span class="hljs-keyword">const</span> x3 = <span class="hljs-title function_">add2</span>(<span class="hljs-number">1</span>, <span class="hljs-string">&#x27;1&#x27;</span>) <span class="hljs-comment">// ts(2345) Argument of type &quot;1&quot; is not assignable to parameter of type &#x27;number | undefined</span><br></code></pre></div></td></tr></table></figure><p>但！如果定义的时候没有赋值，不管之后有没有赋值，都会被推断成 any 类型而完全不被类型检查。</p><h4 id="类型断言"><a href="#类型断言" class="headerlink" title="类型断言"></a>类型断言</h4><p>TypeScript 类型检测无法做到绝对智能，毕竟程序不能像人一样思考。有时会碰到我们比 TypeScript 更清楚实际类型的情况，比如下面的例子：</p><figure class="highlight tsx"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs tsx"><span class="hljs-keyword">const</span> <span class="hljs-attr">arrayNumber</span>: <span class="hljs-built_in">number</span>[] = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>]<br><span class="hljs-keyword">const</span> <span class="hljs-attr">greaterThan2</span>: <span class="hljs-built_in">number</span> = arrayNumber.<span class="hljs-title function_">find</span>(<span class="hljs-function">(<span class="hljs-params">num</span>) =&gt;</span> num &gt; <span class="hljs-number">2</span>) <span class="hljs-comment">// 提示 ts(2322),有可能是 undefinded 或 number</span><br><br><span class="hljs-comment">// 加入类型检测</span><br><br><span class="hljs-keyword">const</span> <span class="hljs-attr">arrayNumber</span>: <span class="hljs-built_in">number</span>[] = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>]<br><span class="hljs-keyword">const</span> <span class="hljs-attr">greaterThan2</span>: <span class="hljs-built_in">number</span> = arrayNumber.<span class="hljs-title function_">find</span>(<span class="hljs-function">(<span class="hljs-params">num</span>) =&gt;</span> num &gt; <span class="hljs-number">2</span>) <span class="hljs-keyword">as</span> <span class="hljs-built_in">number</span> <span class="hljs-comment">// ok</span><br></code></pre></div></td></tr></table></figure><h5 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h5><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-keyword">let</span> <span class="hljs-attr">str</span>: string = <span class="hljs-string">&quot;我是string&quot;</span><br><span class="hljs-comment">// 相当于跳过类型检测</span><br><span class="hljs-comment">// 01 尖括号</span><br><span class="hljs-keyword">let</span> <span class="hljs-attr">a</span>: number = &lt;number&gt;str;<br><span class="hljs-comment">// 02 as 语法</span><br><span class="hljs-keyword">let</span> <span class="hljs-attr">a</span>: number = str <span class="hljs-keyword">as</span> number;<br></code></pre></div></td></tr></table></figure><h5 id="非空断言"><a href="#非空断言" class="headerlink" title="非空断言"></a>非空断言</h5><p>在上下文中当类型检查器无法断定类型时,可以使用 <code>&quot;!&quot;</code>断言操作对象非 null 或 undefined</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-comment">// 示例1</span><br><span class="hljs-keyword">let</span> <span class="hljs-attr">str</span>: <span class="hljs-literal">null</span> | <span class="hljs-literal">undefined</span> | string;<br>str.<span class="hljs-title function_">toString</span>() <span class="hljs-comment">// error</span><br>str!.<span class="hljs-title function_">toString</span>() <span class="hljs-comment">// ok</span><br><span class="hljs-comment">// 示例2</span><br>type <span class="hljs-title class_">Foo</span> = <span class="hljs-function">() =&gt;</span> number<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">myFun</span>(<span class="hljs-params">foo: Foo || <span class="hljs-literal">undefined</span></span>) &#123;<br>    <span class="hljs-title function_">foo</span>();<span class="hljs-comment">// error</span><br>    foo!(); <span class="hljs-comment">//ok</span><br>&#125;<br></code></pre></div></td></tr></table></figure><h5 id="确定赋值断言"><a href="#确定赋值断言" class="headerlink" title="确定赋值断言"></a>确定赋值断言</h5><p>允许在实例属性和变量声明后面放置一个 <code>&quot;!&quot;</code> 号,从而告诉 TypeScript 该属性会被明确地赋值。为了更好地理解它的作用，我们来看个具体的例子：</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-keyword">let</span> <span class="hljs-attr">x</span>: number;<br><span class="hljs-title function_">initialize</span>();<br><br><span class="hljs-comment">// Variable &#x27;x&#x27; is used before being assigned.(2454) 很明显该异常信息是说变量 x 在赋值前被使用</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">2</span> * x); <span class="hljs-comment">// Error</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">initialize</span>(<span class="hljs-params"></span>) &#123;<br>  x = <span class="hljs-number">10</span>;<br>&#125;<br><br><span class="hljs-comment">// 解决该问题，我们可以使用确定赋值断言：</span><br><span class="hljs-keyword">let</span> x!: number;<br><span class="hljs-title function_">initialize</span>();<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">2</span> * x); <span class="hljs-comment">// Ok</span><br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">initialize</span>(<span class="hljs-params"></span>) &#123;<br>  x = <span class="hljs-number">10</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>通过 <code>let x!: number;</code> 确定赋值断言，TypeScript 编译器就会知道该属性会被明确地赋值。</p><h4 id="类型拓宽（Type-Widening）"><a href="#类型拓宽（Type-Widening）" class="headerlink" title="类型拓宽（Type Widening）"></a>类型拓宽（Type Widening）</h4><h4 id="类型缩小（Type-Narrowing）"><a href="#类型缩小（Type-Narrowing）" class="headerlink" title="类型缩小（Type Narrowing）"></a>类型缩小（Type Narrowing）</h4><h3 id="03-编译选项-tsconfig-json💕"><a href="#03-编译选项-tsconfig-json💕" class="headerlink" title="03 编译选项 tsconfig.json💕"></a>03 编译选项 tsconfig.json💕</h3><h4 id="编译选项"><a href="#编译选项" class="headerlink" title="编译选项"></a>编译选项</h4><h5 id="include"><a href="#include" class="headerlink" title="include"></a>include</h5><p>示例： [path1,path2…]</p><p>作用：规定需要编译的路径</p><h5 id="exclude"><a href="#exclude" class="headerlink" title="exclude"></a>exclude</h5><p>示例： [path1,path2…]</p><p>作用：排除规定不需要编译的路径</p><h5 id="compilerOptions"><a href="#compilerOptions" class="headerlink" title="compilerOptions"></a><a href="https://www.tslang.cn/docs/handbook/compiler-options.html">compilerOptions</a></h5><p>常见的编译选项：</p><table><thead><tr><th>选项</th><th>类型</th><th>默认</th><th>描述</th></tr></thead><tbody><tr><td>target</td><td>string</td><td>“ES3”</td><td>指定<code>ECMAScript</code>目标版本</td></tr><tr><td>module</td><td>string</td><td>target === “ES6” ? “ES6” : “commonjs”</td><td>指定生成哪个模块系统代码</td></tr><tr><td>lib</td><td>string[]</td><td></td><td>编译过程中需要引入的库文件的列表。</td></tr><tr><td>outDir</td><td>string</td><td></td><td>重定向输出目录。</td></tr><tr><td>outFile</td><td>string</td><td></td><td>将输出文件合并为一个文件。</td></tr><tr><td>removeComments</td><td>boolean</td><td>false</td><td>编译后移除注释</td></tr><tr><td>allowJs</td><td>boolean</td><td>false</td><td>是否编译 js 文件</td></tr><tr><td>checkJs</td><td>boolean</td><td>false</td><td>在 <code>.js</code>文件中报告错误。与 <code>--allowJs</code>配合使用。</td></tr><tr><td>noEmitOnError</td><td>boolean</td><td>false</td><td>编译，但不生成编译后的文件</td></tr><tr><td>noEmitOnError</td><td>boolean</td><td>false</td><td>报错时不生成输出文件</td></tr><tr><td>alwaysStrict</td><td>boolean</td><td>false</td><td>以严格模式解析并为每个源文件生成 <code>&quot;use strict&quot;</code>语句</td></tr><tr><td>noImplicitAny</td><td>boolean</td><td>false</td><td>在表达式和声明上有隐含的 <code>any</code>类型时报错。</td></tr></tbody></table><h3 id="03-使用-webpack-打包-ts-代码-📦"><a href="#03-使用-webpack-打包-ts-代码-📦" class="headerlink" title="03 使用 webpack 打包 ts 代码 📦"></a>03 使用 webpack 打包 ts 代码 📦</h3><h4 id="webpack-配置"><a href="#webpack-配置" class="headerlink" title="webpack 配置"></a>webpack 配置</h4><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-keyword">const</span> path = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;path&#x27;</span>)<br><span class="hljs-comment">// HTML模板, 自动将打包好的模块得引入到 html内</span><br><span class="hljs-keyword">const</span> <span class="hljs-title class_">HtmlWebpackPlugin</span> = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;html-webpack-plugin&#x27;</span>)<br><span class="hljs-comment">// 自动清理 dist 文件目录下的老文件</span><br><span class="hljs-keyword">const</span> &#123; <span class="hljs-title class_">CleanWebpackPlugin</span> &#125; = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;clean-webpack-plugin&#x27;</span>)<br><br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = &#123;<br>  <span class="hljs-comment">// 开发模式下</span><br>  <span class="hljs-attr">mode</span>: <span class="hljs-string">&#x27;development&#x27;</span>,<br>  <span class="hljs-comment">// 入口</span><br>  <span class="hljs-attr">entry</span>: <span class="hljs-string">&#x27;./src/index.ts&#x27;</span>,<br>  <span class="hljs-comment">// 出口</span><br>  <span class="hljs-attr">output</span>: &#123;<br>    <span class="hljs-attr">filename</span>: <span class="hljs-string">&#x27;bundle.js&#x27;</span>,<br>    <span class="hljs-attr">path</span>: path.<span class="hljs-title function_">resolve</span>(__dirname, <span class="hljs-string">&#x27;dist&#x27;</span>),<br>    <span class="hljs-attr">environment</span>: &#123;<br>      <span class="hljs-comment">// 用于兼容 IE 浏览器</span><br>      <span class="hljs-attr">arrowFunction</span>: <span class="hljs-literal">false</span>,<br>    &#125;,<br>  &#125;,<br>  <span class="hljs-comment">// 模块</span><br>  <span class="hljs-attr">module</span>: &#123;<br>    <span class="hljs-attr">rules</span>: [<br>      <span class="hljs-comment">// 用于解析 ts 文件格式规则</span><br>      &#123;<br>        <span class="hljs-attr">test</span>: <span class="hljs-regexp">/\.ts$/</span>,<br>        <span class="hljs-attr">use</span>: [<br>          <span class="hljs-comment">// 配置 Babel</span><br>          &#123;<br>            <span class="hljs-comment">// loder</span><br>            <span class="hljs-attr">loader</span>: <span class="hljs-string">&#x27;babel-loader&#x27;</span>,<br>            <span class="hljs-comment">// 设置 babel</span><br>            <span class="hljs-attr">options</span>: &#123;<br>              <span class="hljs-comment">// 设置预定义得环境</span><br>              <span class="hljs-attr">presets</span>: [<br>                [<br>                  <span class="hljs-comment">// 指定环境得插件</span><br>                  <span class="hljs-string">&#x27;@babel/preset-env&#x27;</span>,<br>                  <span class="hljs-comment">// 配置信息</span><br>                  &#123;<br>                    <span class="hljs-comment">// 需要兼容目标浏览器</span><br>                    <span class="hljs-attr">targets</span>: &#123;<br>                      <span class="hljs-attr">ie</span>: <span class="hljs-number">11</span>,<br>                    &#125;,<br>                    <span class="hljs-comment">// 指定core.js的版本</span><br>                    <span class="hljs-attr">corejs</span>: <span class="hljs-string">&#x27;3&#x27;</span>,<br>                    <span class="hljs-comment">// 使用corejs方式 &quot;usage&quot;,表示按需加载</span><br>                    <span class="hljs-attr">useBuiltIns</span>: <span class="hljs-string">&#x27;usage&#x27;</span>,<br>                  &#125;,<br>                ],<br>              ],<br>            &#125;,<br>          &#125;,<br>          <span class="hljs-string">&#x27;ts-loader&#x27;</span>,<br>        ],<br>        <span class="hljs-comment">// 排除的文件</span><br>        <span class="hljs-attr">exclude</span>: <span class="hljs-regexp">/node_modules/</span>,<br>      &#125;,<br>    ],<br>  &#125;,<br><br>  <span class="hljs-comment">// 配置 Webpack 插件</span><br>  <span class="hljs-attr">plugins</span>: [<br>    <span class="hljs-keyword">new</span> <span class="hljs-title class_">CleanWebpackPlugin</span>(),<br>    <span class="hljs-keyword">new</span> <span class="hljs-title class_">HtmlWebpackPlugin</span>((options = &#123; <span class="hljs-attr">template</span>: <span class="hljs-string">&#x27;./src/index.html&#x27;</span> &#125;)),<br>  ],<br><br>  <span class="hljs-comment">// 配置 webpack-dev-server</span><br>  <span class="hljs-attr">devServer</span>: &#123;<br>    <span class="hljs-attr">static</span>: &#123;<br>      <span class="hljs-attr">directory</span>: path.<span class="hljs-title function_">resolve</span>(__dirname, <span class="hljs-string">&#x27;public&#x27;</span>),<br>    &#125;,<br>    <span class="hljs-attr">port</span>: <span class="hljs-number">8081</span>,<br>  &#125;,<br><br>  <span class="hljs-comment">// 用来设置引用模块</span><br>  <span class="hljs-attr">resolve</span>: &#123;<br>    <span class="hljs-comment">// 扩展 ts 可以使用模块</span><br>    <span class="hljs-attr">extensions</span>: [<span class="hljs-string">&#x27;.ts&#x27;</span>, <span class="hljs-string">&#x27;.js&#x27;</span>],<br>  &#125;,<br>&#125;<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>TypeScript</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JavaScript</tag>
      
      <tag>TypeScript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>配置 Gitlab, Github, Gitee 的环境</title>
    <link href="/2022/02/15/%E9%85%8D%E7%BD%AE%20Gitlab,%20Github,%20Gitee%20%E7%9A%84%E7%8E%AF%E5%A2%83/"/>
    <url>/2022/02/15/%E9%85%8D%E7%BD%AE%20Gitlab,%20Github,%20Gitee%20%E7%9A%84%E7%8E%AF%E5%A2%83/</url>
    
    <content type="html"><![CDATA[<h2 id="配置-Gitlab-Github-Gitee-的环境"><a href="#配置-Gitlab-Github-Gitee-的环境" class="headerlink" title="配置 Gitlab, Github, Gitee 的环境"></a>配置 Gitlab, Github, Gitee 的环境</h2><h3 id="01-问题描述："><a href="#01-问题描述：" class="headerlink" title="01 问题描述："></a>01 问题描述：</h3><p>使用 Hexo 搭建播客，遇到一个问题，Github 和 Gitlab 的用户名和邮箱都不一样，所以每次代码 push,邮箱和用户名都得改了改去。因此就需要配置三者共存的 Git 环境。</p><h3 id="02-解决问题："><a href="#02-解决问题：" class="headerlink" title="02 解决问题："></a>02 解决问题：</h3><p>下面这个链接是我在网上找到的不错的解决方案。</p><p><a href="https://www.cnblogs.com/tooyi/p/13677190.html">配置 github 和 gitee(码云)的 Git 环境</a></p><h3 id="03-补充-config-文件常见配置项："><a href="#03-补充-config-文件常见配置项：" class="headerlink" title="03 补充 config 文件常见配置项："></a>03 补充 config 文件常见配置项：</h3><figure class="highlight ini"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs ini"><span class="hljs-comment">#配置示例</span><br><span class="hljs-comment">#Host 后面是别名</span><br><span class="hljs-comment">#HostName 为IP</span><br><span class="hljs-comment">#Port为端口</span><br><span class="hljs-comment">#User为用户名</span><br><span class="hljs-comment">#IdentityFile为自己ID私钥</span><br><span class="hljs-comment">#PreferredAuthentications publickey  # 首选认证方式</span><br></code></pre></div></td></tr></table></figure><p>示例：</p><blockquote><p>aa 公司</p><p>gitlab 地址：http:// xx.xx.xx.xx</p><p>email: <a href="mailto:&#x78;&#x69;&#x61;&#111;&#109;&#x69;&#x6e;&#103;&#64;&#x61;&#x61;&#x2e;&#x63;&#111;&#109;">&#x78;&#x69;&#x61;&#111;&#109;&#x69;&#x6e;&#103;&#64;&#x61;&#x61;&#x2e;&#x63;&#111;&#109;</a></p><p>name: xiaoming</p></blockquote><figure class="highlight ini"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs ini"><span class="hljs-comment">#gitLab</span><br>Host xx.xx.xx.xx<br>HostName xx.xx.xx.xx<br>User xiaoming<br>    IdentityFile ~/.ssh/id_rsa.gitlab<br>    PreferredAuthentications publickey<br></code></pre></div></td></tr></table></figure><p>测试一下</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">$ ssh -T git@xx.xx.xx.xx<br>// OK: Welcome to GitLab, @xiaoming!<br></code></pre></div></td></tr></table></figure><p>结尾：</p><p>在项目 git 仓库下,定义自己的 <code>用户名</code> 和 <code>email</code></p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">$ git config --<span class="hljs-built_in">local</span> user.name <span class="hljs-string">&quot;xiaoming&quot;</span><br><br>$ git config --<span class="hljs-built_in">local</span> user.email <span class="hljs-string">&quot;xiaoming@aa.com&quot;</span><br></code></pre></div></td></tr></table></figure><p>最后就可以愉快提交代码了…</p>]]></content>
    
    
    <categories>
      
      <category>Windows</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Hexo</tag>
      
      <tag>ssh</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
